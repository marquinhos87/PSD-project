%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.8.0
-module(nefitproto).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_ClientType/1, enum_value_by_symbol_ClientType/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("nefitproto.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'ClientType'() :: 'IMPORTER' | 'MANUFACTURER'.
-export_type(['ClientType'/0]).

%% message types
-type 'ClientToServer'() :: #'ClientToServer'{}.

-type 'ClientToServerLogin'() :: #'ClientToServerLogin'{}.

-type 'ClientToServerRegister'() :: #'ClientToServerRegister'{}.

-type 'ServerToClientAuth'() :: #'ServerToClientAuth'{}.

-type 'ManufacturerToServer'() :: #'ManufacturerToServer'{}.

-type 'ManufacturerToServerAnnounce'() :: #'ManufacturerToServerAnnounce'{}.

-type 'ServerToManufacturer'() :: #'ServerToManufacturer'{}.

-type 'ServerToManufacturerAnnounced'() :: #'ServerToManufacturerAnnounced'{}.

-type 'ServerToManufacturerInvalid'() :: #'ServerToManufacturerInvalid'{}.

-type 'ServerToManufacturerNoOffers'() :: #'ServerToManufacturerNoOffers'{}.

-type 'ServerToManufacturerSold'() :: #'ServerToManufacturerSold'{}.

-type 'ImporterToServer'() :: #'ImporterToServer'{}.

-type 'ImporterToServerSubscribe'() :: #'ImporterToServerSubscribe'{}.

-type 'ImporterToServerOffer'() :: #'ImporterToServerOffer'{}.

-type 'ServerToImporter'() :: #'ServerToImporter'{}.

-type 'ServerToImporterOfferSubmitted'() :: #'ServerToImporterOfferSubmitted'{}.

-type 'ServerToImporterOfferInvalid'() :: #'ServerToImporterOfferInvalid'{}.

-type 'ServerToImporterOfferWon'() :: #'ServerToImporterOfferWon'{}.

-type 'ServerToImporterOfferLose'() :: #'ServerToImporterOfferLose'{}.

-type 'ServerToImporterOfferOutdated'() :: #'ServerToImporterOfferOutdated'{}.

-type 'ServerToImporterNewProduct'() :: #'ServerToImporterNewProduct'{}.

-type 'ServerToImporterSubscribeAccepted'() :: #'ServerToImporterSubscribeAccepted'{}.

-type 'ArbiterToServer'() :: #'ArbiterToServer'{}.

-type 'ArbiterToServerAnnounceAccepted'() :: #'ArbiterToServerAnnounceAccepted'{}.

-type 'ArbiterToServerAnnounceInvalid'() :: #'ArbiterToServerAnnounceInvalid'{}.

-type 'ArbiterToServerAnnounceSold'() :: #'ArbiterToServerAnnounceSold'{}.

-type 'ArbiterToServerAnnounceNoOffers'() :: #'ArbiterToServerAnnounceNoOffers'{}.

-type 'ArbiterToServerOfferSubmitted'() :: #'ArbiterToServerOfferSubmitted'{}.

-type 'ArbiterToServerOfferInvalid'() :: #'ArbiterToServerOfferInvalid'{}.

-type 'ArbiterToServerOfferWon'() :: #'ArbiterToServerOfferWon'{}.

-type 'ArbiterToServerOfferLose'() :: #'ArbiterToServerOfferLose'{}.

-type 'ArbiterToServerOfferOutdated'() :: #'ArbiterToServerOfferOutdated'{}.

-type 'ArbiterToServerNewProduct'() :: #'ArbiterToServerNewProduct'{}.

-type 'ArbiterToServerSubscribeAccepted'() :: #'ArbiterToServerSubscribeAccepted'{}.

-type 'ServerToArbiter'() :: #'ServerToArbiter'{}.

-type 'ServerToArbiterOffer'() :: #'ServerToArbiterOffer'{}.

-type 'ServerToArbiterAnnounce'() :: #'ServerToArbiterAnnounce'{}.

-type 'ServerToArbiterSubscribe'() :: #'ServerToArbiterSubscribe'{}.

-export_type(['ClientToServer'/0, 'ClientToServerLogin'/0, 'ClientToServerRegister'/0, 'ServerToClientAuth'/0, 'ManufacturerToServer'/0, 'ManufacturerToServerAnnounce'/0, 'ServerToManufacturer'/0, 'ServerToManufacturerAnnounced'/0, 'ServerToManufacturerInvalid'/0, 'ServerToManufacturerNoOffers'/0, 'ServerToManufacturerSold'/0, 'ImporterToServer'/0, 'ImporterToServerSubscribe'/0, 'ImporterToServerOffer'/0, 'ServerToImporter'/0, 'ServerToImporterOfferSubmitted'/0, 'ServerToImporterOfferInvalid'/0, 'ServerToImporterOfferWon'/0, 'ServerToImporterOfferLose'/0, 'ServerToImporterOfferOutdated'/0, 'ServerToImporterNewProduct'/0, 'ServerToImporterSubscribeAccepted'/0, 'ArbiterToServer'/0, 'ArbiterToServerAnnounceAccepted'/0, 'ArbiterToServerAnnounceInvalid'/0, 'ArbiterToServerAnnounceSold'/0, 'ArbiterToServerAnnounceNoOffers'/0, 'ArbiterToServerOfferSubmitted'/0, 'ArbiterToServerOfferInvalid'/0, 'ArbiterToServerOfferWon'/0, 'ArbiterToServerOfferLose'/0, 'ArbiterToServerOfferOutdated'/0, 'ArbiterToServerNewProduct'/0, 'ArbiterToServerSubscribeAccepted'/0, 'ServerToArbiter'/0, 'ServerToArbiterOffer'/0, 'ServerToArbiterAnnounce'/0, 'ServerToArbiterSubscribe'/0]).

-spec encode_msg(#'ClientToServer'{} | #'ClientToServerLogin'{} | #'ClientToServerRegister'{} | #'ServerToClientAuth'{} | #'ManufacturerToServer'{} | #'ManufacturerToServerAnnounce'{} | #'ServerToManufacturer'{} | #'ServerToManufacturerAnnounced'{} | #'ServerToManufacturerInvalid'{} | #'ServerToManufacturerNoOffers'{} | #'ServerToManufacturerSold'{} | #'ImporterToServer'{} | #'ImporterToServerSubscribe'{} | #'ImporterToServerOffer'{} | #'ServerToImporter'{} | #'ServerToImporterOfferSubmitted'{} | #'ServerToImporterOfferInvalid'{} | #'ServerToImporterOfferWon'{} | #'ServerToImporterOfferLose'{} | #'ServerToImporterOfferOutdated'{} | #'ServerToImporterNewProduct'{} | #'ServerToImporterSubscribeAccepted'{} | #'ArbiterToServer'{} | #'ArbiterToServerAnnounceAccepted'{} | #'ArbiterToServerAnnounceInvalid'{} | #'ArbiterToServerAnnounceSold'{} | #'ArbiterToServerAnnounceNoOffers'{} | #'ArbiterToServerOfferSubmitted'{} | #'ArbiterToServerOfferInvalid'{} | #'ArbiterToServerOfferWon'{} | #'ArbiterToServerOfferLose'{} | #'ArbiterToServerOfferOutdated'{} | #'ArbiterToServerNewProduct'{} | #'ArbiterToServerSubscribeAccepted'{} | #'ServerToArbiter'{} | #'ServerToArbiterOffer'{} | #'ServerToArbiterAnnounce'{} | #'ServerToArbiterSubscribe'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'ClientToServer'{} | #'ClientToServerLogin'{} | #'ClientToServerRegister'{} | #'ServerToClientAuth'{} | #'ManufacturerToServer'{} | #'ManufacturerToServerAnnounce'{} | #'ServerToManufacturer'{} | #'ServerToManufacturerAnnounced'{} | #'ServerToManufacturerInvalid'{} | #'ServerToManufacturerNoOffers'{} | #'ServerToManufacturerSold'{} | #'ImporterToServer'{} | #'ImporterToServerSubscribe'{} | #'ImporterToServerOffer'{} | #'ServerToImporter'{} | #'ServerToImporterOfferSubmitted'{} | #'ServerToImporterOfferInvalid'{} | #'ServerToImporterOfferWon'{} | #'ServerToImporterOfferLose'{} | #'ServerToImporterOfferOutdated'{} | #'ServerToImporterNewProduct'{} | #'ServerToImporterSubscribeAccepted'{} | #'ArbiterToServer'{} | #'ArbiterToServerAnnounceAccepted'{} | #'ArbiterToServerAnnounceInvalid'{} | #'ArbiterToServerAnnounceSold'{} | #'ArbiterToServerAnnounceNoOffers'{} | #'ArbiterToServerOfferSubmitted'{} | #'ArbiterToServerOfferInvalid'{} | #'ArbiterToServerOfferWon'{} | #'ArbiterToServerOfferLose'{} | #'ArbiterToServerOfferOutdated'{} | #'ArbiterToServerNewProduct'{} | #'ArbiterToServerSubscribeAccepted'{} | #'ServerToArbiter'{} | #'ServerToArbiterOffer'{} | #'ServerToArbiterAnnounce'{} | #'ServerToArbiterSubscribe'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'ClientToServer'{} | #'ClientToServerLogin'{} | #'ClientToServerRegister'{} | #'ServerToClientAuth'{} | #'ManufacturerToServer'{} | #'ManufacturerToServerAnnounce'{} | #'ServerToManufacturer'{} | #'ServerToManufacturerAnnounced'{} | #'ServerToManufacturerInvalid'{} | #'ServerToManufacturerNoOffers'{} | #'ServerToManufacturerSold'{} | #'ImporterToServer'{} | #'ImporterToServerSubscribe'{} | #'ImporterToServerOffer'{} | #'ServerToImporter'{} | #'ServerToImporterOfferSubmitted'{} | #'ServerToImporterOfferInvalid'{} | #'ServerToImporterOfferWon'{} | #'ServerToImporterOfferLose'{} | #'ServerToImporterOfferOutdated'{} | #'ServerToImporterNewProduct'{} | #'ServerToImporterSubscribeAccepted'{} | #'ArbiterToServer'{} | #'ArbiterToServerAnnounceAccepted'{} | #'ArbiterToServerAnnounceInvalid'{} | #'ArbiterToServerAnnounceSold'{} | #'ArbiterToServerAnnounceNoOffers'{} | #'ArbiterToServerOfferSubmitted'{} | #'ArbiterToServerOfferInvalid'{} | #'ArbiterToServerOfferWon'{} | #'ArbiterToServerOfferLose'{} | #'ArbiterToServerOfferOutdated'{} | #'ArbiterToServerNewProduct'{} | #'ArbiterToServerSubscribeAccepted'{} | #'ServerToArbiter'{} | #'ServerToArbiterOffer'{} | #'ServerToArbiterAnnounce'{} | #'ServerToArbiterSubscribe'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ClientToServer' ->
	  encode_msg_ClientToServer(id(Msg, TrUserData),
				    TrUserData);
      'ClientToServerLogin' ->
	  encode_msg_ClientToServerLogin(id(Msg, TrUserData),
					 TrUserData);
      'ClientToServerRegister' ->
	  encode_msg_ClientToServerRegister(id(Msg, TrUserData),
					    TrUserData);
      'ServerToClientAuth' ->
	  encode_msg_ServerToClientAuth(id(Msg, TrUserData),
					TrUserData);
      'ManufacturerToServer' ->
	  encode_msg_ManufacturerToServer(id(Msg, TrUserData),
					  TrUserData);
      'ManufacturerToServerAnnounce' ->
	  encode_msg_ManufacturerToServerAnnounce(id(Msg,
						     TrUserData),
						  TrUserData);
      'ServerToManufacturer' ->
	  encode_msg_ServerToManufacturer(id(Msg, TrUserData),
					  TrUserData);
      'ServerToManufacturerAnnounced' ->
	  encode_msg_ServerToManufacturerAnnounced(id(Msg,
						      TrUserData),
						   TrUserData);
      'ServerToManufacturerInvalid' ->
	  encode_msg_ServerToManufacturerInvalid(id(Msg,
						    TrUserData),
						 TrUserData);
      'ServerToManufacturerNoOffers' ->
	  encode_msg_ServerToManufacturerNoOffers(id(Msg,
						     TrUserData),
						  TrUserData);
      'ServerToManufacturerSold' ->
	  encode_msg_ServerToManufacturerSold(id(Msg, TrUserData),
					      TrUserData);
      'ImporterToServer' ->
	  encode_msg_ImporterToServer(id(Msg, TrUserData),
				      TrUserData);
      'ImporterToServerSubscribe' ->
	  encode_msg_ImporterToServerSubscribe(id(Msg,
						  TrUserData),
					       TrUserData);
      'ImporterToServerOffer' ->
	  encode_msg_ImporterToServerOffer(id(Msg, TrUserData),
					   TrUserData);
      'ServerToImporter' ->
	  encode_msg_ServerToImporter(id(Msg, TrUserData),
				      TrUserData);
      'ServerToImporterOfferSubmitted' ->
	  encode_msg_ServerToImporterOfferSubmitted(id(Msg,
						       TrUserData),
						    TrUserData);
      'ServerToImporterOfferInvalid' ->
	  encode_msg_ServerToImporterOfferInvalid(id(Msg,
						     TrUserData),
						  TrUserData);
      'ServerToImporterOfferWon' ->
	  encode_msg_ServerToImporterOfferWon(id(Msg, TrUserData),
					      TrUserData);
      'ServerToImporterOfferLose' ->
	  encode_msg_ServerToImporterOfferLose(id(Msg,
						  TrUserData),
					       TrUserData);
      'ServerToImporterOfferOutdated' ->
	  encode_msg_ServerToImporterOfferOutdated(id(Msg,
						      TrUserData),
						   TrUserData);
      'ServerToImporterNewProduct' ->
	  encode_msg_ServerToImporterNewProduct(id(Msg,
						   TrUserData),
						TrUserData);
      'ServerToImporterSubscribeAccepted' ->
	  encode_msg_ServerToImporterSubscribeAccepted(id(Msg,
							  TrUserData),
						       TrUserData);
      'ArbiterToServer' ->
	  encode_msg_ArbiterToServer(id(Msg, TrUserData),
				     TrUserData);
      'ArbiterToServerAnnounceAccepted' ->
	  encode_msg_ArbiterToServerAnnounceAccepted(id(Msg,
							TrUserData),
						     TrUserData);
      'ArbiterToServerAnnounceInvalid' ->
	  encode_msg_ArbiterToServerAnnounceInvalid(id(Msg,
						       TrUserData),
						    TrUserData);
      'ArbiterToServerAnnounceSold' ->
	  encode_msg_ArbiterToServerAnnounceSold(id(Msg,
						    TrUserData),
						 TrUserData);
      'ArbiterToServerAnnounceNoOffers' ->
	  encode_msg_ArbiterToServerAnnounceNoOffers(id(Msg,
							TrUserData),
						     TrUserData);
      'ArbiterToServerOfferSubmitted' ->
	  encode_msg_ArbiterToServerOfferSubmitted(id(Msg,
						      TrUserData),
						   TrUserData);
      'ArbiterToServerOfferInvalid' ->
	  encode_msg_ArbiterToServerOfferInvalid(id(Msg,
						    TrUserData),
						 TrUserData);
      'ArbiterToServerOfferWon' ->
	  encode_msg_ArbiterToServerOfferWon(id(Msg, TrUserData),
					     TrUserData);
      'ArbiterToServerOfferLose' ->
	  encode_msg_ArbiterToServerOfferLose(id(Msg, TrUserData),
					      TrUserData);
      'ArbiterToServerOfferOutdated' ->
	  encode_msg_ArbiterToServerOfferOutdated(id(Msg,
						     TrUserData),
						  TrUserData);
      'ArbiterToServerNewProduct' ->
	  encode_msg_ArbiterToServerNewProduct(id(Msg,
						  TrUserData),
					       TrUserData);
      'ArbiterToServerSubscribeAccepted' ->
	  encode_msg_ArbiterToServerSubscribeAccepted(id(Msg,
							 TrUserData),
						      TrUserData);
      'ServerToArbiter' ->
	  encode_msg_ServerToArbiter(id(Msg, TrUserData),
				     TrUserData);
      'ServerToArbiterOffer' ->
	  encode_msg_ServerToArbiterOffer(id(Msg, TrUserData),
					  TrUserData);
      'ServerToArbiterAnnounce' ->
	  encode_msg_ServerToArbiterAnnounce(id(Msg, TrUserData),
					     TrUserData);
      'ServerToArbiterSubscribe' ->
	  encode_msg_ServerToArbiterSubscribe(id(Msg, TrUserData),
					      TrUserData)
    end.


encode_msg_ClientToServer(Msg, TrUserData) ->
    encode_msg_ClientToServer(Msg, <<>>, TrUserData).


encode_msg_ClientToServer(#'ClientToServer'{message =
						F1},
			  Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {login, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ClientToServer_login(TrTF1, <<Bin/binary, 10>>,
						 TrUserData)
		 end;
	     {register, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ClientToServer_register(TrTF1,
						    <<Bin/binary, 18>>,
						    TrUserData)
		 end
	   end
    end.

encode_msg_ClientToServerLogin(Msg, TrUserData) ->
    encode_msg_ClientToServerLogin(Msg, <<>>, TrUserData).


encode_msg_ClientToServerLogin(#'ClientToServerLogin'{username
							  = F1,
						      password = F2,
						      clientType = F3},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_enum_ClientType(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_ClientToServerRegister(Msg, TrUserData) ->
    encode_msg_ClientToServerRegister(Msg, <<>>,
				      TrUserData).


encode_msg_ClientToServerRegister(#'ClientToServerRegister'{username
								= F1,
							    password = F2},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_ServerToClientAuth(Msg, TrUserData) ->
    encode_msg_ServerToClientAuth(Msg, <<>>, TrUserData).


encode_msg_ServerToClientAuth(#'ServerToClientAuth'{ok =
							F1,
						    clientType = F2,
						    errorMessage = F3},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_enum_ClientType(TrF2, <<B1/binary, 16>>, TrUserData)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	   end
    end.

encode_msg_ManufacturerToServer(Msg, TrUserData) ->
    encode_msg_ManufacturerToServer(Msg, <<>>, TrUserData).


encode_msg_ManufacturerToServer(#'ManufacturerToServer'{message
							    = F1},
				Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {announce, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ManufacturerToServer_announce(TrTF1,
							  <<Bin/binary, 10>>,
							  TrUserData)
		 end
	   end
    end.

encode_msg_ManufacturerToServerAnnounce(Msg,
					TrUserData) ->
    encode_msg_ManufacturerToServerAnnounce(Msg, <<>>,
					    TrUserData).


encode_msg_ManufacturerToServerAnnounce(#'ManufacturerToServerAnnounce'{productName
									    =
									    F1,
									minQuantity
									    =
									    F2,
									maxQuantity
									    =
									    F3,
									minUnitPrice
									    =
									    F4,
									timeout
									    =
									    F5,
									manufacturerName
									    =
									    F6},
					Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
    end.

encode_msg_ServerToManufacturer(Msg, TrUserData) ->
    encode_msg_ServerToManufacturer(Msg, <<>>, TrUserData).


encode_msg_ServerToManufacturer(#'ServerToManufacturer'{message
							    = F1},
				Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {announced, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToManufacturer_announced(TrTF1,
							   <<Bin/binary, 10>>,
							   TrUserData)
		 end;
	     {invalid, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToManufacturer_invalid(TrTF1,
							 <<Bin/binary, 18>>,
							 TrUserData)
		 end;
	     {noOffers, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToManufacturer_noOffers(TrTF1,
							  <<Bin/binary, 26>>,
							  TrUserData)
		 end;
	     {sold, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToManufacturer_sold(TrTF1,
						      <<Bin/binary, 34>>,
						      TrUserData)
		 end
	   end
    end.

encode_msg_ServerToManufacturerAnnounced(Msg,
					 TrUserData) ->
    encode_msg_ServerToManufacturerAnnounced(Msg, <<>>,
					     TrUserData).


encode_msg_ServerToManufacturerAnnounced(#'ServerToManufacturerAnnounced'{productName
									      =
									      F1},
					 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_ServerToManufacturerInvalid(Msg,
				       TrUserData) ->
    encode_msg_ServerToManufacturerInvalid(Msg, <<>>,
					   TrUserData).


encode_msg_ServerToManufacturerInvalid(#'ServerToManufacturerInvalid'{errorMessage
									  = F1,
								      productName
									  = F2},
				       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_ServerToManufacturerNoOffers(Msg,
					TrUserData) ->
    encode_msg_ServerToManufacturerNoOffers(Msg, <<>>,
					    TrUserData).


encode_msg_ServerToManufacturerNoOffers(#'ServerToManufacturerNoOffers'{productName
									    =
									    F1},
					Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_ServerToManufacturerSold(Msg, TrUserData) ->
    encode_msg_ServerToManufacturerSold(Msg, <<>>,
					TrUserData).


encode_msg_ServerToManufacturerSold(#'ServerToManufacturerSold'{productName
								    = F1,
								quantity = F2,
								unitPrice = F3},
				    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
    end.

encode_msg_ImporterToServer(Msg, TrUserData) ->
    encode_msg_ImporterToServer(Msg, <<>>, TrUserData).


encode_msg_ImporterToServer(#'ImporterToServer'{message
						    = F1},
			    Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {subscribe, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ImporterToServer_subscribe(TrTF1,
						       <<Bin/binary, 10>>,
						       TrUserData)
		 end;
	     {offer, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ImporterToServer_offer(TrTF1,
						   <<Bin/binary, 18>>,
						   TrUserData)
		 end
	   end
    end.

encode_msg_ImporterToServerSubscribe(Msg, TrUserData) ->
    encode_msg_ImporterToServerSubscribe(Msg, <<>>,
					 TrUserData).


encode_msg_ImporterToServerSubscribe(#'ImporterToServerSubscribe'{manufacturerNames
								      = F1,
								  importerName =
								      F2},
				     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_ImporterToServerSubscribe_manufacturerNames(TrF1,
								      Bin,
								      TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_ImporterToServerOffer(Msg, TrUserData) ->
    encode_msg_ImporterToServerOffer(Msg, <<>>, TrUserData).


encode_msg_ImporterToServerOffer(#'ImporterToServerOffer'{manufacturerName
							      = F1,
							  productName = F2,
							  quantity = F3,
							  unitPrice = F4,
							  importerName = F5},
				 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
    end.

encode_msg_ServerToImporter(Msg, TrUserData) ->
    encode_msg_ServerToImporter(Msg, <<>>, TrUserData).


encode_msg_ServerToImporter(#'ServerToImporter'{message
						    = F1},
			    Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {offerSubmitted, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToImporter_offerSubmitted(TrTF1,
							    <<Bin/binary, 10>>,
							    TrUserData)
		 end;
	     {offerInvalid, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToImporter_offerInvalid(TrTF1,
							  <<Bin/binary, 18>>,
							  TrUserData)
		 end;
	     {offerWon, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToImporter_offerWon(TrTF1,
						      <<Bin/binary, 26>>,
						      TrUserData)
		 end;
	     {offerLose, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToImporter_offerLose(TrTF1,
						       <<Bin/binary, 34>>,
						       TrUserData)
		 end;
	     {offerOutdated, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToImporter_offerOutdated(TrTF1,
							   <<Bin/binary, 42>>,
							   TrUserData)
		 end;
	     {newProduct, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToImporter_newProduct(TrTF1,
							<<Bin/binary, 50>>,
							TrUserData)
		 end;
	     {subsAccepted, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToImporter_subsAccepted(TrTF1,
							  <<Bin/binary, 58>>,
							  TrUserData)
		 end
	   end
    end.

encode_msg_ServerToImporterOfferSubmitted(Msg,
					  TrUserData) ->
    encode_msg_ServerToImporterOfferSubmitted(Msg, <<>>,
					      TrUserData).


encode_msg_ServerToImporterOfferSubmitted(#'ServerToImporterOfferSubmitted'{manufacturerName
										=
										F1,
									    productName
										=
										F2},
					  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_ServerToImporterOfferInvalid(Msg,
					TrUserData) ->
    encode_msg_ServerToImporterOfferInvalid(Msg, <<>>,
					    TrUserData).


encode_msg_ServerToImporterOfferInvalid(#'ServerToImporterOfferInvalid'{manufacturerName
									    =
									    F1,
									productName
									    =
									    F2,
									errorMessage
									    =
									    F3},
					Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_ServerToImporterOfferWon(Msg, TrUserData) ->
    encode_msg_ServerToImporterOfferWon(Msg, <<>>,
					TrUserData).


encode_msg_ServerToImporterOfferWon(#'ServerToImporterOfferWon'{manufacturerName
								    = F1,
								productName =
								    F2,
								quantity = F3,
								unitPrice = F4},
				    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
    end.

encode_msg_ServerToImporterOfferLose(Msg, TrUserData) ->
    encode_msg_ServerToImporterOfferLose(Msg, <<>>,
					 TrUserData).


encode_msg_ServerToImporterOfferLose(#'ServerToImporterOfferLose'{manufacturerName
								      = F1,
								  productName =
								      F2},
				     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_ServerToImporterOfferOutdated(Msg,
					 TrUserData) ->
    encode_msg_ServerToImporterOfferOutdated(Msg, <<>>,
					     TrUserData).


encode_msg_ServerToImporterOfferOutdated(#'ServerToImporterOfferOutdated'{manufacturerName
									      =
									      F1,
									  productName
									      =
									      F2},
					 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_ServerToImporterNewProduct(Msg,
				      TrUserData) ->
    encode_msg_ServerToImporterNewProduct(Msg, <<>>,
					  TrUserData).


encode_msg_ServerToImporterNewProduct(#'ServerToImporterNewProduct'{productName
									= F1,
								    minQuantity
									= F2,
								    maxQuantity
									= F3,
								    minUnitPrice
									= F4,
								    timeout =
									F5,
								    manufacturerName
									= F6},
				      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
    end.

encode_msg_ServerToImporterSubscribeAccepted(_Msg,
					     _TrUserData) ->
    <<>>.

encode_msg_ArbiterToServer(Msg, TrUserData) ->
    encode_msg_ArbiterToServer(Msg, <<>>, TrUserData).


encode_msg_ArbiterToServer(#'ArbiterToServer'{message =
						  F1},
			   Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {accepted, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ArbiterToServer_accepted(TrTF1,
						     <<Bin/binary, 10>>,
						     TrUserData)
		 end;
	     {announceInvalid, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ArbiterToServer_announceInvalid(TrTF1,
							    <<Bin/binary, 18>>,
							    TrUserData)
		 end;
	     {sold, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ArbiterToServer_sold(TrTF1, <<Bin/binary, 26>>,
						 TrUserData)
		 end;
	     {noOffers, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ArbiterToServer_noOffers(TrTF1,
						     <<Bin/binary, 34>>,
						     TrUserData)
		 end;
	     {submitted, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ArbiterToServer_submitted(TrTF1,
						      <<Bin/binary, 42>>,
						      TrUserData)
		 end;
	     {offerInvalid, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ArbiterToServer_offerInvalid(TrTF1,
							 <<Bin/binary, 50>>,
							 TrUserData)
		 end;
	     {won, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ArbiterToServer_won(TrTF1, <<Bin/binary, 58>>,
						TrUserData)
		 end;
	     {lose, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ArbiterToServer_lose(TrTF1, <<Bin/binary, 66>>,
						 TrUserData)
		 end;
	     {offerOutdated, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ArbiterToServer_offerOutdated(TrTF1,
							  <<Bin/binary, 74>>,
							  TrUserData)
		 end;
	     {product, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ArbiterToServer_product(TrTF1,
						    <<Bin/binary, 82>>,
						    TrUserData)
		 end;
	     {subsAccepted, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ArbiterToServer_subsAccepted(TrTF1,
							 <<Bin/binary, 90>>,
							 TrUserData)
		 end
	   end
    end.

encode_msg_ArbiterToServerAnnounceAccepted(Msg,
					   TrUserData) ->
    encode_msg_ArbiterToServerAnnounceAccepted(Msg, <<>>,
					       TrUserData).


encode_msg_ArbiterToServerAnnounceAccepted(#'ArbiterToServerAnnounceAccepted'{manufacturerName
										  =
										  F1,
									      productName
										  =
										  F2},
					   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_ArbiterToServerAnnounceInvalid(Msg,
					  TrUserData) ->
    encode_msg_ArbiterToServerAnnounceInvalid(Msg, <<>>,
					      TrUserData).


encode_msg_ArbiterToServerAnnounceInvalid(#'ArbiterToServerAnnounceInvalid'{manufacturerName
										=
										F1,
									    productName
										=
										F2,
									    errorMessage
										=
										F3},
					  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_ArbiterToServerAnnounceSold(Msg,
				       TrUserData) ->
    encode_msg_ArbiterToServerAnnounceSold(Msg, <<>>,
					   TrUserData).


encode_msg_ArbiterToServerAnnounceSold(#'ArbiterToServerAnnounceSold'{manufacturerName
									  = F1,
								      productName
									  = F2,
								      quantity =
									  F3,
								      unitPrice
									  = F4},
				       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
    end.

encode_msg_ArbiterToServerAnnounceNoOffers(Msg,
					   TrUserData) ->
    encode_msg_ArbiterToServerAnnounceNoOffers(Msg, <<>>,
					       TrUserData).


encode_msg_ArbiterToServerAnnounceNoOffers(#'ArbiterToServerAnnounceNoOffers'{manufacturerName
										  =
										  F1,
									      productName
										  =
										  F2},
					   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_ArbiterToServerOfferSubmitted(Msg,
					 TrUserData) ->
    encode_msg_ArbiterToServerOfferSubmitted(Msg, <<>>,
					     TrUserData).


encode_msg_ArbiterToServerOfferSubmitted(#'ArbiterToServerOfferSubmitted'{importerName
									      =
									      F1,
									  productName
									      =
									      F2,
									  manufacturerName
									      =
									      F3},
					 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_ArbiterToServerOfferInvalid(Msg,
				       TrUserData) ->
    encode_msg_ArbiterToServerOfferInvalid(Msg, <<>>,
					   TrUserData).


encode_msg_ArbiterToServerOfferInvalid(#'ArbiterToServerOfferInvalid'{importerName
									  = F1,
								      productName
									  = F2,
								      manufacturerName
									  = F3,
								      errorMessage
									  = F4},
				       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
    end.

encode_msg_ArbiterToServerOfferWon(Msg, TrUserData) ->
    encode_msg_ArbiterToServerOfferWon(Msg, <<>>,
				       TrUserData).


encode_msg_ArbiterToServerOfferWon(#'ArbiterToServerOfferWon'{importerName
								  = F1,
							      productName = F2,
							      manufacturerName =
								  F3,
							      quantity = F4,
							      unitPrice = F5},
				   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
    end.

encode_msg_ArbiterToServerOfferLose(Msg, TrUserData) ->
    encode_msg_ArbiterToServerOfferLose(Msg, <<>>,
					TrUserData).


encode_msg_ArbiterToServerOfferLose(#'ArbiterToServerOfferLose'{importerName
								    = F1,
								productName =
								    F2,
								manufacturerName
								    = F3},
				    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_ArbiterToServerOfferOutdated(Msg,
					TrUserData) ->
    encode_msg_ArbiterToServerOfferOutdated(Msg, <<>>,
					    TrUserData).


encode_msg_ArbiterToServerOfferOutdated(#'ArbiterToServerOfferOutdated'{manufacturerName
									    =
									    F1,
									productName
									    =
									    F2,
									importerName
									    =
									    F3},
					Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_ArbiterToServerNewProduct(Msg, TrUserData) ->
    encode_msg_ArbiterToServerNewProduct(Msg, <<>>,
					 TrUserData).


encode_msg_ArbiterToServerNewProduct(#'ArbiterToServerNewProduct'{manufacturerName
								      = F1,
								  productName =
								      F2,
								  minQuantity =
								      F3,
								  maxQuantity =
								      F4,
								  minUnitPrice =
								      F5,
								  timeout = F6,
								  importerName =
								      F7},
				     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
    end.

encode_msg_ArbiterToServerSubscribeAccepted(Msg,
					    TrUserData) ->
    encode_msg_ArbiterToServerSubscribeAccepted(Msg, <<>>,
						TrUserData).


encode_msg_ArbiterToServerSubscribeAccepted(#'ArbiterToServerSubscribeAccepted'{importerName
										    =
										    F1},
					    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_ServerToArbiter(Msg, TrUserData) ->
    encode_msg_ServerToArbiter(Msg, <<>>, TrUserData).


encode_msg_ServerToArbiter(#'ServerToArbiter'{message =
						  F1},
			   Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {offer, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToArbiter_offer(TrTF1,
						  <<Bin/binary, 10>>,
						  TrUserData)
		 end;
	     {announce, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToArbiter_announce(TrTF1,
						     <<Bin/binary, 18>>,
						     TrUserData)
		 end;
	     {subscribe, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_ServerToArbiter_subscribe(TrTF1,
						      <<Bin/binary, 26>>,
						      TrUserData)
		 end
	   end
    end.

encode_msg_ServerToArbiterOffer(Msg, TrUserData) ->
    encode_msg_ServerToArbiterOffer(Msg, <<>>, TrUserData).


encode_msg_ServerToArbiterOffer(#'ServerToArbiterOffer'{manufacturerName
							    = F1,
							productName = F2,
							quantity = F3,
							unitPrice = F4,
							importerName = F5},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
    end.

encode_msg_ServerToArbiterAnnounce(Msg, TrUserData) ->
    encode_msg_ServerToArbiterAnnounce(Msg, <<>>,
				       TrUserData).


encode_msg_ServerToArbiterAnnounce(#'ServerToArbiterAnnounce'{manufacturerName
								  = F1,
							      productName = F2,
							      minQuantity = F3,
							      maxQuantity = F4,
							      minUnitPrice = F5,
							      timout = F6},
				   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
    end.

encode_msg_ServerToArbiterSubscribe(Msg, TrUserData) ->
    encode_msg_ServerToArbiterSubscribe(Msg, <<>>,
					TrUserData).


encode_msg_ServerToArbiterSubscribe(#'ServerToArbiterSubscribe'{importerName
								    = F1,
								manufacturerNames
								    = F2},
				    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_ServerToArbiterSubscribe_manufacturerNames(TrF2,
								B1, TrUserData)
      end
    end.

e_mfield_ClientToServer_login(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ClientToServerLogin(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ClientToServer_register(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_ClientToServerRegister(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ManufacturerToServer_announce(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_ManufacturerToServerAnnounce(Msg,
						     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToManufacturer_announced(Msg, Bin,
					TrUserData) ->
    SubBin = encode_msg_ServerToManufacturerAnnounced(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToManufacturer_invalid(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_ServerToManufacturerInvalid(Msg,
						    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToManufacturer_noOffers(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_ServerToManufacturerNoOffers(Msg,
						     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToManufacturer_sold(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_ServerToManufacturerSold(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ImporterToServer_subscribe(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_ImporterToServerSubscribe(Msg, <<>>,
						  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ImporterToServer_offer(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ImporterToServerOffer(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ImporterToServerSubscribe_manufacturerNames([Elem
						     | Rest],
						    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_ImporterToServerSubscribe_manufacturerNames(Rest,
							Bin3, TrUserData);
e_field_ImporterToServerSubscribe_manufacturerNames([],
						    Bin, _TrUserData) ->
    Bin.

e_mfield_ServerToImporter_offerSubmitted(Msg, Bin,
					 TrUserData) ->
    SubBin = encode_msg_ServerToImporterOfferSubmitted(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToImporter_offerInvalid(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_ServerToImporterOfferInvalid(Msg,
						     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToImporter_offerWon(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_ServerToImporterOfferWon(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToImporter_offerLose(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_ServerToImporterOfferLose(Msg, <<>>,
						  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToImporter_offerOutdated(Msg, Bin,
					TrUserData) ->
    SubBin = encode_msg_ServerToImporterOfferOutdated(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToImporter_newProduct(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_ServerToImporterNewProduct(Msg,
						   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToImporter_subsAccepted(_Msg, Bin,
				       _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_ArbiterToServer_accepted(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_ArbiterToServerAnnounceAccepted(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ArbiterToServer_announceInvalid(Msg, Bin,
					 TrUserData) ->
    SubBin = encode_msg_ArbiterToServerAnnounceInvalid(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ArbiterToServer_sold(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ArbiterToServerAnnounceSold(Msg,
						    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ArbiterToServer_noOffers(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_ArbiterToServerAnnounceNoOffers(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ArbiterToServer_submitted(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_ArbiterToServerOfferSubmitted(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ArbiterToServer_offerInvalid(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_ArbiterToServerOfferInvalid(Msg,
						    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ArbiterToServer_won(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ArbiterToServerOfferWon(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ArbiterToServer_lose(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ArbiterToServerOfferLose(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ArbiterToServer_offerOutdated(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_ArbiterToServerOfferOutdated(Msg,
						     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ArbiterToServer_product(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_ArbiterToServerNewProduct(Msg, <<>>,
						  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ArbiterToServer_subsAccepted(Msg, Bin,
				      TrUserData) ->
    SubBin =
	encode_msg_ArbiterToServerSubscribeAccepted(Msg, <<>>,
						    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToArbiter_offer(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ServerToArbiterOffer(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToArbiter_announce(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_ServerToArbiterAnnounce(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerToArbiter_subscribe(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_ServerToArbiterSubscribe(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ServerToArbiterSubscribe_manufacturerNames([Elem
						    | Rest],
						   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_ServerToArbiterSubscribe_manufacturerNames(Rest,
						       Bin3, TrUserData);
e_field_ServerToArbiterSubscribe_manufacturerNames([],
						   Bin, _TrUserData) ->
    Bin.

e_enum_ClientType('IMPORTER', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_ClientType('MANUFACTURER', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_ClientType(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ClientToServer', Bin, TrUserData) ->
    id(decode_msg_ClientToServer(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ClientToServerLogin', Bin,
		  TrUserData) ->
    id(decode_msg_ClientToServerLogin(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ClientToServerRegister', Bin,
		  TrUserData) ->
    id(decode_msg_ClientToServerRegister(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToClientAuth', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToClientAuth(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ManufacturerToServer', Bin,
		  TrUserData) ->
    id(decode_msg_ManufacturerToServer(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ManufacturerToServerAnnounce', Bin,
		  TrUserData) ->
    id(decode_msg_ManufacturerToServerAnnounce(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToManufacturer', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToManufacturer(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToManufacturerAnnounced', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToManufacturerAnnounced(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToManufacturerInvalid', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToManufacturerInvalid(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToManufacturerNoOffers', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToManufacturerNoOffers(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToManufacturerSold', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToManufacturerSold(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ImporterToServer', Bin,
		  TrUserData) ->
    id(decode_msg_ImporterToServer(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ImporterToServerSubscribe', Bin,
		  TrUserData) ->
    id(decode_msg_ImporterToServerSubscribe(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit('ImporterToServerOffer', Bin,
		  TrUserData) ->
    id(decode_msg_ImporterToServerOffer(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToImporter', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToImporter(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToImporterOfferSubmitted', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToImporterOfferSubmitted(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToImporterOfferInvalid', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToImporterOfferInvalid(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToImporterOfferWon', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToImporterOfferWon(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToImporterOfferLose', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToImporterOfferLose(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToImporterOfferOutdated', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToImporterOfferOutdated(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToImporterNewProduct', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToImporterNewProduct(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToImporterSubscribeAccepted',
		  Bin, TrUserData) ->
    id(decode_msg_ServerToImporterSubscribeAccepted(Bin,
						    TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServer', Bin, TrUserData) ->
    id(decode_msg_ArbiterToServer(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServerAnnounceAccepted',
		  Bin, TrUserData) ->
    id(decode_msg_ArbiterToServerAnnounceAccepted(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServerAnnounceInvalid', Bin,
		  TrUserData) ->
    id(decode_msg_ArbiterToServerAnnounceInvalid(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServerAnnounceSold', Bin,
		  TrUserData) ->
    id(decode_msg_ArbiterToServerAnnounceSold(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServerAnnounceNoOffers',
		  Bin, TrUserData) ->
    id(decode_msg_ArbiterToServerAnnounceNoOffers(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServerOfferSubmitted', Bin,
		  TrUserData) ->
    id(decode_msg_ArbiterToServerOfferSubmitted(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServerOfferInvalid', Bin,
		  TrUserData) ->
    id(decode_msg_ArbiterToServerOfferInvalid(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServerOfferWon', Bin,
		  TrUserData) ->
    id(decode_msg_ArbiterToServerOfferWon(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServerOfferLose', Bin,
		  TrUserData) ->
    id(decode_msg_ArbiterToServerOfferLose(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServerOfferOutdated', Bin,
		  TrUserData) ->
    id(decode_msg_ArbiterToServerOfferOutdated(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServerNewProduct', Bin,
		  TrUserData) ->
    id(decode_msg_ArbiterToServerNewProduct(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit('ArbiterToServerSubscribeAccepted',
		  Bin, TrUserData) ->
    id(decode_msg_ArbiterToServerSubscribeAccepted(Bin,
						   TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToArbiter', Bin, TrUserData) ->
    id(decode_msg_ServerToArbiter(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToArbiterOffer', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToArbiterOffer(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToArbiterAnnounce', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToArbiterAnnounce(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ServerToArbiterSubscribe', Bin,
		  TrUserData) ->
    id(decode_msg_ServerToArbiterSubscribe(Bin, TrUserData),
       TrUserData).



decode_msg_ClientToServer(Bin, TrUserData) ->
    dfp_read_field_def_ClientToServer(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ClientToServer(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_ClientToServer_login(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_ClientToServer(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_ClientToServer_register(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_ClientToServer(<<>>, 0, 0, F@_1,
				  _) ->
    #'ClientToServer'{message = F@_1};
dfp_read_field_def_ClientToServer(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_ClientToServer(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_ClientToServer(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ClientToServer(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ClientToServer(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ClientToServer_login(Rest, 0, 0, F@_1,
				       TrUserData);
      18 ->
	  d_field_ClientToServer_register(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ClientToServer(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_ClientToServer(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ClientToServer(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_ClientToServer(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_ClientToServer(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ClientToServer(<<>>, 0, 0, F@_1, _) ->
    #'ClientToServer'{message = F@_1}.

d_field_ClientToServer_login(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ClientToServer_login(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_ClientToServer_login(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ClientToServerLogin(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ClientToServer(RestF, 0, 0,
				      case Prev of
					undefined ->
					    id({login, NewFValue}, TrUserData);
					{login, MVPrev} ->
					    id({login,
						merge_msg_ClientToServerLogin(MVPrev,
									      NewFValue,
									      TrUserData)},
					       TrUserData);
					_ -> id({login, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_ClientToServer_register(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ClientToServer_register(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_ClientToServer_register(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ClientToServerRegister(Bs,
								 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ClientToServer(RestF, 0, 0,
				      case Prev of
					undefined ->
					    id({register, NewFValue},
					       TrUserData);
					{register, MVPrev} ->
					    id({register,
						merge_msg_ClientToServerRegister(MVPrev,
										 NewFValue,
										 TrUserData)},
					       TrUserData);
					_ ->
					    id({register, NewFValue},
					       TrUserData)
				      end,
				      TrUserData).

skip_varint_ClientToServer(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ClientToServer(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_ClientToServer(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ClientToServer(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_ClientToServer(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ClientToServer(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ClientToServer(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ClientToServer(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_ClientToServer(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ClientToServer(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_ClientToServer(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_ClientToServer(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_ClientToServer(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_ClientToServer(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_ClientToServerLogin(Bin, TrUserData) ->
    dfp_read_field_def_ClientToServerLogin(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_ClientToServerLogin(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ClientToServerLogin_username(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
dfp_read_field_def_ClientToServerLogin(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ClientToServerLogin_password(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
dfp_read_field_def_ClientToServerLogin(<<24,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ClientToServerLogin_clientType(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ClientToServerLogin(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, _) ->
    #'ClientToServerLogin'{username = F@_1, password = F@_2,
			   clientType = F@_3};
dfp_read_field_def_ClientToServerLogin(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_ClientToServerLogin(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_ClientToServerLogin(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ClientToServerLogin(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
dg_read_field_def_ClientToServerLogin(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ClientToServerLogin_username(Rest, 0, 0, F@_1,
					       F@_2, F@_3, TrUserData);
      18 ->
	  d_field_ClientToServerLogin_password(Rest, 0, 0, F@_1,
					       F@_2, F@_3, TrUserData);
      24 ->
	  d_field_ClientToServerLogin_clientType(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ClientToServerLogin(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    1 ->
		skip_64_ClientToServerLogin(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    2 ->
		skip_length_delimited_ClientToServerLogin(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    3 ->
		skip_group_ClientToServerLogin(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_ClientToServerLogin(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData)
	  end
    end;
dg_read_field_def_ClientToServerLogin(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, _) ->
    #'ClientToServerLogin'{username = F@_1, password = F@_2,
			   clientType = F@_3}.

d_field_ClientToServerLogin_username(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ClientToServerLogin_username(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
d_field_ClientToServerLogin_username(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ClientToServerLogin(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, TrUserData).

d_field_ClientToServerLogin_password(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ClientToServerLogin_password(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
d_field_ClientToServerLogin_password(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ClientToServerLogin(RestF, 0, 0,
					   F@_1, NewFValue, F@_3, TrUserData).

d_field_ClientToServerLogin_clientType(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ClientToServerLogin_clientType(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
d_field_ClientToServerLogin_clientType(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ClientType(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_ClientToServerLogin(RestF, 0, 0,
					   F@_1, F@_2, NewFValue, TrUserData).

skip_varint_ClientToServerLogin(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_ClientToServerLogin(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
skip_varint_ClientToServerLogin(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ClientToServerLogin(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_ClientToServerLogin(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ClientToServerLogin(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
skip_length_delimited_ClientToServerLogin(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ClientToServerLogin(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, TrUserData).

skip_group_ClientToServerLogin(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ClientToServerLogin(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_32_ClientToServerLogin(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ClientToServerLogin(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_64_ClientToServerLogin(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ClientToServerLogin(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

decode_msg_ClientToServerRegister(Bin, TrUserData) ->
    dfp_read_field_def_ClientToServerRegister(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_ClientToServerRegister(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ClientToServerRegister_username(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
dfp_read_field_def_ClientToServerRegister(<<18,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ClientToServerRegister_password(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
dfp_read_field_def_ClientToServerRegister(<<>>, 0, 0,
					  F@_1, F@_2, _) ->
    #'ClientToServerRegister'{username = F@_1,
			      password = F@_2};
dfp_read_field_def_ClientToServerRegister(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData) ->
    dg_read_field_def_ClientToServerRegister(Other, Z1, Z2,
					     F@_1, F@_2, TrUserData).

dg_read_field_def_ClientToServerRegister(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ClientToServerRegister(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
dg_read_field_def_ClientToServerRegister(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ClientToServerRegister_username(Rest, 0, 0,
						  F@_1, F@_2, TrUserData);
      18 ->
	  d_field_ClientToServerRegister_password(Rest, 0, 0,
						  F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ClientToServerRegister(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    1 ->
		skip_64_ClientToServerRegister(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    2 ->
		skip_length_delimited_ClientToServerRegister(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    3 ->
		skip_group_ClientToServerRegister(Rest, Key bsr 3, 0,
						  F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_ClientToServerRegister(Rest, 0, 0, F@_1, F@_2,
					       TrUserData)
	  end
    end;
dg_read_field_def_ClientToServerRegister(<<>>, 0, 0,
					 F@_1, F@_2, _) ->
    #'ClientToServerRegister'{username = F@_1,
			      password = F@_2}.

d_field_ClientToServerRegister_username(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ClientToServerRegister_username(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
d_field_ClientToServerRegister_username(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ClientToServerRegister(RestF, 0, 0,
					      NewFValue, F@_2, TrUserData).

d_field_ClientToServerRegister_password(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ClientToServerRegister_password(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
d_field_ClientToServerRegister_password(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ClientToServerRegister(RestF, 0, 0,
					      F@_1, NewFValue, TrUserData).

skip_varint_ClientToServerRegister(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ClientToServerRegister(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
skip_varint_ClientToServerRegister(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ClientToServerRegister(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_length_delimited_ClientToServerRegister(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ClientToServerRegister(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
skip_length_delimited_ClientToServerRegister(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ClientToServerRegister(Rest2, 0, 0,
					      F@_1, F@_2, TrUserData).

skip_group_ClientToServerRegister(Bin, FNum, Z2, F@_1,
				  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ClientToServerRegister(Rest, 0, Z2,
					      F@_1, F@_2, TrUserData).

skip_32_ClientToServerRegister(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ClientToServerRegister(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_64_ClientToServerRegister(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ClientToServerRegister(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

decode_msg_ServerToClientAuth(Bin, TrUserData) ->
    dfp_read_field_def_ServerToClientAuth(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_ServerToClientAuth(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ServerToClientAuth_ok(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_ServerToClientAuth(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ServerToClientAuth_clientType(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ServerToClientAuth(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ServerToClientAuth_errorMessage(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ServerToClientAuth(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, _) ->
    #'ServerToClientAuth'{ok = F@_1, clientType = F@_2,
			  errorMessage = F@_3};
dfp_read_field_def_ServerToClientAuth(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_ServerToClientAuth(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_ServerToClientAuth(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToClientAuth(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
dg_read_field_def_ServerToClientAuth(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ServerToClientAuth_ok(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      16 ->
	  d_field_ServerToClientAuth_clientType(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      26 ->
	  d_field_ServerToClientAuth_errorMessage(Rest, 0, 0,
						  F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToClientAuth(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    1 ->
		skip_64_ServerToClientAuth(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    2 ->
		skip_length_delimited_ServerToClientAuth(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData);
	    3 ->
		skip_group_ServerToClientAuth(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_ServerToClientAuth(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData)
	  end
    end;
dg_read_field_def_ServerToClientAuth(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, _) ->
    #'ServerToClientAuth'{ok = F@_1, clientType = F@_2,
			  errorMessage = F@_3}.

d_field_ServerToClientAuth_ok(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ServerToClientAuth_ok(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_ServerToClientAuth_ok(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_ServerToClientAuth(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, TrUserData).

d_field_ServerToClientAuth_clientType(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ServerToClientAuth_clientType(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_ServerToClientAuth_clientType(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ClientType(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_ServerToClientAuth(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, TrUserData).

d_field_ServerToClientAuth_errorMessage(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ServerToClientAuth_errorMessage(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
d_field_ServerToClientAuth_errorMessage(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToClientAuth(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, TrUserData).

skip_varint_ServerToClientAuth(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_ServerToClientAuth(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
skip_varint_ServerToClientAuth(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ServerToClientAuth(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_ServerToClientAuth(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToClientAuth(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
skip_length_delimited_ServerToClientAuth(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToClientAuth(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, TrUserData).

skip_group_ServerToClientAuth(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToClientAuth(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, TrUserData).

skip_32_ServerToClientAuth(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ServerToClientAuth(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_64_ServerToClientAuth(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ServerToClientAuth(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

decode_msg_ManufacturerToServer(Bin, TrUserData) ->
    dfp_read_field_def_ManufacturerToServer(Bin, 0, 0,
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_ManufacturerToServer(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_ManufacturerToServer_announce(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_ManufacturerToServer(<<>>, 0, 0,
					F@_1, _) ->
    #'ManufacturerToServer'{message = F@_1};
dfp_read_field_def_ManufacturerToServer(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_ManufacturerToServer(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_ManufacturerToServer(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ManufacturerToServer(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ManufacturerToServer(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ManufacturerToServer_announce(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ManufacturerToServer(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_ManufacturerToServer(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_ManufacturerToServer(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_ManufacturerToServer(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_ManufacturerToServer(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_ManufacturerToServer(<<>>, 0, 0, F@_1,
				       _) ->
    #'ManufacturerToServer'{message = F@_1}.

d_field_ManufacturerToServer_announce(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ManufacturerToServer_announce(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_ManufacturerToServer_announce(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ManufacturerToServerAnnounce(Bs,
								       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ManufacturerToServer(RestF, 0, 0,
					    case Prev of
					      undefined ->
						  id({announce, NewFValue},
						     TrUserData);
					      {announce, MVPrev} ->
						  id({announce,
						      merge_msg_ManufacturerToServerAnnounce(MVPrev,
											     NewFValue,
											     TrUserData)},
						     TrUserData);
					      _ ->
						  id({announce, NewFValue},
						     TrUserData)
					    end,
					    TrUserData).

skip_varint_ManufacturerToServer(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ManufacturerToServer(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_ManufacturerToServer(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ManufacturerToServer(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_ManufacturerToServer(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ManufacturerToServer(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ManufacturerToServer(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ManufacturerToServer(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_ManufacturerToServer(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ManufacturerToServer(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_ManufacturerToServer(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ManufacturerToServer(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_ManufacturerToServer(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ManufacturerToServer(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_ManufacturerToServerAnnounce(Bin,
					TrUserData) ->
    dfp_read_field_def_ManufacturerToServerAnnounce(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_ManufacturerToServerAnnounce(<<10,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, TrUserData) ->
    d_field_ManufacturerToServerAnnounce_productName(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     TrUserData);
dfp_read_field_def_ManufacturerToServerAnnounce(<<16,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, TrUserData) ->
    d_field_ManufacturerToServerAnnounce_minQuantity(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     TrUserData);
dfp_read_field_def_ManufacturerToServerAnnounce(<<24,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, TrUserData) ->
    d_field_ManufacturerToServerAnnounce_maxQuantity(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     TrUserData);
dfp_read_field_def_ManufacturerToServerAnnounce(<<37,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, TrUserData) ->
    d_field_ManufacturerToServerAnnounce_minUnitPrice(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData);
dfp_read_field_def_ManufacturerToServerAnnounce(<<40,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, TrUserData) ->
    d_field_ManufacturerToServerAnnounce_timeout(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData);
dfp_read_field_def_ManufacturerToServerAnnounce(<<50,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, TrUserData) ->
    d_field_ManufacturerToServerAnnounce_manufacturerName(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData);
dfp_read_field_def_ManufacturerToServerAnnounce(<<>>, 0,
						0, F@_1, F@_2, F@_3, F@_4, F@_5,
						F@_6, _) ->
    #'ManufacturerToServerAnnounce'{productName = F@_1,
				    minQuantity = F@_2, maxQuantity = F@_3,
				    minUnitPrice = F@_4, timeout = F@_5,
				    manufacturerName = F@_6};
dfp_read_field_def_ManufacturerToServerAnnounce(Other,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, TrUserData) ->
    dg_read_field_def_ManufacturerToServerAnnounce(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6,
						   TrUserData).

dg_read_field_def_ManufacturerToServerAnnounce(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ManufacturerToServerAnnounce(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   TrUserData);
dg_read_field_def_ManufacturerToServerAnnounce(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ManufacturerToServerAnnounce_productName(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, TrUserData);
      16 ->
	  d_field_ManufacturerToServerAnnounce_minQuantity(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, TrUserData);
      24 ->
	  d_field_ManufacturerToServerAnnounce_maxQuantity(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, TrUserData);
      37 ->
	  d_field_ManufacturerToServerAnnounce_minUnitPrice(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, TrUserData);
      40 ->
	  d_field_ManufacturerToServerAnnounce_timeout(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, TrUserData);
      50 ->
	  d_field_ManufacturerToServerAnnounce_manufacturerName(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6,
								TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ManufacturerToServerAnnounce(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6,
							 TrUserData);
	    1 ->
		skip_64_ManufacturerToServerAnnounce(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData);
	    2 ->
		skip_length_delimited_ManufacturerToServerAnnounce(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6,
								   TrUserData);
	    3 ->
		skip_group_ManufacturerToServerAnnounce(Rest, Key bsr 3,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6,
							TrUserData);
	    5 ->
		skip_32_ManufacturerToServerAnnounce(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData)
	  end
    end;
dg_read_field_def_ManufacturerToServerAnnounce(<<>>, 0,
					       0, F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, _) ->
    #'ManufacturerToServerAnnounce'{productName = F@_1,
				    minQuantity = F@_2, maxQuantity = F@_3,
				    minUnitPrice = F@_4, timeout = F@_5,
				    manufacturerName = F@_6}.

d_field_ManufacturerToServerAnnounce_productName(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ManufacturerToServerAnnounce_productName(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData);
d_field_ManufacturerToServerAnnounce_productName(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ManufacturerToServerAnnounce(RestF,
						    0, 0, NewFValue, F@_2, F@_3,
						    F@_4, F@_5, F@_6,
						    TrUserData).

d_field_ManufacturerToServerAnnounce_minQuantity(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ManufacturerToServerAnnounce_minQuantity(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData);
d_field_ManufacturerToServerAnnounce_minQuantity(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, _, F@_3, F@_4,
						 F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ManufacturerToServerAnnounce(RestF,
						    0, 0, F@_1, NewFValue, F@_3,
						    F@_4, F@_5, F@_6,
						    TrUserData).

d_field_ManufacturerToServerAnnounce_maxQuantity(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ManufacturerToServerAnnounce_maxQuantity(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData);
d_field_ManufacturerToServerAnnounce_maxQuantity(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, _, F@_4,
						 F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ManufacturerToServerAnnounce(RestF,
						    0, 0, F@_1, F@_2, NewFValue,
						    F@_4, F@_5, F@_6,
						    TrUserData).

d_field_ManufacturerToServerAnnounce_minUnitPrice(<<0:16,
						    128, 127, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_ManufacturerToServerAnnounce(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    id(infinity, TrUserData),
						    F@_5, F@_6, TrUserData);
d_field_ManufacturerToServerAnnounce_minUnitPrice(<<0:16,
						    128, 255, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_ManufacturerToServerAnnounce(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    id('-infinity', TrUserData),
						    F@_5, F@_6, TrUserData);
d_field_ManufacturerToServerAnnounce_minUnitPrice(<<_:16,
						    1:1, _:7, _:1, 127:7,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_ManufacturerToServerAnnounce(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    id(nan, TrUserData), F@_5,
						    F@_6, TrUserData);
d_field_ManufacturerToServerAnnounce_minUnitPrice(<<Value:32/little-float,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_ManufacturerToServerAnnounce(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    id(Value, TrUserData), F@_5,
						    F@_6, TrUserData).

d_field_ManufacturerToServerAnnounce_timeout(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ManufacturerToServerAnnounce_timeout(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
d_field_ManufacturerToServerAnnounce_timeout(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ManufacturerToServerAnnounce(RestF,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, NewFValue, F@_6,
						    TrUserData).

d_field_ManufacturerToServerAnnounce_manufacturerName(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData)
    when N < 57 ->
    d_field_ManufacturerToServerAnnounce_manufacturerName(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  TrUserData);
d_field_ManufacturerToServerAnnounce_manufacturerName(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, _,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ManufacturerToServerAnnounce(RestF,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, F@_5, NewFValue,
						    TrUserData).

skip_varint_ManufacturerToServerAnnounce(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData) ->
    skip_varint_ManufacturerToServerAnnounce(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
skip_varint_ManufacturerToServerAnnounce(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData) ->
    dfp_read_field_def_ManufacturerToServerAnnounce(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6,
						    TrUserData).

skip_length_delimited_ManufacturerToServerAnnounce(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    skip_length_delimited_ManufacturerToServerAnnounce(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, TrUserData);
skip_length_delimited_ManufacturerToServerAnnounce(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6,
						   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ManufacturerToServerAnnounce(Rest2,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6,
						    TrUserData).

skip_group_ManufacturerToServerAnnounce(Bin, FNum, Z2,
					F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ManufacturerToServerAnnounce(Rest, 0,
						    Z2, F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, TrUserData).

skip_32_ManufacturerToServerAnnounce(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData) ->
    dfp_read_field_def_ManufacturerToServerAnnounce(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6,
						    TrUserData).

skip_64_ManufacturerToServerAnnounce(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData) ->
    dfp_read_field_def_ManufacturerToServerAnnounce(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6,
						    TrUserData).

decode_msg_ServerToManufacturer(Bin, TrUserData) ->
    dfp_read_field_def_ServerToManufacturer(Bin, 0, 0,
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_ServerToManufacturer(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToManufacturer_announced(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_ServerToManufacturer(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToManufacturer_invalid(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_ServerToManufacturer(<<26,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToManufacturer_noOffers(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_ServerToManufacturer(<<34,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToManufacturer_sold(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_ServerToManufacturer(<<>>, 0, 0,
					F@_1, _) ->
    #'ServerToManufacturer'{message = F@_1};
dfp_read_field_def_ServerToManufacturer(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_ServerToManufacturer(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_ServerToManufacturer(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToManufacturer(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ServerToManufacturer(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToManufacturer_announced(Rest, 0, 0, F@_1,
						 TrUserData);
      18 ->
	  d_field_ServerToManufacturer_invalid(Rest, 0, 0, F@_1,
					       TrUserData);
      26 ->
	  d_field_ServerToManufacturer_noOffers(Rest, 0, 0, F@_1,
						TrUserData);
      34 ->
	  d_field_ServerToManufacturer_sold(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToManufacturer(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_ServerToManufacturer(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_ServerToManufacturer(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_ServerToManufacturer(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_ServerToManufacturer(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_ServerToManufacturer(<<>>, 0, 0, F@_1,
				       _) ->
    #'ServerToManufacturer'{message = F@_1}.

d_field_ServerToManufacturer_announced(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToManufacturer_announced(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToManufacturer_announced(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToManufacturerAnnounced(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToManufacturer(RestF, 0, 0,
					    case Prev of
					      undefined ->
						  id({announced, NewFValue},
						     TrUserData);
					      {announced, MVPrev} ->
						  id({announced,
						      merge_msg_ServerToManufacturerAnnounced(MVPrev,
											      NewFValue,
											      TrUserData)},
						     TrUserData);
					      _ ->
						  id({announced, NewFValue},
						     TrUserData)
					    end,
					    TrUserData).

d_field_ServerToManufacturer_invalid(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToManufacturer_invalid(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToManufacturer_invalid(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToManufacturerInvalid(Bs,
								      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToManufacturer(RestF, 0, 0,
					    case Prev of
					      undefined ->
						  id({invalid, NewFValue},
						     TrUserData);
					      {invalid, MVPrev} ->
						  id({invalid,
						      merge_msg_ServerToManufacturerInvalid(MVPrev,
											    NewFValue,
											    TrUserData)},
						     TrUserData);
					      _ ->
						  id({invalid, NewFValue},
						     TrUserData)
					    end,
					    TrUserData).

d_field_ServerToManufacturer_noOffers(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToManufacturer_noOffers(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToManufacturer_noOffers(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToManufacturerNoOffers(Bs,
								       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToManufacturer(RestF, 0, 0,
					    case Prev of
					      undefined ->
						  id({noOffers, NewFValue},
						     TrUserData);
					      {noOffers, MVPrev} ->
						  id({noOffers,
						      merge_msg_ServerToManufacturerNoOffers(MVPrev,
											     NewFValue,
											     TrUserData)},
						     TrUserData);
					      _ ->
						  id({noOffers, NewFValue},
						     TrUserData)
					    end,
					    TrUserData).

d_field_ServerToManufacturer_sold(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToManufacturer_sold(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToManufacturer_sold(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToManufacturerSold(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToManufacturer(RestF, 0, 0,
					    case Prev of
					      undefined ->
						  id({sold, NewFValue},
						     TrUserData);
					      {sold, MVPrev} ->
						  id({sold,
						      merge_msg_ServerToManufacturerSold(MVPrev,
											 NewFValue,
											 TrUserData)},
						     TrUserData);
					      _ ->
						  id({sold, NewFValue},
						     TrUserData)
					    end,
					    TrUserData).

skip_varint_ServerToManufacturer(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ServerToManufacturer(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_ServerToManufacturer(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerToManufacturer(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_ServerToManufacturer(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToManufacturer(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ServerToManufacturer(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToManufacturer(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_ServerToManufacturer(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToManufacturer(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_ServerToManufacturer(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerToManufacturer(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_ServerToManufacturer(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerToManufacturer(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_ServerToManufacturerAnnounced(Bin,
					 TrUserData) ->
    dfp_read_field_def_ServerToManufacturerAnnounced(Bin, 0,
						     0,
						     id(undefined, TrUserData),
						     TrUserData).

dfp_read_field_def_ServerToManufacturerAnnounced(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToManufacturerAnnounced_productName(Rest,
						      Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ServerToManufacturerAnnounced(<<>>,
						 0, 0, F@_1, _) ->
    #'ServerToManufacturerAnnounced'{productName = F@_1};
dfp_read_field_def_ServerToManufacturerAnnounced(Other,
						 Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_ServerToManufacturerAnnounced(Other,
						    Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ServerToManufacturerAnnounced(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToManufacturerAnnounced(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
dg_read_field_def_ServerToManufacturerAnnounced(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToManufacturerAnnounced_productName(Rest,
							    0, 0, F@_1,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToManufacturerAnnounced(Rest, 0, 0,
							  F@_1, TrUserData);
	    1 ->
		skip_64_ServerToManufacturerAnnounced(Rest, 0, 0, F@_1,
						      TrUserData);
	    2 ->
		skip_length_delimited_ServerToManufacturerAnnounced(Rest,
								    0, 0, F@_1,
								    TrUserData);
	    3 ->
		skip_group_ServerToManufacturerAnnounced(Rest,
							 Key bsr 3, 0, F@_1,
							 TrUserData);
	    5 ->
		skip_32_ServerToManufacturerAnnounced(Rest, 0, 0, F@_1,
						      TrUserData)
	  end
    end;
dg_read_field_def_ServerToManufacturerAnnounced(<<>>, 0,
						0, F@_1, _) ->
    #'ServerToManufacturerAnnounced'{productName = F@_1}.

d_field_ServerToManufacturerAnnounced_productName(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToManufacturerAnnounced_productName(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
d_field_ServerToManufacturerAnnounced_productName(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToManufacturerAnnounced(RestF,
						     0, 0, NewFValue,
						     TrUserData).

skip_varint_ServerToManufacturerAnnounced(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ServerToManufacturerAnnounced(Rest, Z1, Z2,
					      F@_1, TrUserData);
skip_varint_ServerToManufacturerAnnounced(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerAnnounced(Rest,
						     Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ServerToManufacturerAnnounced(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToManufacturerAnnounced(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
skip_length_delimited_ServerToManufacturerAnnounced(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToManufacturerAnnounced(Rest2,
						     0, 0, F@_1, TrUserData).

skip_group_ServerToManufacturerAnnounced(Bin, FNum, Z2,
					 F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToManufacturerAnnounced(Rest,
						     0, Z2, F@_1, TrUserData).

skip_32_ServerToManufacturerAnnounced(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerAnnounced(Rest,
						     Z1, Z2, F@_1, TrUserData).

skip_64_ServerToManufacturerAnnounced(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerAnnounced(Rest,
						     Z1, Z2, F@_1, TrUserData).

decode_msg_ServerToManufacturerInvalid(Bin,
				       TrUserData) ->
    dfp_read_field_def_ServerToManufacturerInvalid(Bin, 0,
						   0, id(undefined, TrUserData),
						   id(undefined, TrUserData),
						   TrUserData).

dfp_read_field_def_ServerToManufacturerInvalid(<<10,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    d_field_ServerToManufacturerInvalid_errorMessage(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData);
dfp_read_field_def_ServerToManufacturerInvalid(<<18,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    d_field_ServerToManufacturerInvalid_productName(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData);
dfp_read_field_def_ServerToManufacturerInvalid(<<>>, 0,
					       0, F@_1, F@_2, _) ->
    #'ServerToManufacturerInvalid'{errorMessage = F@_1,
				   productName = F@_2};
dfp_read_field_def_ServerToManufacturerInvalid(Other,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    dg_read_field_def_ServerToManufacturerInvalid(Other, Z1,
						  Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_ServerToManufacturerInvalid(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToManufacturerInvalid(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
dg_read_field_def_ServerToManufacturerInvalid(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToManufacturerInvalid_errorMessage(Rest,
							   0, 0, F@_1, F@_2,
							   TrUserData);
      18 ->
	  d_field_ServerToManufacturerInvalid_productName(Rest, 0,
							  0, F@_1, F@_2,
							  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToManufacturerInvalid(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_ServerToManufacturerInvalid(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    2 ->
		skip_length_delimited_ServerToManufacturerInvalid(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
	    3 ->
		skip_group_ServerToManufacturerInvalid(Rest, Key bsr 3,
						       0, F@_1, F@_2,
						       TrUserData);
	    5 ->
		skip_32_ServerToManufacturerInvalid(Rest, 0, 0, F@_1,
						    F@_2, TrUserData)
	  end
    end;
dg_read_field_def_ServerToManufacturerInvalid(<<>>, 0,
					      0, F@_1, F@_2, _) ->
    #'ServerToManufacturerInvalid'{errorMessage = F@_1,
				   productName = F@_2}.

d_field_ServerToManufacturerInvalid_errorMessage(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ServerToManufacturerInvalid_errorMessage(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
d_field_ServerToManufacturerInvalid_errorMessage(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToManufacturerInvalid(RestF, 0,
						   0, NewFValue, F@_2,
						   TrUserData).

d_field_ServerToManufacturerInvalid_productName(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ServerToManufacturerInvalid_productName(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
d_field_ServerToManufacturerInvalid_productName(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToManufacturerInvalid(RestF, 0,
						   0, F@_1, NewFValue,
						   TrUserData).

skip_varint_ServerToManufacturerInvalid(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ServerToManufacturerInvalid(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
skip_varint_ServerToManufacturerInvalid(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerInvalid(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_ServerToManufacturerInvalid(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToManufacturerInvalid(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
skip_length_delimited_ServerToManufacturerInvalid(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToManufacturerInvalid(Rest2, 0,
						   0, F@_1, F@_2, TrUserData).

skip_group_ServerToManufacturerInvalid(Bin, FNum, Z2,
				       F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToManufacturerInvalid(Rest, 0,
						   Z2, F@_1, F@_2, TrUserData).

skip_32_ServerToManufacturerInvalid(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerInvalid(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

skip_64_ServerToManufacturerInvalid(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerInvalid(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

decode_msg_ServerToManufacturerNoOffers(Bin,
					TrUserData) ->
    dfp_read_field_def_ServerToManufacturerNoOffers(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_ServerToManufacturerNoOffers(<<10,
						  Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToManufacturerNoOffers_productName(Rest,
						     Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ServerToManufacturerNoOffers(<<>>, 0,
						0, F@_1, _) ->
    #'ServerToManufacturerNoOffers'{productName = F@_1};
dfp_read_field_def_ServerToManufacturerNoOffers(Other,
						Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_ServerToManufacturerNoOffers(Other,
						   Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ServerToManufacturerNoOffers(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToManufacturerNoOffers(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
dg_read_field_def_ServerToManufacturerNoOffers(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToManufacturerNoOffers_productName(Rest,
							   0, 0, F@_1,
							   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToManufacturerNoOffers(Rest, 0, 0,
							 F@_1, TrUserData);
	    1 ->
		skip_64_ServerToManufacturerNoOffers(Rest, 0, 0, F@_1,
						     TrUserData);
	    2 ->
		skip_length_delimited_ServerToManufacturerNoOffers(Rest,
								   0, 0, F@_1,
								   TrUserData);
	    3 ->
		skip_group_ServerToManufacturerNoOffers(Rest, Key bsr 3,
							0, F@_1, TrUserData);
	    5 ->
		skip_32_ServerToManufacturerNoOffers(Rest, 0, 0, F@_1,
						     TrUserData)
	  end
    end;
dg_read_field_def_ServerToManufacturerNoOffers(<<>>, 0,
					       0, F@_1, _) ->
    #'ServerToManufacturerNoOffers'{productName = F@_1}.

d_field_ServerToManufacturerNoOffers_productName(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToManufacturerNoOffers_productName(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
d_field_ServerToManufacturerNoOffers_productName(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToManufacturerNoOffers(RestF,
						    0, 0, NewFValue,
						    TrUserData).

skip_varint_ServerToManufacturerNoOffers(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ServerToManufacturerNoOffers(Rest, Z1, Z2,
					     F@_1, TrUserData);
skip_varint_ServerToManufacturerNoOffers(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerNoOffers(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ServerToManufacturerNoOffers(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToManufacturerNoOffers(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
skip_length_delimited_ServerToManufacturerNoOffers(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToManufacturerNoOffers(Rest2,
						    0, 0, F@_1, TrUserData).

skip_group_ServerToManufacturerNoOffers(Bin, FNum, Z2,
					F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToManufacturerNoOffers(Rest, 0,
						    Z2, F@_1, TrUserData).

skip_32_ServerToManufacturerNoOffers(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerNoOffers(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_64_ServerToManufacturerNoOffers(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerNoOffers(Rest,
						    Z1, Z2, F@_1, TrUserData).

decode_msg_ServerToManufacturerSold(Bin, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerSold(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_ServerToManufacturerSold(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    d_field_ServerToManufacturerSold_productName(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3,
						 TrUserData);
dfp_read_field_def_ServerToManufacturerSold(<<16,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    d_field_ServerToManufacturerSold_quantity(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ServerToManufacturerSold(<<29,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    d_field_ServerToManufacturerSold_unitPrice(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ServerToManufacturerSold(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #'ServerToManufacturerSold'{productName = F@_1,
				quantity = F@_2, unitPrice = F@_3};
dfp_read_field_def_ServerToManufacturerSold(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_ServerToManufacturerSold(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

dg_read_field_def_ServerToManufacturerSold(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToManufacturerSold(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
dg_read_field_def_ServerToManufacturerSold(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToManufacturerSold_productName(Rest, 0, 0,
						       F@_1, F@_2, F@_3,
						       TrUserData);
      16 ->
	  d_field_ServerToManufacturerSold_quantity(Rest, 0, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
      29 ->
	  d_field_ServerToManufacturerSold_unitPrice(Rest, 0, 0,
						     F@_1, F@_2, F@_3,
						     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToManufacturerSold(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_ServerToManufacturerSold(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		skip_length_delimited_ServerToManufacturerSold(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		skip_group_ServerToManufacturerSold(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		skip_32_ServerToManufacturerSold(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
dg_read_field_def_ServerToManufacturerSold(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #'ServerToManufacturerSold'{productName = F@_1,
				quantity = F@_2, unitPrice = F@_3}.

d_field_ServerToManufacturerSold_productName(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    d_field_ServerToManufacturerSold_productName(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
d_field_ServerToManufacturerSold_productName(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F@_2, F@_3,
					     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToManufacturerSold(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

d_field_ServerToManufacturerSold_quantity(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ServerToManufacturerSold_quantity(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
d_field_ServerToManufacturerSold_quantity(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ServerToManufacturerSold(RestF, 0, 0,
						F@_1, NewFValue, F@_3,
						TrUserData).

d_field_ServerToManufacturerSold_unitPrice(<<0:16, 128,
					     127, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerSold(Rest, Z1,
						Z2, F@_1, F@_2,
						id(infinity, TrUserData),
						TrUserData);
d_field_ServerToManufacturerSold_unitPrice(<<0:16, 128,
					     255, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerSold(Rest, Z1,
						Z2, F@_1, F@_2,
						id('-infinity', TrUserData),
						TrUserData);
d_field_ServerToManufacturerSold_unitPrice(<<_:16, 1:1,
					     _:7, _:1, 127:7, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerSold(Rest, Z1,
						Z2, F@_1, F@_2,
						id(nan, TrUserData),
						TrUserData);
d_field_ServerToManufacturerSold_unitPrice(<<Value:32/little-float,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, _, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerSold(Rest, Z1,
						Z2, F@_1, F@_2,
						id(Value, TrUserData),
						TrUserData).

skip_varint_ServerToManufacturerSold(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_ServerToManufacturerSold(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
skip_varint_ServerToManufacturerSold(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerSold(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

skip_length_delimited_ServerToManufacturerSold(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToManufacturerSold(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
skip_length_delimited_ServerToManufacturerSold(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToManufacturerSold(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

skip_group_ServerToManufacturerSold(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToManufacturerSold(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

skip_32_ServerToManufacturerSold(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerSold(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

skip_64_ServerToManufacturerSold(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ServerToManufacturerSold(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

decode_msg_ImporterToServer(Bin, TrUserData) ->
    dfp_read_field_def_ImporterToServer(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ImporterToServer(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_ImporterToServer_subscribe(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_ImporterToServer(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_ImporterToServer_offer(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_ImporterToServer(<<>>, 0, 0, F@_1,
				    _) ->
    #'ImporterToServer'{message = F@_1};
dfp_read_field_def_ImporterToServer(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_ImporterToServer(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_ImporterToServer(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ImporterToServer(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ImporterToServer(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ImporterToServer_subscribe(Rest, 0, 0, F@_1,
					     TrUserData);
      18 ->
	  d_field_ImporterToServer_offer(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ImporterToServer(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_ImporterToServer(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ImporterToServer(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_ImporterToServer(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_ImporterToServer(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ImporterToServer(<<>>, 0, 0, F@_1,
				   _) ->
    #'ImporterToServer'{message = F@_1}.

d_field_ImporterToServer_subscribe(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ImporterToServer_subscribe(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_ImporterToServer_subscribe(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ImporterToServerSubscribe(Bs,
								    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ImporterToServer(RestF, 0, 0,
					case Prev of
					  undefined ->
					      id({subscribe, NewFValue},
						 TrUserData);
					  {subscribe, MVPrev} ->
					      id({subscribe,
						  merge_msg_ImporterToServerSubscribe(MVPrev,
										      NewFValue,
										      TrUserData)},
						 TrUserData);
					  _ ->
					      id({subscribe, NewFValue},
						 TrUserData)
					end,
					TrUserData).

d_field_ImporterToServer_offer(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ImporterToServer_offer(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_ImporterToServer_offer(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ImporterToServerOffer(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ImporterToServer(RestF, 0, 0,
					case Prev of
					  undefined ->
					      id({offer, NewFValue},
						 TrUserData);
					  {offer, MVPrev} ->
					      id({offer,
						  merge_msg_ImporterToServerOffer(MVPrev,
										  NewFValue,
										  TrUserData)},
						 TrUserData);
					  _ ->
					      id({offer, NewFValue}, TrUserData)
					end,
					TrUserData).

skip_varint_ImporterToServer(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ImporterToServer(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_ImporterToServer(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ImporterToServer(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_ImporterToServer(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ImporterToServer(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ImporterToServer(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ImporterToServer(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_ImporterToServer(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ImporterToServer(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_ImporterToServer(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_ImporterToServer(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_ImporterToServer(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_ImporterToServer(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_ImporterToServerSubscribe(Bin, TrUserData) ->
    dfp_read_field_def_ImporterToServerSubscribe(Bin, 0, 0,
						 id([], TrUserData),
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_ImporterToServerSubscribe(<<10,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ImporterToServerSubscribe_manufacturerNames(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData);
dfp_read_field_def_ImporterToServerSubscribe(<<18,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ImporterToServerSubscribe_importerName(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_ImporterToServerSubscribe(<<>>, 0, 0,
					     R1, F@_2, TrUserData) ->
    #'ImporterToServerSubscribe'{manufacturerNames =
				     lists_reverse(R1, TrUserData),
				 importerName = F@_2};
dfp_read_field_def_ImporterToServerSubscribe(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_ImporterToServerSubscribe(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_ImporterToServerSubscribe(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ImporterToServerSubscribe(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
dg_read_field_def_ImporterToServerSubscribe(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ImporterToServerSubscribe_manufacturerNames(Rest,
							      0, 0, F@_1, F@_2,
							      TrUserData);
      18 ->
	  d_field_ImporterToServerSubscribe_importerName(Rest, 0,
							 0, F@_1, F@_2,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ImporterToServerSubscribe(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		skip_64_ImporterToServerSubscribe(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		skip_length_delimited_ImporterToServerSubscribe(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		skip_group_ImporterToServerSubscribe(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_ImporterToServerSubscribe(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
dg_read_field_def_ImporterToServerSubscribe(<<>>, 0, 0,
					    R1, F@_2, TrUserData) ->
    #'ImporterToServerSubscribe'{manufacturerNames =
				     lists_reverse(R1, TrUserData),
				 importerName = F@_2}.

d_field_ImporterToServerSubscribe_manufacturerNames(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    d_field_ImporterToServerSubscribe_manufacturerNames(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
d_field_ImporterToServerSubscribe_manufacturerNames(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, Prev, F@_2,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ImporterToServerSubscribe(RestF, 0,
						 0,
						 cons(NewFValue, Prev,
						      TrUserData),
						 F@_2, TrUserData).

d_field_ImporterToServerSubscribe_importerName(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ImporterToServerSubscribe_importerName(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
d_field_ImporterToServerSubscribe_importerName(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ImporterToServerSubscribe(RestF, 0,
						 0, F@_1, NewFValue,
						 TrUserData).

skip_varint_ImporterToServerSubscribe(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ImporterToServerSubscribe(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
skip_varint_ImporterToServerSubscribe(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ImporterToServerSubscribe(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_ImporterToServerSubscribe(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ImporterToServerSubscribe(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
skip_length_delimited_ImporterToServerSubscribe(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ImporterToServerSubscribe(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

skip_group_ImporterToServerSubscribe(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ImporterToServerSubscribe(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

skip_32_ImporterToServerSubscribe(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ImporterToServerSubscribe(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_64_ImporterToServerSubscribe(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ImporterToServerSubscribe(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

decode_msg_ImporterToServerOffer(Bin, TrUserData) ->
    dfp_read_field_def_ImporterToServerOffer(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_ImporterToServerOffer(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_ImporterToServerOffer_manufacturerName(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, TrUserData);
dfp_read_field_def_ImporterToServerOffer(<<18,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_ImporterToServerOffer_productName(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_ImporterToServerOffer(<<24,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_ImporterToServerOffer_quantity(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_ImporterToServerOffer(<<37,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_ImporterToServerOffer_unitPrice(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData);
dfp_read_field_def_ImporterToServerOffer(<<42,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_ImporterToServerOffer_importerName(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
dfp_read_field_def_ImporterToServerOffer(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ImporterToServerOffer'{manufacturerName = F@_1,
			     productName = F@_2, quantity = F@_3,
			     unitPrice = F@_4, importerName = F@_5};
dfp_read_field_def_ImporterToServerOffer(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    dg_read_field_def_ImporterToServerOffer(Other, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

dg_read_field_def_ImporterToServerOffer(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ImporterToServerOffer(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, TrUserData);
dg_read_field_def_ImporterToServerOffer(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ImporterToServerOffer_manufacturerName(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5,
							 TrUserData);
      18 ->
	  d_field_ImporterToServerOffer_productName(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      24 ->
	  d_field_ImporterToServerOffer_quantity(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      37 ->
	  d_field_ImporterToServerOffer_unitPrice(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
      42 ->
	  d_field_ImporterToServerOffer_importerName(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ImporterToServerOffer(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
	    1 ->
		skip_64_ImporterToServerOffer(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_ImporterToServerOffer(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, F@_5,
							    TrUserData);
	    3 ->
		skip_group_ImporterToServerOffer(Rest, Key bsr 3, 0,
						 F@_1, F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
	    5 ->
		skip_32_ImporterToServerOffer(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_ImporterToServerOffer(<<>>, 0, 0,
					F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ImporterToServerOffer'{manufacturerName = F@_1,
			     productName = F@_2, quantity = F@_3,
			     unitPrice = F@_4, importerName = F@_5}.

d_field_ImporterToServerOffer_manufacturerName(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData)
    when N < 57 ->
    d_field_ImporterToServerOffer_manufacturerName(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
d_field_ImporterToServerOffer_manufacturerName(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ImporterToServerOffer(RestF, 0, 0,
					     NewFValue, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

d_field_ImporterToServerOffer_productName(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_ImporterToServerOffer_productName(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_ImporterToServerOffer_productName(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ImporterToServerOffer(RestF, 0, 0,
					     F@_1, NewFValue, F@_3, F@_4, F@_5,
					     TrUserData).

d_field_ImporterToServerOffer_quantity(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_ImporterToServerOffer_quantity(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_ImporterToServerOffer_quantity(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ImporterToServerOffer(RestF, 0, 0,
					     F@_1, F@_2, NewFValue, F@_4, F@_5,
					     TrUserData).

d_field_ImporterToServerOffer_unitPrice(<<0:16, 128,
					  127, Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					TrUserData) ->
    dfp_read_field_def_ImporterToServerOffer(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3,
					     id(infinity, TrUserData), F@_5,
					     TrUserData);
d_field_ImporterToServerOffer_unitPrice(<<0:16, 128,
					  255, Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					TrUserData) ->
    dfp_read_field_def_ImporterToServerOffer(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3,
					     id('-infinity', TrUserData), F@_5,
					     TrUserData);
d_field_ImporterToServerOffer_unitPrice(<<_:16, 1:1,
					  _:7, _:1, 127:7, Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					TrUserData) ->
    dfp_read_field_def_ImporterToServerOffer(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3,
					     id(nan, TrUserData), F@_5,
					     TrUserData);
d_field_ImporterToServerOffer_unitPrice(<<Value:32/little-float,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					TrUserData) ->
    dfp_read_field_def_ImporterToServerOffer(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3,
					     id(Value, TrUserData), F@_5,
					     TrUserData).

d_field_ImporterToServerOffer_importerName(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData)
    when N < 57 ->
    d_field_ImporterToServerOffer_importerName(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, TrUserData);
d_field_ImporterToServerOffer_importerName(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ImporterToServerOffer(RestF, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, NewFValue,
					     TrUserData).

skip_varint_ImporterToServerOffer(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    skip_varint_ImporterToServerOffer(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_ImporterToServerOffer(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    dfp_read_field_def_ImporterToServerOffer(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_length_delimited_ImporterToServerOffer(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_ImporterToServerOffer(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
skip_length_delimited_ImporterToServerOffer(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ImporterToServerOffer(Rest2, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_group_ImporterToServerOffer(Bin, FNum, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ImporterToServerOffer(Rest, 0, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_32_ImporterToServerOffer(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_ImporterToServerOffer(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_64_ImporterToServerOffer(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_ImporterToServerOffer(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

decode_msg_ServerToImporter(Bin, TrUserData) ->
    dfp_read_field_def_ServerToImporter(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ServerToImporter(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToImporter_offerSubmitted(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_ServerToImporter(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToImporter_offerInvalid(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_ServerToImporter(<<26, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToImporter_offerWon(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_ServerToImporter(<<34, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToImporter_offerLose(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_ServerToImporter(<<42, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToImporter_offerOutdated(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_ServerToImporter(<<50, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToImporter_newProduct(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_ServerToImporter(<<58, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToImporter_subsAccepted(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_ServerToImporter(<<>>, 0, 0, F@_1,
				    _) ->
    #'ServerToImporter'{message = F@_1};
dfp_read_field_def_ServerToImporter(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_ServerToImporter(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_ServerToImporter(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToImporter(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ServerToImporter(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToImporter_offerSubmitted(Rest, 0, 0,
						  F@_1, TrUserData);
      18 ->
	  d_field_ServerToImporter_offerInvalid(Rest, 0, 0, F@_1,
						TrUserData);
      26 ->
	  d_field_ServerToImporter_offerWon(Rest, 0, 0, F@_1,
					    TrUserData);
      34 ->
	  d_field_ServerToImporter_offerLose(Rest, 0, 0, F@_1,
					     TrUserData);
      42 ->
	  d_field_ServerToImporter_offerOutdated(Rest, 0, 0, F@_1,
						 TrUserData);
      50 ->
	  d_field_ServerToImporter_newProduct(Rest, 0, 0, F@_1,
					      TrUserData);
      58 ->
	  d_field_ServerToImporter_subsAccepted(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToImporter(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_ServerToImporter(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ServerToImporter(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_ServerToImporter(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_ServerToImporter(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ServerToImporter(<<>>, 0, 0, F@_1,
				   _) ->
    #'ServerToImporter'{message = F@_1}.

d_field_ServerToImporter_offerSubmitted(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToImporter_offerSubmitted(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToImporter_offerSubmitted(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToImporterOfferSubmitted(Bs,
									 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporter(RestF, 0, 0,
					case Prev of
					  undefined ->
					      id({offerSubmitted, NewFValue},
						 TrUserData);
					  {offerSubmitted, MVPrev} ->
					      id({offerSubmitted,
						  merge_msg_ServerToImporterOfferSubmitted(MVPrev,
											   NewFValue,
											   TrUserData)},
						 TrUserData);
					  _ ->
					      id({offerSubmitted, NewFValue},
						 TrUserData)
					end,
					TrUserData).

d_field_ServerToImporter_offerInvalid(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToImporter_offerInvalid(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToImporter_offerInvalid(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToImporterOfferInvalid(Bs,
								       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporter(RestF, 0, 0,
					case Prev of
					  undefined ->
					      id({offerInvalid, NewFValue},
						 TrUserData);
					  {offerInvalid, MVPrev} ->
					      id({offerInvalid,
						  merge_msg_ServerToImporterOfferInvalid(MVPrev,
											 NewFValue,
											 TrUserData)},
						 TrUserData);
					  _ ->
					      id({offerInvalid, NewFValue},
						 TrUserData)
					end,
					TrUserData).

d_field_ServerToImporter_offerWon(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToImporter_offerWon(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToImporter_offerWon(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToImporterOfferWon(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporter(RestF, 0, 0,
					case Prev of
					  undefined ->
					      id({offerWon, NewFValue},
						 TrUserData);
					  {offerWon, MVPrev} ->
					      id({offerWon,
						  merge_msg_ServerToImporterOfferWon(MVPrev,
										     NewFValue,
										     TrUserData)},
						 TrUserData);
					  _ ->
					      id({offerWon, NewFValue},
						 TrUserData)
					end,
					TrUserData).

d_field_ServerToImporter_offerLose(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToImporter_offerLose(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToImporter_offerLose(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToImporterOfferLose(Bs,
								    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporter(RestF, 0, 0,
					case Prev of
					  undefined ->
					      id({offerLose, NewFValue},
						 TrUserData);
					  {offerLose, MVPrev} ->
					      id({offerLose,
						  merge_msg_ServerToImporterOfferLose(MVPrev,
										      NewFValue,
										      TrUserData)},
						 TrUserData);
					  _ ->
					      id({offerLose, NewFValue},
						 TrUserData)
					end,
					TrUserData).

d_field_ServerToImporter_offerOutdated(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToImporter_offerOutdated(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToImporter_offerOutdated(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToImporterOfferOutdated(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporter(RestF, 0, 0,
					case Prev of
					  undefined ->
					      id({offerOutdated, NewFValue},
						 TrUserData);
					  {offerOutdated, MVPrev} ->
					      id({offerOutdated,
						  merge_msg_ServerToImporterOfferOutdated(MVPrev,
											  NewFValue,
											  TrUserData)},
						 TrUserData);
					  _ ->
					      id({offerOutdated, NewFValue},
						 TrUserData)
					end,
					TrUserData).

d_field_ServerToImporter_newProduct(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToImporter_newProduct(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToImporter_newProduct(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToImporterNewProduct(Bs,
								     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporter(RestF, 0, 0,
					case Prev of
					  undefined ->
					      id({newProduct, NewFValue},
						 TrUserData);
					  {newProduct, MVPrev} ->
					      id({newProduct,
						  merge_msg_ServerToImporterNewProduct(MVPrev,
										       NewFValue,
										       TrUserData)},
						 TrUserData);
					  _ ->
					      id({newProduct, NewFValue},
						 TrUserData)
					end,
					TrUserData).

d_field_ServerToImporter_subsAccepted(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToImporter_subsAccepted(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToImporter_subsAccepted(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToImporterSubscribeAccepted(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporter(RestF, 0, 0,
					case Prev of
					  undefined ->
					      id({subsAccepted, NewFValue},
						 TrUserData);
					  {subsAccepted, MVPrev} ->
					      id({subsAccepted,
						  merge_msg_ServerToImporterSubscribeAccepted(MVPrev,
											      NewFValue,
											      TrUserData)},
						 TrUserData);
					  _ ->
					      id({subsAccepted, NewFValue},
						 TrUserData)
					end,
					TrUserData).

skip_varint_ServerToImporter(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ServerToImporter(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_ServerToImporter(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerToImporter(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_ServerToImporter(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToImporter(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ServerToImporter(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToImporter(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_ServerToImporter(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToImporter(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_ServerToImporter(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_ServerToImporter(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_ServerToImporter(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_ServerToImporter(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_ServerToImporterOfferSubmitted(Bin,
					  TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferSubmitted(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      id(undefined, TrUserData),
						      TrUserData).

dfp_read_field_def_ServerToImporterOfferSubmitted(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    d_field_ServerToImporterOfferSubmitted_manufacturerName(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData);
dfp_read_field_def_ServerToImporterOfferSubmitted(<<18,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    d_field_ServerToImporterOfferSubmitted_productName(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
dfp_read_field_def_ServerToImporterOfferSubmitted(<<>>,
						  0, 0, F@_1, F@_2, _) ->
    #'ServerToImporterOfferSubmitted'{manufacturerName =
					  F@_1,
				      productName = F@_2};
dfp_read_field_def_ServerToImporterOfferSubmitted(Other,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    dg_read_field_def_ServerToImporterOfferSubmitted(Other,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

dg_read_field_def_ServerToImporterOfferSubmitted(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToImporterOfferSubmitted(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
dg_read_field_def_ServerToImporterOfferSubmitted(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2,
						 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToImporterOfferSubmitted_manufacturerName(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
      18 ->
	  d_field_ServerToImporterOfferSubmitted_productName(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToImporterOfferSubmitted(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    1 ->
		skip_64_ServerToImporterOfferSubmitted(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    2 ->
		skip_length_delimited_ServerToImporterOfferSubmitted(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
	    3 ->
		skip_group_ServerToImporterOfferSubmitted(Rest,
							  Key bsr 3, 0, F@_1,
							  F@_2, TrUserData);
	    5 ->
		skip_32_ServerToImporterOfferSubmitted(Rest, 0, 0, F@_1,
						       F@_2, TrUserData)
	  end
    end;
dg_read_field_def_ServerToImporterOfferSubmitted(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    #'ServerToImporterOfferSubmitted'{manufacturerName =
					  F@_1,
				      productName = F@_2}.

d_field_ServerToImporterOfferSubmitted_manufacturerName(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferSubmitted_manufacturerName(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, TrUserData);
d_field_ServerToImporterOfferSubmitted_manufacturerName(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, _, F@_2,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterOfferSubmitted(RestF,
						      0, 0, NewFValue, F@_2,
						      TrUserData).

d_field_ServerToImporterOfferSubmitted_productName(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferSubmitted_productName(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
d_field_ServerToImporterOfferSubmitted_productName(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, _,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterOfferSubmitted(RestF,
						      0, 0, F@_1, NewFValue,
						      TrUserData).

skip_varint_ServerToImporterOfferSubmitted(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ServerToImporterOfferSubmitted(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
skip_varint_ServerToImporterOfferSubmitted(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferSubmitted(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

skip_length_delimited_ServerToImporterOfferSubmitted(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToImporterOfferSubmitted(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
skip_length_delimited_ServerToImporterOfferSubmitted(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToImporterOfferSubmitted(Rest2,
						      0, 0, F@_1, F@_2,
						      TrUserData).

skip_group_ServerToImporterOfferSubmitted(Bin, FNum, Z2,
					  F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToImporterOfferSubmitted(Rest,
						      0, Z2, F@_1, F@_2,
						      TrUserData).

skip_32_ServerToImporterOfferSubmitted(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferSubmitted(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

skip_64_ServerToImporterOfferSubmitted(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferSubmitted(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

decode_msg_ServerToImporterOfferInvalid(Bin,
					TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferInvalid(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_ServerToImporterOfferInvalid(<<10,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    d_field_ServerToImporterOfferInvalid_manufacturerName(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, TrUserData);
dfp_read_field_def_ServerToImporterOfferInvalid(<<18,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    d_field_ServerToImporterOfferInvalid_productName(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData);
dfp_read_field_def_ServerToImporterOfferInvalid(<<26,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    d_field_ServerToImporterOfferInvalid_errorMessage(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData);
dfp_read_field_def_ServerToImporterOfferInvalid(<<>>, 0,
						0, F@_1, F@_2, F@_3, _) ->
    #'ServerToImporterOfferInvalid'{manufacturerName = F@_1,
				    productName = F@_2, errorMessage = F@_3};
dfp_read_field_def_ServerToImporterOfferInvalid(Other,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    dg_read_field_def_ServerToImporterOfferInvalid(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData).

dg_read_field_def_ServerToImporterOfferInvalid(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToImporterOfferInvalid(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
dg_read_field_def_ServerToImporterOfferInvalid(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToImporterOfferInvalid_manufacturerName(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								TrUserData);
      18 ->
	  d_field_ServerToImporterOfferInvalid_productName(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, TrUserData);
      26 ->
	  d_field_ServerToImporterOfferInvalid_errorMessage(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToImporterOfferInvalid(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData);
	    1 ->
		skip_64_ServerToImporterOfferInvalid(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_ServerToImporterOfferInvalid(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   TrUserData);
	    3 ->
		skip_group_ServerToImporterOfferInvalid(Rest, Key bsr 3,
							0, F@_1, F@_2, F@_3,
							TrUserData);
	    5 ->
		skip_32_ServerToImporterOfferInvalid(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_ServerToImporterOfferInvalid(<<>>, 0,
					       0, F@_1, F@_2, F@_3, _) ->
    #'ServerToImporterOfferInvalid'{manufacturerName = F@_1,
				    productName = F@_2, errorMessage = F@_3}.

d_field_ServerToImporterOfferInvalid_manufacturerName(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferInvalid_manufacturerName(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  TrUserData);
d_field_ServerToImporterOfferInvalid_manufacturerName(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, _, F@_2, F@_3,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterOfferInvalid(RestF,
						    0, 0, NewFValue, F@_2, F@_3,
						    TrUserData).

d_field_ServerToImporterOfferInvalid_productName(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferInvalid_productName(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, TrUserData);
d_field_ServerToImporterOfferInvalid_productName(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, _, F@_3,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterOfferInvalid(RestF,
						    0, 0, F@_1, NewFValue, F@_3,
						    TrUserData).

d_field_ServerToImporterOfferInvalid_errorMessage(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferInvalid_errorMessage(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
d_field_ServerToImporterOfferInvalid_errorMessage(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, _,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterOfferInvalid(RestF,
						    0, 0, F@_1, F@_2, NewFValue,
						    TrUserData).

skip_varint_ServerToImporterOfferInvalid(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    skip_varint_ServerToImporterOfferInvalid(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
skip_varint_ServerToImporterOfferInvalid(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferInvalid(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

skip_length_delimited_ServerToImporterOfferInvalid(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToImporterOfferInvalid(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
skip_length_delimited_ServerToImporterOfferInvalid(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToImporterOfferInvalid(Rest2,
						    0, 0, F@_1, F@_2, F@_3,
						    TrUserData).

skip_group_ServerToImporterOfferInvalid(Bin, FNum, Z2,
					F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToImporterOfferInvalid(Rest, 0,
						    Z2, F@_1, F@_2, F@_3,
						    TrUserData).

skip_32_ServerToImporterOfferInvalid(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferInvalid(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

skip_64_ServerToImporterOfferInvalid(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferInvalid(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

decode_msg_ServerToImporterOfferWon(Bin, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferWon(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_ServerToImporterOfferWon(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    TrUserData) ->
    d_field_ServerToImporterOfferWon_manufacturerName(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData);
dfp_read_field_def_ServerToImporterOfferWon(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    TrUserData) ->
    d_field_ServerToImporterOfferWon_productName(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData);
dfp_read_field_def_ServerToImporterOfferWon(<<24,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    TrUserData) ->
    d_field_ServerToImporterOfferWon_quantity(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData);
dfp_read_field_def_ServerToImporterOfferWon(<<37,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    TrUserData) ->
    d_field_ServerToImporterOfferWon_unitPrice(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData);
dfp_read_field_def_ServerToImporterOfferWon(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, _) ->
    #'ServerToImporterOfferWon'{manufacturerName = F@_1,
				productName = F@_2, quantity = F@_3,
				unitPrice = F@_4};
dfp_read_field_def_ServerToImporterOfferWon(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, F@_4,
					    TrUserData) ->
    dg_read_field_def_ServerToImporterOfferWon(Other, Z1,
					       Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

dg_read_field_def_ServerToImporterOfferWon(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4,
					   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToImporterOfferWon(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, TrUserData);
dg_read_field_def_ServerToImporterOfferWon(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToImporterOfferWon_manufacturerName(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData);
      18 ->
	  d_field_ServerToImporterOfferWon_productName(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       TrUserData);
      24 ->
	  d_field_ServerToImporterOfferWon_quantity(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    TrUserData);
      37 ->
	  d_field_ServerToImporterOfferWon_unitPrice(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToImporterOfferWon(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4,
						     TrUserData);
	    1 ->
		skip_64_ServerToImporterOfferWon(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, TrUserData);
	    2 ->
		skip_length_delimited_ServerToImporterOfferWon(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
	    3 ->
		skip_group_ServerToImporterOfferWon(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    TrUserData);
	    5 ->
		skip_32_ServerToImporterOfferWon(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_ServerToImporterOfferWon(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, _) ->
    #'ServerToImporterOfferWon'{manufacturerName = F@_1,
				productName = F@_2, quantity = F@_3,
				unitPrice = F@_4}.

d_field_ServerToImporterOfferWon_manufacturerName(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferWon_manufacturerName(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      TrUserData);
d_field_ServerToImporterOfferWon_manufacturerName(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, _, F@_2, F@_3, F@_4,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterOfferWon(RestF, 0, 0,
						NewFValue, F@_2, F@_3, F@_4,
						TrUserData).

d_field_ServerToImporterOfferWon_productName(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferWon_productName(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
d_field_ServerToImporterOfferWon_productName(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, _, F@_3, F@_4,
					     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterOfferWon(RestF, 0, 0,
						F@_1, NewFValue, F@_3, F@_4,
						TrUserData).

d_field_ServerToImporterOfferWon_quantity(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferWon_quantity(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, TrUserData);
d_field_ServerToImporterOfferWon_quantity(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, _, F@_4,
					  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ServerToImporterOfferWon(RestF, 0, 0,
						F@_1, F@_2, NewFValue, F@_4,
						TrUserData).

d_field_ServerToImporterOfferWon_unitPrice(<<0:16, 128,
					     127, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, _,
					   TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferWon(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						id(infinity, TrUserData),
						TrUserData);
d_field_ServerToImporterOfferWon_unitPrice(<<0:16, 128,
					     255, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, _,
					   TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferWon(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						id('-infinity', TrUserData),
						TrUserData);
d_field_ServerToImporterOfferWon_unitPrice(<<_:16, 1:1,
					     _:7, _:1, 127:7, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, _,
					   TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferWon(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						id(nan, TrUserData),
						TrUserData);
d_field_ServerToImporterOfferWon_unitPrice(<<Value:32/little-float,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, _,
					   TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferWon(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						id(Value, TrUserData),
						TrUserData).

skip_varint_ServerToImporterOfferWon(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    skip_varint_ServerToImporterOfferWon(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
skip_varint_ServerToImporterOfferWon(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferWon(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						TrUserData).

skip_length_delimited_ServerToImporterOfferWon(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToImporterOfferWon(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4,
						   TrUserData);
skip_length_delimited_ServerToImporterOfferWon(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToImporterOfferWon(Rest2, 0, 0,
						F@_1, F@_2, F@_3, F@_4,
						TrUserData).

skip_group_ServerToImporterOfferWon(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToImporterOfferWon(Rest, 0, Z2,
						F@_1, F@_2, F@_3, F@_4,
						TrUserData).

skip_32_ServerToImporterOfferWon(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferWon(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						TrUserData).

skip_64_ServerToImporterOfferWon(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferWon(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						TrUserData).

decode_msg_ServerToImporterOfferLose(Bin, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferLose(Bin, 0, 0,
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_ServerToImporterOfferLose(<<10,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ServerToImporterOfferLose_manufacturerName(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
dfp_read_field_def_ServerToImporterOfferLose(<<18,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ServerToImporterOfferLose_productName(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_ServerToImporterOfferLose(<<>>, 0, 0,
					     F@_1, F@_2, _) ->
    #'ServerToImporterOfferLose'{manufacturerName = F@_1,
				 productName = F@_2};
dfp_read_field_def_ServerToImporterOfferLose(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_ServerToImporterOfferLose(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_ServerToImporterOfferLose(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToImporterOfferLose(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
dg_read_field_def_ServerToImporterOfferLose(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToImporterOfferLose_manufacturerName(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      18 ->
	  d_field_ServerToImporterOfferLose_productName(Rest, 0,
							0, F@_1, F@_2,
							TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToImporterOfferLose(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		skip_64_ServerToImporterOfferLose(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		skip_length_delimited_ServerToImporterOfferLose(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		skip_group_ServerToImporterOfferLose(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_ServerToImporterOfferLose(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
dg_read_field_def_ServerToImporterOfferLose(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #'ServerToImporterOfferLose'{manufacturerName = F@_1,
				 productName = F@_2}.

d_field_ServerToImporterOfferLose_manufacturerName(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferLose_manufacturerName(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
d_field_ServerToImporterOfferLose_manufacturerName(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, _, F@_2,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterOfferLose(RestF, 0,
						 0, NewFValue, F@_2,
						 TrUserData).

d_field_ServerToImporterOfferLose_productName(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferLose_productName(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
d_field_ServerToImporterOfferLose_productName(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterOfferLose(RestF, 0,
						 0, F@_1, NewFValue,
						 TrUserData).

skip_varint_ServerToImporterOfferLose(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ServerToImporterOfferLose(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
skip_varint_ServerToImporterOfferLose(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferLose(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_ServerToImporterOfferLose(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToImporterOfferLose(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
skip_length_delimited_ServerToImporterOfferLose(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToImporterOfferLose(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

skip_group_ServerToImporterOfferLose(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToImporterOfferLose(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

skip_32_ServerToImporterOfferLose(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferLose(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_64_ServerToImporterOfferLose(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferLose(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

decode_msg_ServerToImporterOfferOutdated(Bin,
					 TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferOutdated(Bin, 0,
						     0,
						     id(undefined, TrUserData),
						     id(undefined, TrUserData),
						     TrUserData).

dfp_read_field_def_ServerToImporterOfferOutdated(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    d_field_ServerToImporterOfferOutdated_manufacturerName(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
dfp_read_field_def_ServerToImporterOfferOutdated(<<18,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    d_field_ServerToImporterOfferOutdated_productName(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
dfp_read_field_def_ServerToImporterOfferOutdated(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    #'ServerToImporterOfferOutdated'{manufacturerName =
					 F@_1,
				     productName = F@_2};
dfp_read_field_def_ServerToImporterOfferOutdated(Other,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    dg_read_field_def_ServerToImporterOfferOutdated(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

dg_read_field_def_ServerToImporterOfferOutdated(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToImporterOfferOutdated(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
dg_read_field_def_ServerToImporterOfferOutdated(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToImporterOfferOutdated_manufacturerName(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
      18 ->
	  d_field_ServerToImporterOfferOutdated_productName(Rest,
							    0, 0, F@_1, F@_2,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToImporterOfferOutdated(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    1 ->
		skip_64_ServerToImporterOfferOutdated(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    2 ->
		skip_length_delimited_ServerToImporterOfferOutdated(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
	    3 ->
		skip_group_ServerToImporterOfferOutdated(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, TrUserData);
	    5 ->
		skip_32_ServerToImporterOfferOutdated(Rest, 0, 0, F@_1,
						      F@_2, TrUserData)
	  end
    end;
dg_read_field_def_ServerToImporterOfferOutdated(<<>>, 0,
						0, F@_1, F@_2, _) ->
    #'ServerToImporterOfferOutdated'{manufacturerName =
					 F@_1,
				     productName = F@_2}.

d_field_ServerToImporterOfferOutdated_manufacturerName(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferOutdated_manufacturerName(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
d_field_ServerToImporterOfferOutdated_manufacturerName(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, _, F@_2,
						       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterOfferOutdated(RestF,
						     0, 0, NewFValue, F@_2,
						     TrUserData).

d_field_ServerToImporterOfferOutdated_productName(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    d_field_ServerToImporterOfferOutdated_productName(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
d_field_ServerToImporterOfferOutdated_productName(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, _,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterOfferOutdated(RestF,
						     0, 0, F@_1, NewFValue,
						     TrUserData).

skip_varint_ServerToImporterOfferOutdated(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ServerToImporterOfferOutdated(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
skip_varint_ServerToImporterOfferOutdated(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferOutdated(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

skip_length_delimited_ServerToImporterOfferOutdated(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToImporterOfferOutdated(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
skip_length_delimited_ServerToImporterOfferOutdated(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToImporterOfferOutdated(Rest2,
						     0, 0, F@_1, F@_2,
						     TrUserData).

skip_group_ServerToImporterOfferOutdated(Bin, FNum, Z2,
					 F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToImporterOfferOutdated(Rest,
						     0, Z2, F@_1, F@_2,
						     TrUserData).

skip_32_ServerToImporterOfferOutdated(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferOutdated(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

skip_64_ServerToImporterOfferOutdated(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToImporterOfferOutdated(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

decode_msg_ServerToImporterNewProduct(Bin,
				      TrUserData) ->
    dfp_read_field_def_ServerToImporterNewProduct(Bin, 0, 0,
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_ServerToImporterNewProduct(<<10,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData) ->
    d_field_ServerToImporterNewProduct_productName(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, TrUserData);
dfp_read_field_def_ServerToImporterNewProduct(<<16,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData) ->
    d_field_ServerToImporterNewProduct_minQuantity(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, TrUserData);
dfp_read_field_def_ServerToImporterNewProduct(<<24,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData) ->
    d_field_ServerToImporterNewProduct_maxQuantity(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, TrUserData);
dfp_read_field_def_ServerToImporterNewProduct(<<37,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData) ->
    d_field_ServerToImporterNewProduct_minUnitPrice(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6,
						    TrUserData);
dfp_read_field_def_ServerToImporterNewProduct(<<40,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData) ->
    d_field_ServerToImporterNewProduct_timeout(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData);
dfp_read_field_def_ServerToImporterNewProduct(<<50,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData) ->
    d_field_ServerToImporterNewProduct_manufacturerName(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							TrUserData);
dfp_read_field_def_ServerToImporterNewProduct(<<>>, 0,
					      0, F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, _) ->
    #'ServerToImporterNewProduct'{productName = F@_1,
				  minQuantity = F@_2, maxQuantity = F@_3,
				  minUnitPrice = F@_4, timeout = F@_5,
				  manufacturerName = F@_6};
dfp_read_field_def_ServerToImporterNewProduct(Other, Z1,
					      Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData) ->
    dg_read_field_def_ServerToImporterNewProduct(Other, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData).

dg_read_field_def_ServerToImporterNewProduct(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToImporterNewProduct(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
dg_read_field_def_ServerToImporterNewProduct(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToImporterNewProduct_productName(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6,
							 TrUserData);
      16 ->
	  d_field_ServerToImporterNewProduct_minQuantity(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6,
							 TrUserData);
      24 ->
	  d_field_ServerToImporterNewProduct_maxQuantity(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6,
							 TrUserData);
      37 ->
	  d_field_ServerToImporterNewProduct_minUnitPrice(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  TrUserData);
      40 ->
	  d_field_ServerToImporterNewProduct_timeout(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, TrUserData);
      50 ->
	  d_field_ServerToImporterNewProduct_manufacturerName(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToImporterNewProduct(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4, F@_5,
						       F@_6, TrUserData);
	    1 ->
		skip_64_ServerToImporterNewProduct(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   TrUserData);
	    2 ->
		skip_length_delimited_ServerToImporterNewProduct(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6,
								 TrUserData);
	    3 ->
		skip_group_ServerToImporterNewProduct(Rest, Key bsr 3,
						      0, F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_ServerToImporterNewProduct(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   TrUserData)
	  end
    end;
dg_read_field_def_ServerToImporterNewProduct(<<>>, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     _) ->
    #'ServerToImporterNewProduct'{productName = F@_1,
				  minQuantity = F@_2, maxQuantity = F@_3,
				  minUnitPrice = F@_4, timeout = F@_5,
				  manufacturerName = F@_6}.

d_field_ServerToImporterNewProduct_productName(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ServerToImporterNewProduct_productName(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   TrUserData);
d_field_ServerToImporterNewProduct_productName(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F@_2, F@_3, F@_4,
					       F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterNewProduct(RestF, 0,
						  0, NewFValue, F@_2, F@_3,
						  F@_4, F@_5, F@_6, TrUserData).

d_field_ServerToImporterNewProduct_minQuantity(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ServerToImporterNewProduct_minQuantity(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   TrUserData);
d_field_ServerToImporterNewProduct_minQuantity(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, _, F@_3, F@_4,
					       F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ServerToImporterNewProduct(RestF, 0,
						  0, F@_1, NewFValue, F@_3,
						  F@_4, F@_5, F@_6, TrUserData).

d_field_ServerToImporterNewProduct_maxQuantity(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ServerToImporterNewProduct_maxQuantity(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   TrUserData);
d_field_ServerToImporterNewProduct_maxQuantity(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, _, F@_4,
					       F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ServerToImporterNewProduct(RestF, 0,
						  0, F@_1, F@_2, NewFValue,
						  F@_4, F@_5, F@_6, TrUserData).

d_field_ServerToImporterNewProduct_minUnitPrice(<<0:16,
						  128, 127, Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, _,
						F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_ServerToImporterNewProduct(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  id(infinity, TrUserData),
						  F@_5, F@_6, TrUserData);
d_field_ServerToImporterNewProduct_minUnitPrice(<<0:16,
						  128, 255, Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, _,
						F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_ServerToImporterNewProduct(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  id('-infinity', TrUserData),
						  F@_5, F@_6, TrUserData);
d_field_ServerToImporterNewProduct_minUnitPrice(<<_:16,
						  1:1, _:7, _:1, 127:7,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, _,
						F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_ServerToImporterNewProduct(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  id(nan, TrUserData), F@_5,
						  F@_6, TrUserData);
d_field_ServerToImporterNewProduct_minUnitPrice(<<Value:32/little-float,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, _,
						F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_ServerToImporterNewProduct(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  id(Value, TrUserData), F@_5,
						  F@_6, TrUserData).

d_field_ServerToImporterNewProduct_timeout(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData)
    when N < 57 ->
    d_field_ServerToImporterNewProduct_timeout(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, TrUserData);
d_field_ServerToImporterNewProduct_timeout(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					   F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ServerToImporterNewProduct(RestF, 0,
						  0, F@_1, F@_2, F@_3, F@_4,
						  NewFValue, F@_6, TrUserData).

d_field_ServerToImporterNewProduct_manufacturerName(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6,
						    TrUserData)
    when N < 57 ->
    d_field_ServerToImporterNewProduct_manufacturerName(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, TrUserData);
d_field_ServerToImporterNewProduct_manufacturerName(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, _,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToImporterNewProduct(RestF, 0,
						  0, F@_1, F@_2, F@_3, F@_4,
						  F@_5, NewFValue, TrUserData).

skip_varint_ServerToImporterNewProduct(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    skip_varint_ServerToImporterNewProduct(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData);
skip_varint_ServerToImporterNewProduct(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    dfp_read_field_def_ServerToImporterNewProduct(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, TrUserData).

skip_length_delimited_ServerToImporterNewProduct(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToImporterNewProduct(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData);
skip_length_delimited_ServerToImporterNewProduct(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToImporterNewProduct(Rest2, 0,
						  0, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, TrUserData).

skip_group_ServerToImporterNewProduct(Bin, FNum, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToImporterNewProduct(Rest, 0,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, TrUserData).

skip_32_ServerToImporterNewProduct(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    dfp_read_field_def_ServerToImporterNewProduct(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, TrUserData).

skip_64_ServerToImporterNewProduct(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    dfp_read_field_def_ServerToImporterNewProduct(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, TrUserData).

decode_msg_ServerToImporterSubscribeAccepted(Bin,
					     TrUserData) ->
    dfp_read_field_def_ServerToImporterSubscribeAccepted(Bin,
							 0, 0, TrUserData).

dfp_read_field_def_ServerToImporterSubscribeAccepted(<<>>,
						     0, 0, _) ->
    #'ServerToImporterSubscribeAccepted'{};
dfp_read_field_def_ServerToImporterSubscribeAccepted(Other,
						     Z1, Z2, TrUserData) ->
    dg_read_field_def_ServerToImporterSubscribeAccepted(Other,
							Z1, Z2, TrUserData).

dg_read_field_def_ServerToImporterSubscribeAccepted(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToImporterSubscribeAccepted(Rest,
							N + 7, X bsl N + Acc,
							TrUserData);
dg_read_field_def_ServerToImporterSubscribeAccepted(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_ServerToImporterSubscribeAccepted(Rest, 0,
							0, TrUserData);
      1 ->
	  skip_64_ServerToImporterSubscribeAccepted(Rest, 0, 0,
						    TrUserData);
      2 ->
	  skip_length_delimited_ServerToImporterSubscribeAccepted(Rest,
								  0, 0,
								  TrUserData);
      3 ->
	  skip_group_ServerToImporterSubscribeAccepted(Rest,
						       Key bsr 3, 0,
						       TrUserData);
      5 ->
	  skip_32_ServerToImporterSubscribeAccepted(Rest, 0, 0,
						    TrUserData)
    end;
dg_read_field_def_ServerToImporterSubscribeAccepted(<<>>,
						    0, 0, _) ->
    #'ServerToImporterSubscribeAccepted'{}.

skip_varint_ServerToImporterSubscribeAccepted(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, TrUserData) ->
    skip_varint_ServerToImporterSubscribeAccepted(Rest, Z1,
						  Z2, TrUserData);
skip_varint_ServerToImporterSubscribeAccepted(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, TrUserData) ->
    dfp_read_field_def_ServerToImporterSubscribeAccepted(Rest,
							 Z1, Z2, TrUserData).

skip_length_delimited_ServerToImporterSubscribeAccepted(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToImporterSubscribeAccepted(Rest,
							    N + 7,
							    X bsl N + Acc,
							    TrUserData);
skip_length_delimited_ServerToImporterSubscribeAccepted(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToImporterSubscribeAccepted(Rest2,
							 0, 0, TrUserData).

skip_group_ServerToImporterSubscribeAccepted(Bin, FNum,
					     Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToImporterSubscribeAccepted(Rest,
							 0, Z2, TrUserData).

skip_32_ServerToImporterSubscribeAccepted(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, TrUserData) ->
    dfp_read_field_def_ServerToImporterSubscribeAccepted(Rest,
							 Z1, Z2, TrUserData).

skip_64_ServerToImporterSubscribeAccepted(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, TrUserData) ->
    dfp_read_field_def_ServerToImporterSubscribeAccepted(Rest,
							 Z1, Z2, TrUserData).

decode_msg_ArbiterToServer(Bin, TrUserData) ->
    dfp_read_field_def_ArbiterToServer(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ArbiterToServer(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServer_accepted(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_ArbiterToServer(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServer_announceInvalid(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_ArbiterToServer(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServer_sold(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_ArbiterToServer(<<34, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServer_noOffers(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_ArbiterToServer(<<42, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServer_submitted(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_ArbiterToServer(<<50, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServer_offerInvalid(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_ArbiterToServer(<<58, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServer_won(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_ArbiterToServer(<<66, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServer_lose(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_ArbiterToServer(<<74, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServer_offerOutdated(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_ArbiterToServer(<<82, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServer_product(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_ArbiterToServer(<<90, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServer_subsAccepted(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_ArbiterToServer(<<>>, 0, 0, F@_1,
				   _) ->
    #'ArbiterToServer'{message = F@_1};
dfp_read_field_def_ArbiterToServer(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_ArbiterToServer(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_ArbiterToServer(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServer(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ArbiterToServer(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServer_accepted(Rest, 0, 0, F@_1,
					   TrUserData);
      18 ->
	  d_field_ArbiterToServer_announceInvalid(Rest, 0, 0,
						  F@_1, TrUserData);
      26 ->
	  d_field_ArbiterToServer_sold(Rest, 0, 0, F@_1,
				       TrUserData);
      34 ->
	  d_field_ArbiterToServer_noOffers(Rest, 0, 0, F@_1,
					   TrUserData);
      42 ->
	  d_field_ArbiterToServer_submitted(Rest, 0, 0, F@_1,
					    TrUserData);
      50 ->
	  d_field_ArbiterToServer_offerInvalid(Rest, 0, 0, F@_1,
					       TrUserData);
      58 ->
	  d_field_ArbiterToServer_won(Rest, 0, 0, F@_1,
				      TrUserData);
      66 ->
	  d_field_ArbiterToServer_lose(Rest, 0, 0, F@_1,
				       TrUserData);
      74 ->
	  d_field_ArbiterToServer_offerOutdated(Rest, 0, 0, F@_1,
						TrUserData);
      82 ->
	  d_field_ArbiterToServer_product(Rest, 0, 0, F@_1,
					  TrUserData);
      90 ->
	  d_field_ArbiterToServer_subsAccepted(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServer(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_ArbiterToServer(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServer(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_ArbiterToServer(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_ArbiterToServer(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServer(<<>>, 0, 0, F@_1,
				  _) ->
    #'ArbiterToServer'{message = F@_1}.

d_field_ArbiterToServer_accepted(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServer_accepted(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_ArbiterToServer_accepted(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ArbiterToServerAnnounceAccepted(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServer(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({accepted, NewFValue},
						TrUserData);
					 {accepted, MVPrev} ->
					     id({accepted,
						 merge_msg_ArbiterToServerAnnounceAccepted(MVPrev,
											   NewFValue,
											   TrUserData)},
						TrUserData);
					 _ ->
					     id({accepted, NewFValue},
						TrUserData)
				       end,
				       TrUserData).

d_field_ArbiterToServer_announceInvalid(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServer_announceInvalid(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_ArbiterToServer_announceInvalid(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ArbiterToServerAnnounceInvalid(Bs,
									 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServer(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({announceInvalid, NewFValue},
						TrUserData);
					 {announceInvalid, MVPrev} ->
					     id({announceInvalid,
						 merge_msg_ArbiterToServerAnnounceInvalid(MVPrev,
											  NewFValue,
											  TrUserData)},
						TrUserData);
					 _ ->
					     id({announceInvalid, NewFValue},
						TrUserData)
				       end,
				       TrUserData).

d_field_ArbiterToServer_sold(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServer_sold(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_ArbiterToServer_sold(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ArbiterToServerAnnounceSold(Bs,
								      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServer(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({sold, NewFValue}, TrUserData);
					 {sold, MVPrev} ->
					     id({sold,
						 merge_msg_ArbiterToServerAnnounceSold(MVPrev,
										       NewFValue,
										       TrUserData)},
						TrUserData);
					 _ -> id({sold, NewFValue}, TrUserData)
				       end,
				       TrUserData).

d_field_ArbiterToServer_noOffers(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServer_noOffers(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_ArbiterToServer_noOffers(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ArbiterToServerAnnounceNoOffers(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServer(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({noOffers, NewFValue},
						TrUserData);
					 {noOffers, MVPrev} ->
					     id({noOffers,
						 merge_msg_ArbiterToServerAnnounceNoOffers(MVPrev,
											   NewFValue,
											   TrUserData)},
						TrUserData);
					 _ ->
					     id({noOffers, NewFValue},
						TrUserData)
				       end,
				       TrUserData).

d_field_ArbiterToServer_submitted(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServer_submitted(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_ArbiterToServer_submitted(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ArbiterToServerOfferSubmitted(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServer(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({submitted, NewFValue},
						TrUserData);
					 {submitted, MVPrev} ->
					     id({submitted,
						 merge_msg_ArbiterToServerOfferSubmitted(MVPrev,
											 NewFValue,
											 TrUserData)},
						TrUserData);
					 _ ->
					     id({submitted, NewFValue},
						TrUserData)
				       end,
				       TrUserData).

d_field_ArbiterToServer_offerInvalid(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServer_offerInvalid(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_ArbiterToServer_offerInvalid(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ArbiterToServerOfferInvalid(Bs,
								      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServer(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({offerInvalid, NewFValue},
						TrUserData);
					 {offerInvalid, MVPrev} ->
					     id({offerInvalid,
						 merge_msg_ArbiterToServerOfferInvalid(MVPrev,
										       NewFValue,
										       TrUserData)},
						TrUserData);
					 _ ->
					     id({offerInvalid, NewFValue},
						TrUserData)
				       end,
				       TrUserData).

d_field_ArbiterToServer_won(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServer_won(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_ArbiterToServer_won(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ArbiterToServerOfferWon(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServer(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({won, NewFValue}, TrUserData);
					 {won, MVPrev} ->
					     id({won,
						 merge_msg_ArbiterToServerOfferWon(MVPrev,
										   NewFValue,
										   TrUserData)},
						TrUserData);
					 _ -> id({won, NewFValue}, TrUserData)
				       end,
				       TrUserData).

d_field_ArbiterToServer_lose(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServer_lose(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_ArbiterToServer_lose(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ArbiterToServerOfferLose(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServer(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({lose, NewFValue}, TrUserData);
					 {lose, MVPrev} ->
					     id({lose,
						 merge_msg_ArbiterToServerOfferLose(MVPrev,
										    NewFValue,
										    TrUserData)},
						TrUserData);
					 _ -> id({lose, NewFValue}, TrUserData)
				       end,
				       TrUserData).

d_field_ArbiterToServer_offerOutdated(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServer_offerOutdated(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_ArbiterToServer_offerOutdated(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ArbiterToServerOfferOutdated(Bs,
								       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServer(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({offerOutdated, NewFValue},
						TrUserData);
					 {offerOutdated, MVPrev} ->
					     id({offerOutdated,
						 merge_msg_ArbiterToServerOfferOutdated(MVPrev,
											NewFValue,
											TrUserData)},
						TrUserData);
					 _ ->
					     id({offerOutdated, NewFValue},
						TrUserData)
				       end,
				       TrUserData).

d_field_ArbiterToServer_product(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServer_product(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_ArbiterToServer_product(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ArbiterToServerNewProduct(Bs,
								    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServer(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({product, NewFValue},
						TrUserData);
					 {product, MVPrev} ->
					     id({product,
						 merge_msg_ArbiterToServerNewProduct(MVPrev,
										     NewFValue,
										     TrUserData)},
						TrUserData);
					 _ ->
					     id({product, NewFValue},
						TrUserData)
				       end,
				       TrUserData).

d_field_ArbiterToServer_subsAccepted(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServer_subsAccepted(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_ArbiterToServer_subsAccepted(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ArbiterToServerSubscribeAccepted(Bs,
									   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServer(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({subsAccepted, NewFValue},
						TrUserData);
					 {subsAccepted, MVPrev} ->
					     id({subsAccepted,
						 merge_msg_ArbiterToServerSubscribeAccepted(MVPrev,
											    NewFValue,
											    TrUserData)},
						TrUserData);
					 _ ->
					     id({subsAccepted, NewFValue},
						TrUserData)
				       end,
				       TrUserData).

skip_varint_ArbiterToServer(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ArbiterToServer(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_ArbiterToServer(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ArbiterToServer(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_ArbiterToServer(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServer(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ArbiterToServer(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServer(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_ArbiterToServer(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServer(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_ArbiterToServer(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_ArbiterToServer(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_ArbiterToServer(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_ArbiterToServer(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_ArbiterToServerAnnounceAccepted(Bin,
					   TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceAccepted(Bin,
						       0, 0,
						       id(undefined,
							  TrUserData),
						       id(undefined,
							  TrUserData),
						       TrUserData).

dfp_read_field_def_ArbiterToServerAnnounceAccepted(<<10,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    d_field_ArbiterToServerAnnounceAccepted_manufacturerName(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData);
dfp_read_field_def_ArbiterToServerAnnounceAccepted(<<18,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    d_field_ArbiterToServerAnnounceAccepted_productName(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData);
dfp_read_field_def_ArbiterToServerAnnounceAccepted(<<>>,
						   0, 0, F@_1, F@_2, _) ->
    #'ArbiterToServerAnnounceAccepted'{manufacturerName =
					   F@_1,
				       productName = F@_2};
dfp_read_field_def_ArbiterToServerAnnounceAccepted(Other,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    dg_read_field_def_ArbiterToServerAnnounceAccepted(Other,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

dg_read_field_def_ArbiterToServerAnnounceAccepted(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServerAnnounceAccepted(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
dg_read_field_def_ArbiterToServerAnnounceAccepted(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServerAnnounceAccepted_manufacturerName(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
      18 ->
	  d_field_ArbiterToServerAnnounceAccepted_productName(Rest,
							      0, 0, F@_1, F@_2,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServerAnnounceAccepted(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData);
	    1 ->
		skip_64_ArbiterToServerAnnounceAccepted(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServerAnnounceAccepted(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
	    3 ->
		skip_group_ArbiterToServerAnnounceAccepted(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, TrUserData);
	    5 ->
		skip_32_ArbiterToServerAnnounceAccepted(Rest, 0, 0,
							F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServerAnnounceAccepted(<<>>,
						  0, 0, F@_1, F@_2, _) ->
    #'ArbiterToServerAnnounceAccepted'{manufacturerName =
					   F@_1,
				       productName = F@_2}.

d_field_ArbiterToServerAnnounceAccepted_manufacturerName(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerAnnounceAccepted_manufacturerName(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2,
							     TrUserData);
d_field_ArbiterToServerAnnounceAccepted_manufacturerName(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, _, F@_2,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerAnnounceAccepted(RestF,
						       0, 0, NewFValue, F@_2,
						       TrUserData).

d_field_ArbiterToServerAnnounceAccepted_productName(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerAnnounceAccepted_productName(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
d_field_ArbiterToServerAnnounceAccepted_productName(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, _,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerAnnounceAccepted(RestF,
						       0, 0, F@_1, NewFValue,
						       TrUserData).

skip_varint_ArbiterToServerAnnounceAccepted(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ArbiterToServerAnnounceAccepted(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
skip_varint_ArbiterToServerAnnounceAccepted(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceAccepted(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

skip_length_delimited_ArbiterToServerAnnounceAccepted(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServerAnnounceAccepted(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2,
							  TrUserData);
skip_length_delimited_ArbiterToServerAnnounceAccepted(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServerAnnounceAccepted(Rest2,
						       0, 0, F@_1, F@_2,
						       TrUserData).

skip_group_ArbiterToServerAnnounceAccepted(Bin, FNum,
					   Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServerAnnounceAccepted(Rest,
						       0, Z2, F@_1, F@_2,
						       TrUserData).

skip_32_ArbiterToServerAnnounceAccepted(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceAccepted(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

skip_64_ArbiterToServerAnnounceAccepted(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceAccepted(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

decode_msg_ArbiterToServerAnnounceInvalid(Bin,
					  TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceInvalid(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      id(undefined, TrUserData),
						      id(undefined, TrUserData),
						      TrUserData).

dfp_read_field_def_ArbiterToServerAnnounceInvalid(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    d_field_ArbiterToServerAnnounceInvalid_manufacturerName(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData);
dfp_read_field_def_ArbiterToServerAnnounceInvalid(<<18,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    d_field_ArbiterToServerAnnounceInvalid_productName(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData);
dfp_read_field_def_ArbiterToServerAnnounceInvalid(<<26,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    d_field_ArbiterToServerAnnounceInvalid_errorMessage(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData);
dfp_read_field_def_ArbiterToServerAnnounceInvalid(<<>>,
						  0, 0, F@_1, F@_2, F@_3, _) ->
    #'ArbiterToServerAnnounceInvalid'{manufacturerName =
					  F@_1,
				      productName = F@_2, errorMessage = F@_3};
dfp_read_field_def_ArbiterToServerAnnounceInvalid(Other,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    dg_read_field_def_ArbiterToServerAnnounceInvalid(Other,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

dg_read_field_def_ArbiterToServerAnnounceInvalid(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServerAnnounceInvalid(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, TrUserData);
dg_read_field_def_ArbiterToServerAnnounceInvalid(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServerAnnounceInvalid_manufacturerName(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  TrUserData);
      18 ->
	  d_field_ArbiterToServerAnnounceInvalid_productName(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, TrUserData);
      26 ->
	  d_field_ArbiterToServerAnnounceInvalid_errorMessage(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServerAnnounceInvalid(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   TrUserData);
	    1 ->
		skip_64_ArbiterToServerAnnounceInvalid(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServerAnnounceInvalid(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     TrUserData);
	    3 ->
		skip_group_ArbiterToServerAnnounceInvalid(Rest,
							  Key bsr 3, 0, F@_1,
							  F@_2, F@_3,
							  TrUserData);
	    5 ->
		skip_32_ArbiterToServerAnnounceInvalid(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServerAnnounceInvalid(<<>>,
						 0, 0, F@_1, F@_2, F@_3, _) ->
    #'ArbiterToServerAnnounceInvalid'{manufacturerName =
					  F@_1,
				      productName = F@_2, errorMessage = F@_3}.

d_field_ArbiterToServerAnnounceInvalid_manufacturerName(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerAnnounceInvalid_manufacturerName(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3,
							    TrUserData);
d_field_ArbiterToServerAnnounceInvalid_manufacturerName(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, _, F@_2, F@_3,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerAnnounceInvalid(RestF,
						      0, 0, NewFValue, F@_2,
						      F@_3, TrUserData).

d_field_ArbiterToServerAnnounceInvalid_productName(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerAnnounceInvalid_productName(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
d_field_ArbiterToServerAnnounceInvalid_productName(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, _, F@_3,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerAnnounceInvalid(RestF,
						      0, 0, F@_1, NewFValue,
						      F@_3, TrUserData).

d_field_ArbiterToServerAnnounceInvalid_errorMessage(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerAnnounceInvalid_errorMessage(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
d_field_ArbiterToServerAnnounceInvalid_errorMessage(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, _,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerAnnounceInvalid(RestF,
						      0, 0, F@_1, F@_2,
						      NewFValue, TrUserData).

skip_varint_ArbiterToServerAnnounceInvalid(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3,
					   TrUserData) ->
    skip_varint_ArbiterToServerAnnounceInvalid(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, TrUserData);
skip_varint_ArbiterToServerAnnounceInvalid(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3,
					   TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceInvalid(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

skip_length_delimited_ArbiterToServerAnnounceInvalid(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServerAnnounceInvalid(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3,
							 TrUserData);
skip_length_delimited_ArbiterToServerAnnounceInvalid(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServerAnnounceInvalid(Rest2,
						      0, 0, F@_1, F@_2, F@_3,
						      TrUserData).

skip_group_ArbiterToServerAnnounceInvalid(Bin, FNum, Z2,
					  F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServerAnnounceInvalid(Rest,
						      0, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

skip_32_ArbiterToServerAnnounceInvalid(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceInvalid(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

skip_64_ArbiterToServerAnnounceInvalid(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceInvalid(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

decode_msg_ArbiterToServerAnnounceSold(Bin,
				       TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceSold(Bin, 0,
						   0, id(undefined, TrUserData),
						   id(undefined, TrUserData),
						   id(undefined, TrUserData),
						   id(undefined, TrUserData),
						   TrUserData).

dfp_read_field_def_ArbiterToServerAnnounceSold(<<10,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    d_field_ArbiterToServerAnnounceSold_manufacturerName(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
dfp_read_field_def_ArbiterToServerAnnounceSold(<<18,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    d_field_ArbiterToServerAnnounceSold_productName(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, TrUserData);
dfp_read_field_def_ArbiterToServerAnnounceSold(<<24,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    d_field_ArbiterToServerAnnounceSold_quantity(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData);
dfp_read_field_def_ArbiterToServerAnnounceSold(<<37,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    d_field_ArbiterToServerAnnounceSold_unitPrice(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
dfp_read_field_def_ArbiterToServerAnnounceSold(<<>>, 0,
					       0, F@_1, F@_2, F@_3, F@_4, _) ->
    #'ArbiterToServerAnnounceSold'{manufacturerName = F@_1,
				   productName = F@_2, quantity = F@_3,
				   unitPrice = F@_4};
dfp_read_field_def_ArbiterToServerAnnounceSold(Other,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    dg_read_field_def_ArbiterToServerAnnounceSold(Other, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

dg_read_field_def_ArbiterToServerAnnounceSold(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServerAnnounceSold(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_ArbiterToServerAnnounceSold(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServerAnnounceSold_manufacturerName(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
      18 ->
	  d_field_ArbiterToServerAnnounceSold_productName(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
      24 ->
	  d_field_ArbiterToServerAnnounceSold_quantity(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       TrUserData);
      37 ->
	  d_field_ArbiterToServerAnnounceSold_unitPrice(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServerAnnounceSold(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
	    1 ->
		skip_64_ArbiterToServerAnnounceSold(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServerAnnounceSold(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
	    3 ->
		skip_group_ArbiterToServerAnnounceSold(Rest, Key bsr 3,
						       0, F@_1, F@_2, F@_3,
						       F@_4, TrUserData);
	    5 ->
		skip_32_ArbiterToServerAnnounceSold(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServerAnnounceSold(<<>>, 0,
					      0, F@_1, F@_2, F@_3, F@_4, _) ->
    #'ArbiterToServerAnnounceSold'{manufacturerName = F@_1,
				   productName = F@_2, quantity = F@_3,
				   unitPrice = F@_4}.

d_field_ArbiterToServerAnnounceSold_manufacturerName(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerAnnounceSold_manufacturerName(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
d_field_ArbiterToServerAnnounceSold_manufacturerName(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, _, F@_2, F@_3,
						     F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerAnnounceSold(RestF, 0,
						   0, NewFValue, F@_2, F@_3,
						   F@_4, TrUserData).

d_field_ArbiterToServerAnnounceSold_productName(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerAnnounceSold_productName(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
d_field_ArbiterToServerAnnounceSold_productName(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3, F@_4,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerAnnounceSold(RestF, 0,
						   0, F@_1, NewFValue, F@_3,
						   F@_4, TrUserData).

d_field_ArbiterToServerAnnounceSold_quantity(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerAnnounceSold_quantity(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
d_field_ArbiterToServerAnnounceSold_quantity(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, _, F@_4,
					     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ArbiterToServerAnnounceSold(RestF, 0,
						   0, F@_1, F@_2, NewFValue,
						   F@_4, TrUserData).

d_field_ArbiterToServerAnnounceSold_unitPrice(<<0:16,
						128, 127, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, _,
					      TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceSold(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   id(infinity, TrUserData),
						   TrUserData);
d_field_ArbiterToServerAnnounceSold_unitPrice(<<0:16,
						128, 255, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, _,
					      TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceSold(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   id('-infinity', TrUserData),
						   TrUserData);
d_field_ArbiterToServerAnnounceSold_unitPrice(<<_:16,
						1:1, _:7, _:1, 127:7,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, _,
					      TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceSold(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   id(nan, TrUserData),
						   TrUserData);
d_field_ArbiterToServerAnnounceSold_unitPrice(<<Value:32/little-float,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, _,
					      TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceSold(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   id(Value, TrUserData),
						   TrUserData).

skip_varint_ArbiterToServerAnnounceSold(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    skip_varint_ArbiterToServerAnnounceSold(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_ArbiterToServerAnnounceSold(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceSold(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData).

skip_length_delimited_ArbiterToServerAnnounceSold(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServerAnnounceSold(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      TrUserData);
skip_length_delimited_ArbiterToServerAnnounceSold(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServerAnnounceSold(Rest2, 0,
						   0, F@_1, F@_2, F@_3, F@_4,
						   TrUserData).

skip_group_ArbiterToServerAnnounceSold(Bin, FNum, Z2,
				       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServerAnnounceSold(Rest, 0,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData).

skip_32_ArbiterToServerAnnounceSold(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceSold(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData).

skip_64_ArbiterToServerAnnounceSold(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceSold(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData).

decode_msg_ArbiterToServerAnnounceNoOffers(Bin,
					   TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceNoOffers(Bin,
						       0, 0,
						       id(undefined,
							  TrUserData),
						       id(undefined,
							  TrUserData),
						       TrUserData).

dfp_read_field_def_ArbiterToServerAnnounceNoOffers(<<10,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    d_field_ArbiterToServerAnnounceNoOffers_manufacturerName(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData);
dfp_read_field_def_ArbiterToServerAnnounceNoOffers(<<18,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    d_field_ArbiterToServerAnnounceNoOffers_productName(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData);
dfp_read_field_def_ArbiterToServerAnnounceNoOffers(<<>>,
						   0, 0, F@_1, F@_2, _) ->
    #'ArbiterToServerAnnounceNoOffers'{manufacturerName =
					   F@_1,
				       productName = F@_2};
dfp_read_field_def_ArbiterToServerAnnounceNoOffers(Other,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    dg_read_field_def_ArbiterToServerAnnounceNoOffers(Other,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

dg_read_field_def_ArbiterToServerAnnounceNoOffers(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServerAnnounceNoOffers(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
dg_read_field_def_ArbiterToServerAnnounceNoOffers(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServerAnnounceNoOffers_manufacturerName(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
      18 ->
	  d_field_ArbiterToServerAnnounceNoOffers_productName(Rest,
							      0, 0, F@_1, F@_2,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServerAnnounceNoOffers(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData);
	    1 ->
		skip_64_ArbiterToServerAnnounceNoOffers(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServerAnnounceNoOffers(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
	    3 ->
		skip_group_ArbiterToServerAnnounceNoOffers(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, TrUserData);
	    5 ->
		skip_32_ArbiterToServerAnnounceNoOffers(Rest, 0, 0,
							F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServerAnnounceNoOffers(<<>>,
						  0, 0, F@_1, F@_2, _) ->
    #'ArbiterToServerAnnounceNoOffers'{manufacturerName =
					   F@_1,
				       productName = F@_2}.

d_field_ArbiterToServerAnnounceNoOffers_manufacturerName(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerAnnounceNoOffers_manufacturerName(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2,
							     TrUserData);
d_field_ArbiterToServerAnnounceNoOffers_manufacturerName(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, _, F@_2,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerAnnounceNoOffers(RestF,
						       0, 0, NewFValue, F@_2,
						       TrUserData).

d_field_ArbiterToServerAnnounceNoOffers_productName(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerAnnounceNoOffers_productName(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
d_field_ArbiterToServerAnnounceNoOffers_productName(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, _,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerAnnounceNoOffers(RestF,
						       0, 0, F@_1, NewFValue,
						       TrUserData).

skip_varint_ArbiterToServerAnnounceNoOffers(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ArbiterToServerAnnounceNoOffers(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
skip_varint_ArbiterToServerAnnounceNoOffers(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceNoOffers(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

skip_length_delimited_ArbiterToServerAnnounceNoOffers(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServerAnnounceNoOffers(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2,
							  TrUserData);
skip_length_delimited_ArbiterToServerAnnounceNoOffers(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServerAnnounceNoOffers(Rest2,
						       0, 0, F@_1, F@_2,
						       TrUserData).

skip_group_ArbiterToServerAnnounceNoOffers(Bin, FNum,
					   Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServerAnnounceNoOffers(Rest,
						       0, Z2, F@_1, F@_2,
						       TrUserData).

skip_32_ArbiterToServerAnnounceNoOffers(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceNoOffers(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

skip_64_ArbiterToServerAnnounceNoOffers(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ArbiterToServerAnnounceNoOffers(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

decode_msg_ArbiterToServerOfferSubmitted(Bin,
					 TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferSubmitted(Bin, 0,
						     0,
						     id(undefined, TrUserData),
						     id(undefined, TrUserData),
						     id(undefined, TrUserData),
						     TrUserData).

dfp_read_field_def_ArbiterToServerOfferSubmitted(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    d_field_ArbiterToServerOfferSubmitted_importerName(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData);
dfp_read_field_def_ArbiterToServerOfferSubmitted(<<18,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    d_field_ArbiterToServerOfferSubmitted_productName(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData);
dfp_read_field_def_ArbiterToServerOfferSubmitted(<<26,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    d_field_ArbiterToServerOfferSubmitted_manufacturerName(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData);
dfp_read_field_def_ArbiterToServerOfferSubmitted(<<>>,
						 0, 0, F@_1, F@_2, F@_3, _) ->
    #'ArbiterToServerOfferSubmitted'{importerName = F@_1,
				     productName = F@_2,
				     manufacturerName = F@_3};
dfp_read_field_def_ArbiterToServerOfferSubmitted(Other,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    dg_read_field_def_ArbiterToServerOfferSubmitted(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

dg_read_field_def_ArbiterToServerOfferSubmitted(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3,
						TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServerOfferSubmitted(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, TrUserData);
dg_read_field_def_ArbiterToServerOfferSubmitted(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServerOfferSubmitted_importerName(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, TrUserData);
      18 ->
	  d_field_ArbiterToServerOfferSubmitted_productName(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, TrUserData);
      26 ->
	  d_field_ArbiterToServerOfferSubmitted_manufacturerName(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServerOfferSubmitted(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    1 ->
		skip_64_ArbiterToServerOfferSubmitted(Rest, 0, 0, F@_1,
						      F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServerOfferSubmitted(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
	    3 ->
		skip_group_ArbiterToServerOfferSubmitted(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, F@_3,
							 TrUserData);
	    5 ->
		skip_32_ArbiterToServerOfferSubmitted(Rest, 0, 0, F@_1,
						      F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServerOfferSubmitted(<<>>, 0,
						0, F@_1, F@_2, F@_3, _) ->
    #'ArbiterToServerOfferSubmitted'{importerName = F@_1,
				     productName = F@_2,
				     manufacturerName = F@_3}.

d_field_ArbiterToServerOfferSubmitted_importerName(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferSubmitted_importerName(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
d_field_ArbiterToServerOfferSubmitted_importerName(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, _, F@_2, F@_3,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferSubmitted(RestF,
						     0, 0, NewFValue, F@_2,
						     F@_3, TrUserData).

d_field_ArbiterToServerOfferSubmitted_productName(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferSubmitted_productName(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
d_field_ArbiterToServerOfferSubmitted_productName(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, _, F@_3,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferSubmitted(RestF,
						     0, 0, F@_1, NewFValue,
						     F@_3, TrUserData).

d_field_ArbiterToServerOfferSubmitted_manufacturerName(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferSubmitted_manufacturerName(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   TrUserData);
d_field_ArbiterToServerOfferSubmitted_manufacturerName(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, _,
						       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferSubmitted(RestF,
						     0, 0, F@_1, F@_2,
						     NewFValue, TrUserData).

skip_varint_ArbiterToServerOfferSubmitted(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    skip_varint_ArbiterToServerOfferSubmitted(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
skip_varint_ArbiterToServerOfferSubmitted(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferSubmitted(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

skip_length_delimited_ArbiterToServerOfferSubmitted(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServerOfferSubmitted(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
skip_length_delimited_ArbiterToServerOfferSubmitted(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServerOfferSubmitted(Rest2,
						     0, 0, F@_1, F@_2, F@_3,
						     TrUserData).

skip_group_ArbiterToServerOfferSubmitted(Bin, FNum, Z2,
					 F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServerOfferSubmitted(Rest,
						     0, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

skip_32_ArbiterToServerOfferSubmitted(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferSubmitted(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

skip_64_ArbiterToServerOfferSubmitted(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferSubmitted(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

decode_msg_ArbiterToServerOfferInvalid(Bin,
				       TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferInvalid(Bin, 0,
						   0, id(undefined, TrUserData),
						   id(undefined, TrUserData),
						   id(undefined, TrUserData),
						   id(undefined, TrUserData),
						   TrUserData).

dfp_read_field_def_ArbiterToServerOfferInvalid(<<10,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    d_field_ArbiterToServerOfferInvalid_importerName(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData);
dfp_read_field_def_ArbiterToServerOfferInvalid(<<18,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    d_field_ArbiterToServerOfferInvalid_productName(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, TrUserData);
dfp_read_field_def_ArbiterToServerOfferInvalid(<<26,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    d_field_ArbiterToServerOfferInvalid_manufacturerName(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
dfp_read_field_def_ArbiterToServerOfferInvalid(<<34,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    d_field_ArbiterToServerOfferInvalid_errorMessage(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData);
dfp_read_field_def_ArbiterToServerOfferInvalid(<<>>, 0,
					       0, F@_1, F@_2, F@_3, F@_4, _) ->
    #'ArbiterToServerOfferInvalid'{importerName = F@_1,
				   productName = F@_2, manufacturerName = F@_3,
				   errorMessage = F@_4};
dfp_read_field_def_ArbiterToServerOfferInvalid(Other,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    dg_read_field_def_ArbiterToServerOfferInvalid(Other, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

dg_read_field_def_ArbiterToServerOfferInvalid(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServerOfferInvalid(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_ArbiterToServerOfferInvalid(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServerOfferInvalid_importerName(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData);
      18 ->
	  d_field_ArbiterToServerOfferInvalid_productName(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
      26 ->
	  d_field_ArbiterToServerOfferInvalid_manufacturerName(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
      34 ->
	  d_field_ArbiterToServerOfferInvalid_errorMessage(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServerOfferInvalid(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
	    1 ->
		skip_64_ArbiterToServerOfferInvalid(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServerOfferInvalid(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
	    3 ->
		skip_group_ArbiterToServerOfferInvalid(Rest, Key bsr 3,
						       0, F@_1, F@_2, F@_3,
						       F@_4, TrUserData);
	    5 ->
		skip_32_ArbiterToServerOfferInvalid(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServerOfferInvalid(<<>>, 0,
					      0, F@_1, F@_2, F@_3, F@_4, _) ->
    #'ArbiterToServerOfferInvalid'{importerName = F@_1,
				   productName = F@_2, manufacturerName = F@_3,
				   errorMessage = F@_4}.

d_field_ArbiterToServerOfferInvalid_importerName(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferInvalid_importerName(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4,
						     TrUserData);
d_field_ArbiterToServerOfferInvalid_importerName(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, F@_2, F@_3, F@_4,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferInvalid(RestF, 0,
						   0, NewFValue, F@_2, F@_3,
						   F@_4, TrUserData).

d_field_ArbiterToServerOfferInvalid_productName(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferInvalid_productName(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
d_field_ArbiterToServerOfferInvalid_productName(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3, F@_4,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferInvalid(RestF, 0,
						   0, F@_1, NewFValue, F@_3,
						   F@_4, TrUserData).

d_field_ArbiterToServerOfferInvalid_manufacturerName(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferInvalid_manufacturerName(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
d_field_ArbiterToServerOfferInvalid_manufacturerName(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, _,
						     F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferInvalid(RestF, 0,
						   0, F@_1, F@_2, NewFValue,
						   F@_4, TrUserData).

d_field_ArbiterToServerOfferInvalid_errorMessage(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferInvalid_errorMessage(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4,
						     TrUserData);
d_field_ArbiterToServerOfferInvalid_errorMessage(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, _,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferInvalid(RestF, 0,
						   0, F@_1, F@_2, F@_3,
						   NewFValue, TrUserData).

skip_varint_ArbiterToServerOfferInvalid(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    skip_varint_ArbiterToServerOfferInvalid(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_ArbiterToServerOfferInvalid(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferInvalid(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData).

skip_length_delimited_ArbiterToServerOfferInvalid(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServerOfferInvalid(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      TrUserData);
skip_length_delimited_ArbiterToServerOfferInvalid(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServerOfferInvalid(Rest2, 0,
						   0, F@_1, F@_2, F@_3, F@_4,
						   TrUserData).

skip_group_ArbiterToServerOfferInvalid(Bin, FNum, Z2,
				       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServerOfferInvalid(Rest, 0,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData).

skip_32_ArbiterToServerOfferInvalid(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferInvalid(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData).

skip_64_ArbiterToServerOfferInvalid(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferInvalid(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   TrUserData).

decode_msg_ArbiterToServerOfferWon(Bin, TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferWon(Bin, 0, 0,
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_ArbiterToServerOfferWon(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_ArbiterToServerOfferWon_importerName(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData);
dfp_read_field_def_ArbiterToServerOfferWon(<<18,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_ArbiterToServerOfferWon_productName(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
dfp_read_field_def_ArbiterToServerOfferWon(<<26,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_ArbiterToServerOfferWon_manufacturerName(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData);
dfp_read_field_def_ArbiterToServerOfferWon(<<32,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_ArbiterToServerOfferWon_quantity(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
dfp_read_field_def_ArbiterToServerOfferWon(<<45,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_ArbiterToServerOfferWon_unitPrice(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_ArbiterToServerOfferWon(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ArbiterToServerOfferWon'{importerName = F@_1,
			       productName = F@_2, manufacturerName = F@_3,
			       quantity = F@_4, unitPrice = F@_5};
dfp_read_field_def_ArbiterToServerOfferWon(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    dg_read_field_def_ArbiterToServerOfferWon(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData).

dg_read_field_def_ArbiterToServerOfferWon(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServerOfferWon(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
dg_read_field_def_ArbiterToServerOfferWon(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServerOfferWon_importerName(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, TrUserData);
      18 ->
	  d_field_ArbiterToServerOfferWon_productName(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      26 ->
	  d_field_ArbiterToServerOfferWon_manufacturerName(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   TrUserData);
      32 ->
	  d_field_ArbiterToServerOfferWon_quantity(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
      45 ->
	  d_field_ArbiterToServerOfferWon_unitPrice(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServerOfferWon(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
	    1 ->
		skip_64_ArbiterToServerOfferWon(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServerOfferWon(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData);
	    3 ->
		skip_group_ArbiterToServerOfferWon(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
	    5 ->
		skip_32_ArbiterToServerOfferWon(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServerOfferWon(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ArbiterToServerOfferWon'{importerName = F@_1,
			       productName = F@_2, manufacturerName = F@_3,
			       quantity = F@_4, unitPrice = F@_5}.

d_field_ArbiterToServerOfferWon_importerName(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferWon_importerName(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
d_field_ArbiterToServerOfferWon_importerName(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferWon(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       F@_5, TrUserData).

d_field_ArbiterToServerOfferWon_productName(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferWon_productName(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
d_field_ArbiterToServerOfferWon_productName(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferWon(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       F@_5, TrUserData).

d_field_ArbiterToServerOfferWon_manufacturerName(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferWon_manufacturerName(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
d_field_ArbiterToServerOfferWon_manufacturerName(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, _, F@_4,
						 F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferWon(RestF, 0, 0,
					       F@_1, F@_2, NewFValue, F@_4,
					       F@_5, TrUserData).

d_field_ArbiterToServerOfferWon_quantity(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferWon_quantity(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
d_field_ArbiterToServerOfferWon_quantity(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ArbiterToServerOfferWon(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       F@_5, TrUserData).

d_field_ArbiterToServerOfferWon_unitPrice(<<0:16, 128,
					    127, Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					  TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferWon(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       id(infinity, TrUserData),
					       TrUserData);
d_field_ArbiterToServerOfferWon_unitPrice(<<0:16, 128,
					    255, Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					  TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferWon(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       id('-infinity', TrUserData),
					       TrUserData);
d_field_ArbiterToServerOfferWon_unitPrice(<<_:16, 1:1,
					    _:7, _:1, 127:7, Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					  TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferWon(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       id(nan, TrUserData), TrUserData);
d_field_ArbiterToServerOfferWon_unitPrice(<<Value:32/little-float,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					  TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferWon(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       id(Value, TrUserData),
					       TrUserData).

skip_varint_ArbiterToServerOfferWon(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    skip_varint_ArbiterToServerOfferWon(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_ArbiterToServerOfferWon(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferWon(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_length_delimited_ArbiterToServerOfferWon(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServerOfferWon(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
skip_length_delimited_ArbiterToServerOfferWon(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServerOfferWon(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_group_ArbiterToServerOfferWon(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServerOfferWon(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_32_ArbiterToServerOfferWon(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferWon(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_64_ArbiterToServerOfferWon(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferWon(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

decode_msg_ArbiterToServerOfferLose(Bin, TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferLose(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_ArbiterToServerOfferLose(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    d_field_ArbiterToServerOfferLose_importerName(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
dfp_read_field_def_ArbiterToServerOfferLose(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    d_field_ArbiterToServerOfferLose_productName(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3,
						 TrUserData);
dfp_read_field_def_ArbiterToServerOfferLose(<<26,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    d_field_ArbiterToServerOfferLose_manufacturerName(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData);
dfp_read_field_def_ArbiterToServerOfferLose(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #'ArbiterToServerOfferLose'{importerName = F@_1,
				productName = F@_2, manufacturerName = F@_3};
dfp_read_field_def_ArbiterToServerOfferLose(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_ArbiterToServerOfferLose(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

dg_read_field_def_ArbiterToServerOfferLose(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServerOfferLose(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
dg_read_field_def_ArbiterToServerOfferLose(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServerOfferLose_importerName(Rest, 0,
							0, F@_1, F@_2, F@_3,
							TrUserData);
      18 ->
	  d_field_ArbiterToServerOfferLose_productName(Rest, 0, 0,
						       F@_1, F@_2, F@_3,
						       TrUserData);
      26 ->
	  d_field_ArbiterToServerOfferLose_manufacturerName(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServerOfferLose(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_ArbiterToServerOfferLose(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServerOfferLose(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		skip_group_ArbiterToServerOfferLose(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		skip_32_ArbiterToServerOfferLose(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServerOfferLose(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #'ArbiterToServerOfferLose'{importerName = F@_1,
				productName = F@_2, manufacturerName = F@_3}.

d_field_ArbiterToServerOfferLose_importerName(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferLose_importerName(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
d_field_ArbiterToServerOfferLose_importerName(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F@_2, F@_3,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferLose(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

d_field_ArbiterToServerOfferLose_productName(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferLose_productName(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
d_field_ArbiterToServerOfferLose_productName(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, _, F@_3,
					     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferLose(RestF, 0, 0,
						F@_1, NewFValue, F@_3,
						TrUserData).

d_field_ArbiterToServerOfferLose_manufacturerName(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferLose_manufacturerName(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
d_field_ArbiterToServerOfferLose_manufacturerName(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, _,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferLose(RestF, 0, 0,
						F@_1, F@_2, NewFValue,
						TrUserData).

skip_varint_ArbiterToServerOfferLose(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_ArbiterToServerOfferLose(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
skip_varint_ArbiterToServerOfferLose(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferLose(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

skip_length_delimited_ArbiterToServerOfferLose(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServerOfferLose(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
skip_length_delimited_ArbiterToServerOfferLose(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServerOfferLose(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

skip_group_ArbiterToServerOfferLose(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServerOfferLose(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

skip_32_ArbiterToServerOfferLose(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferLose(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

skip_64_ArbiterToServerOfferLose(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferLose(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

decode_msg_ArbiterToServerOfferOutdated(Bin,
					TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferOutdated(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_ArbiterToServerOfferOutdated(<<10,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    d_field_ArbiterToServerOfferOutdated_manufacturerName(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, TrUserData);
dfp_read_field_def_ArbiterToServerOfferOutdated(<<18,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    d_field_ArbiterToServerOfferOutdated_productName(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData);
dfp_read_field_def_ArbiterToServerOfferOutdated(<<26,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    d_field_ArbiterToServerOfferOutdated_importerName(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData);
dfp_read_field_def_ArbiterToServerOfferOutdated(<<>>, 0,
						0, F@_1, F@_2, F@_3, _) ->
    #'ArbiterToServerOfferOutdated'{manufacturerName = F@_1,
				    productName = F@_2, importerName = F@_3};
dfp_read_field_def_ArbiterToServerOfferOutdated(Other,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    dg_read_field_def_ArbiterToServerOfferOutdated(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData).

dg_read_field_def_ArbiterToServerOfferOutdated(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServerOfferOutdated(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
dg_read_field_def_ArbiterToServerOfferOutdated(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServerOfferOutdated_manufacturerName(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								TrUserData);
      18 ->
	  d_field_ArbiterToServerOfferOutdated_productName(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, TrUserData);
      26 ->
	  d_field_ArbiterToServerOfferOutdated_importerName(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServerOfferOutdated(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData);
	    1 ->
		skip_64_ArbiterToServerOfferOutdated(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServerOfferOutdated(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   TrUserData);
	    3 ->
		skip_group_ArbiterToServerOfferOutdated(Rest, Key bsr 3,
							0, F@_1, F@_2, F@_3,
							TrUserData);
	    5 ->
		skip_32_ArbiterToServerOfferOutdated(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServerOfferOutdated(<<>>, 0,
					       0, F@_1, F@_2, F@_3, _) ->
    #'ArbiterToServerOfferOutdated'{manufacturerName = F@_1,
				    productName = F@_2, importerName = F@_3}.

d_field_ArbiterToServerOfferOutdated_manufacturerName(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferOutdated_manufacturerName(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  TrUserData);
d_field_ArbiterToServerOfferOutdated_manufacturerName(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, _, F@_2, F@_3,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferOutdated(RestF,
						    0, 0, NewFValue, F@_2, F@_3,
						    TrUserData).

d_field_ArbiterToServerOfferOutdated_productName(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferOutdated_productName(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, TrUserData);
d_field_ArbiterToServerOfferOutdated_productName(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, _, F@_3,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferOutdated(RestF,
						    0, 0, F@_1, NewFValue, F@_3,
						    TrUserData).

d_field_ArbiterToServerOfferOutdated_importerName(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerOfferOutdated_importerName(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
d_field_ArbiterToServerOfferOutdated_importerName(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, _,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerOfferOutdated(RestF,
						    0, 0, F@_1, F@_2, NewFValue,
						    TrUserData).

skip_varint_ArbiterToServerOfferOutdated(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    skip_varint_ArbiterToServerOfferOutdated(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
skip_varint_ArbiterToServerOfferOutdated(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferOutdated(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

skip_length_delimited_ArbiterToServerOfferOutdated(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServerOfferOutdated(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
skip_length_delimited_ArbiterToServerOfferOutdated(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServerOfferOutdated(Rest2,
						    0, 0, F@_1, F@_2, F@_3,
						    TrUserData).

skip_group_ArbiterToServerOfferOutdated(Bin, FNum, Z2,
					F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServerOfferOutdated(Rest, 0,
						    Z2, F@_1, F@_2, F@_3,
						    TrUserData).

skip_32_ArbiterToServerOfferOutdated(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferOutdated(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

skip_64_ArbiterToServerOfferOutdated(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ArbiterToServerOfferOutdated(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

decode_msg_ArbiterToServerNewProduct(Bin, TrUserData) ->
    dfp_read_field_def_ArbiterToServerNewProduct(Bin, 0, 0,
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_ArbiterToServerNewProduct(<<10,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData) ->
    d_field_ArbiterToServerNewProduct_manufacturerName(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       TrUserData);
dfp_read_field_def_ArbiterToServerNewProduct(<<18,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData) ->
    d_field_ArbiterToServerNewProduct_productName(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_ArbiterToServerNewProduct(<<24,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData) ->
    d_field_ArbiterToServerNewProduct_minQuantity(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_ArbiterToServerNewProduct(<<32,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData) ->
    d_field_ArbiterToServerNewProduct_maxQuantity(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_ArbiterToServerNewProduct(<<45,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData) ->
    d_field_ArbiterToServerNewProduct_minUnitPrice(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7,
						   TrUserData);
dfp_read_field_def_ArbiterToServerNewProduct(<<48,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData) ->
    d_field_ArbiterToServerNewProduct_timeout(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, TrUserData);
dfp_read_field_def_ArbiterToServerNewProduct(<<58,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData) ->
    d_field_ArbiterToServerNewProduct_importerName(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7,
						   TrUserData);
dfp_read_field_def_ArbiterToServerNewProduct(<<>>, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, _) ->
    #'ArbiterToServerNewProduct'{manufacturerName = F@_1,
				 productName = F@_2, minQuantity = F@_3,
				 maxQuantity = F@_4, minUnitPrice = F@_5,
				 timeout = F@_6, importerName = F@_7};
dfp_read_field_def_ArbiterToServerNewProduct(Other, Z1,
					     Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					     F@_6, F@_7, TrUserData) ->
    dg_read_field_def_ArbiterToServerNewProduct(Other, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_ArbiterToServerNewProduct(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServerNewProduct(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7,
						TrUserData);
dg_read_field_def_ArbiterToServerNewProduct(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServerNewProduct_manufacturerName(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7,
							     TrUserData);
      18 ->
	  d_field_ArbiterToServerNewProduct_productName(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							TrUserData);
      24 ->
	  d_field_ArbiterToServerNewProduct_minQuantity(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							TrUserData);
      32 ->
	  d_field_ArbiterToServerNewProduct_maxQuantity(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							TrUserData);
      45 ->
	  d_field_ArbiterToServerNewProduct_minUnitPrice(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 TrUserData);
      48 ->
	  d_field_ArbiterToServerNewProduct_timeout(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7,
						    TrUserData);
      58 ->
	  d_field_ArbiterToServerNewProduct_importerName(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServerNewProduct(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_ArbiterToServerNewProduct(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServerNewProduct(Rest, 0,
								0, F@_1, F@_2,
								F@_3, F@_4,
								F@_5, F@_6,
								F@_7,
								TrUserData);
	    3 ->
		skip_group_ArbiterToServerNewProduct(Rest, Key bsr 3, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7,
						     TrUserData);
	    5 ->
		skip_32_ArbiterToServerNewProduct(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServerNewProduct(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, _) ->
    #'ArbiterToServerNewProduct'{manufacturerName = F@_1,
				 productName = F@_2, minQuantity = F@_3,
				 maxQuantity = F@_4, minUnitPrice = F@_5,
				 timeout = F@_6, importerName = F@_7}.

d_field_ArbiterToServerNewProduct_manufacturerName(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7,
						   TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerNewProduct_manufacturerName(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7,
						       TrUserData);
d_field_ArbiterToServerNewProduct_manufacturerName(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, _, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerNewProduct(RestF, 0,
						 0, NewFValue, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData).

d_field_ArbiterToServerNewProduct_productName(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerNewProduct_productName(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, TrUserData);
d_field_ArbiterToServerNewProduct_productName(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					      F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerNewProduct(RestF, 0,
						 0, F@_1, NewFValue, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData).

d_field_ArbiterToServerNewProduct_minQuantity(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerNewProduct_minQuantity(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, TrUserData);
d_field_ArbiterToServerNewProduct_minQuantity(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					      F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ArbiterToServerNewProduct(RestF, 0,
						 0, F@_1, F@_2, NewFValue, F@_4,
						 F@_5, F@_6, F@_7, TrUserData).

d_field_ArbiterToServerNewProduct_maxQuantity(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerNewProduct_maxQuantity(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, TrUserData);
d_field_ArbiterToServerNewProduct_maxQuantity(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					      F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ArbiterToServerNewProduct(RestF, 0,
						 0, F@_1, F@_2, F@_3, NewFValue,
						 F@_5, F@_6, F@_7, TrUserData).

d_field_ArbiterToServerNewProduct_minUnitPrice(<<0:16,
						 128, 127, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       _, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_ArbiterToServerNewProduct(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 id(infinity, TrUserData), F@_6,
						 F@_7, TrUserData);
d_field_ArbiterToServerNewProduct_minUnitPrice(<<0:16,
						 128, 255, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       _, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_ArbiterToServerNewProduct(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 id('-infinity', TrUserData),
						 F@_6, F@_7, TrUserData);
d_field_ArbiterToServerNewProduct_minUnitPrice(<<_:16,
						 1:1, _:7, _:1, 127:7,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       _, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_ArbiterToServerNewProduct(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 id(nan, TrUserData), F@_6,
						 F@_7, TrUserData);
d_field_ArbiterToServerNewProduct_minUnitPrice(<<Value:32/little-float,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       _, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_ArbiterToServerNewProduct(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 id(Value, TrUserData), F@_6,
						 F@_7, TrUserData).

d_field_ArbiterToServerNewProduct_timeout(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerNewProduct_timeout(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7,
					      TrUserData);
d_field_ArbiterToServerNewProduct_timeout(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  _, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ArbiterToServerNewProduct(RestF, 0,
						 0, F@_1, F@_2, F@_3, F@_4,
						 F@_5, NewFValue, F@_7,
						 TrUserData).

d_field_ArbiterToServerNewProduct_importerName(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerNewProduct_importerName(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, TrUserData);
d_field_ArbiterToServerNewProduct_importerName(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerNewProduct(RestF, 0,
						 0, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, NewFValue,
						 TrUserData).

skip_varint_ArbiterToServerNewProduct(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, TrUserData) ->
    skip_varint_ArbiterToServerNewProduct(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, TrUserData);
skip_varint_ArbiterToServerNewProduct(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_ArbiterToServerNewProduct(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_ArbiterToServerNewProduct(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServerNewProduct(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, TrUserData);
skip_length_delimited_ArbiterToServerNewProduct(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServerNewProduct(Rest2, 0,
						 0, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData).

skip_group_ArbiterToServerNewProduct(Bin, FNum, Z2,
				     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServerNewProduct(Rest, 0,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData).

skip_32_ArbiterToServerNewProduct(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData) ->
    dfp_read_field_def_ArbiterToServerNewProduct(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData).

skip_64_ArbiterToServerNewProduct(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData) ->
    dfp_read_field_def_ArbiterToServerNewProduct(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData).

decode_msg_ArbiterToServerSubscribeAccepted(Bin,
					    TrUserData) ->
    dfp_read_field_def_ArbiterToServerSubscribeAccepted(Bin,
							0, 0,
							id(undefined,
							   TrUserData),
							TrUserData).

dfp_read_field_def_ArbiterToServerSubscribeAccepted(<<10,
						      Rest/binary>>,
						    Z1, Z2, F@_1, TrUserData) ->
    d_field_ArbiterToServerSubscribeAccepted_importerName(Rest,
							  Z1, Z2, F@_1,
							  TrUserData);
dfp_read_field_def_ArbiterToServerSubscribeAccepted(<<>>,
						    0, 0, F@_1, _) ->
    #'ArbiterToServerSubscribeAccepted'{importerName =
					    F@_1};
dfp_read_field_def_ArbiterToServerSubscribeAccepted(Other,
						    Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_ArbiterToServerSubscribeAccepted(Other,
						       Z1, Z2, F@_1,
						       TrUserData).

dg_read_field_def_ArbiterToServerSubscribeAccepted(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ArbiterToServerSubscribeAccepted(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
dg_read_field_def_ArbiterToServerSubscribeAccepted(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ArbiterToServerSubscribeAccepted_importerName(Rest,
								0, 0, F@_1,
								TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ArbiterToServerSubscribeAccepted(Rest, 0, 0,
							     F@_1, TrUserData);
	    1 ->
		skip_64_ArbiterToServerSubscribeAccepted(Rest, 0, 0,
							 F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ArbiterToServerSubscribeAccepted(Rest,
								       0, 0,
								       F@_1,
								       TrUserData);
	    3 ->
		skip_group_ArbiterToServerSubscribeAccepted(Rest,
							    Key bsr 3, 0, F@_1,
							    TrUserData);
	    5 ->
		skip_32_ArbiterToServerSubscribeAccepted(Rest, 0, 0,
							 F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ArbiterToServerSubscribeAccepted(<<>>,
						   0, 0, F@_1, _) ->
    #'ArbiterToServerSubscribeAccepted'{importerName =
					    F@_1}.

d_field_ArbiterToServerSubscribeAccepted_importerName(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ArbiterToServerSubscribeAccepted_importerName(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
d_field_ArbiterToServerSubscribeAccepted_importerName(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ArbiterToServerSubscribeAccepted(RestF,
							0, 0, NewFValue,
							TrUserData).

skip_varint_ArbiterToServerSubscribeAccepted(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ArbiterToServerSubscribeAccepted(Rest, Z1,
						 Z2, F@_1, TrUserData);
skip_varint_ArbiterToServerSubscribeAccepted(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ArbiterToServerSubscribeAccepted(Rest,
							Z1, Z2, F@_1,
							TrUserData).

skip_length_delimited_ArbiterToServerSubscribeAccepted(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ArbiterToServerSubscribeAccepted(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, TrUserData);
skip_length_delimited_ArbiterToServerSubscribeAccepted(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ArbiterToServerSubscribeAccepted(Rest2,
							0, 0, F@_1, TrUserData).

skip_group_ArbiterToServerSubscribeAccepted(Bin, FNum,
					    Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ArbiterToServerSubscribeAccepted(Rest,
							0, Z2, F@_1,
							TrUserData).

skip_32_ArbiterToServerSubscribeAccepted(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ArbiterToServerSubscribeAccepted(Rest,
							Z1, Z2, F@_1,
							TrUserData).

skip_64_ArbiterToServerSubscribeAccepted(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ArbiterToServerSubscribeAccepted(Rest,
							Z1, Z2, F@_1,
							TrUserData).

decode_msg_ServerToArbiter(Bin, TrUserData) ->
    dfp_read_field_def_ServerToArbiter(Bin, 0, 0,
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ServerToArbiter(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToArbiter_offer(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_ServerToArbiter(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToArbiter_announce(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_ServerToArbiter(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerToArbiter_subscribe(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_ServerToArbiter(<<>>, 0, 0, F@_1,
				   _) ->
    #'ServerToArbiter'{message = F@_1};
dfp_read_field_def_ServerToArbiter(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_ServerToArbiter(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_ServerToArbiter(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToArbiter(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ServerToArbiter(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToArbiter_offer(Rest, 0, 0, F@_1,
					TrUserData);
      18 ->
	  d_field_ServerToArbiter_announce(Rest, 0, 0, F@_1,
					   TrUserData);
      26 ->
	  d_field_ServerToArbiter_subscribe(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToArbiter(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_ServerToArbiter(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ServerToArbiter(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_ServerToArbiter(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_ServerToArbiter(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ServerToArbiter(<<>>, 0, 0, F@_1,
				  _) ->
    #'ServerToArbiter'{message = F@_1}.

d_field_ServerToArbiter_offer(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToArbiter_offer(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToArbiter_offer(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToArbiterOffer(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToArbiter(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({offer, NewFValue}, TrUserData);
					 {offer, MVPrev} ->
					     id({offer,
						 merge_msg_ServerToArbiterOffer(MVPrev,
										NewFValue,
										TrUserData)},
						TrUserData);
					 _ -> id({offer, NewFValue}, TrUserData)
				       end,
				       TrUserData).

d_field_ServerToArbiter_announce(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToArbiter_announce(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToArbiter_announce(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToArbiterAnnounce(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToArbiter(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({announce, NewFValue},
						TrUserData);
					 {announce, MVPrev} ->
					     id({announce,
						 merge_msg_ServerToArbiterAnnounce(MVPrev,
										   NewFValue,
										   TrUserData)},
						TrUserData);
					 _ ->
					     id({announce, NewFValue},
						TrUserData)
				       end,
				       TrUserData).

d_field_ServerToArbiter_subscribe(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerToArbiter_subscribe(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_ServerToArbiter_subscribe(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ServerToArbiterSubscribe(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToArbiter(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({subscribe, NewFValue},
						TrUserData);
					 {subscribe, MVPrev} ->
					     id({subscribe,
						 merge_msg_ServerToArbiterSubscribe(MVPrev,
										    NewFValue,
										    TrUserData)},
						TrUserData);
					 _ ->
					     id({subscribe, NewFValue},
						TrUserData)
				       end,
				       TrUserData).

skip_varint_ServerToArbiter(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ServerToArbiter(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_ServerToArbiter(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerToArbiter(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_ServerToArbiter(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToArbiter(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ServerToArbiter(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToArbiter(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_ServerToArbiter(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToArbiter(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_ServerToArbiter(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_ServerToArbiter(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_ServerToArbiter(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_ServerToArbiter(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_ServerToArbiterOffer(Bin, TrUserData) ->
    dfp_read_field_def_ServerToArbiterOffer(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_ServerToArbiterOffer(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    d_field_ServerToArbiterOffer_manufacturerName(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData);
dfp_read_field_def_ServerToArbiterOffer(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    d_field_ServerToArbiterOffer_productName(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
dfp_read_field_def_ServerToArbiterOffer(<<24,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    d_field_ServerToArbiterOffer_quantity(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData);
dfp_read_field_def_ServerToArbiterOffer(<<37,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    d_field_ServerToArbiterOffer_unitPrice(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_ServerToArbiterOffer(<<42,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    d_field_ServerToArbiterOffer_importerName(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_ServerToArbiterOffer(<<>>, 0, 0,
					F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ServerToArbiterOffer'{manufacturerName = F@_1,
			    productName = F@_2, quantity = F@_3,
			    unitPrice = F@_4, importerName = F@_5};
dfp_read_field_def_ServerToArbiterOffer(Other, Z1, Z2,
					F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    dg_read_field_def_ServerToArbiterOffer(Other, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

dg_read_field_def_ServerToArbiterOffer(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToArbiterOffer(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
dg_read_field_def_ServerToArbiterOffer(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToArbiterOffer_manufacturerName(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, TrUserData);
      18 ->
	  d_field_ServerToArbiterOffer_productName(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
      24 ->
	  d_field_ServerToArbiterOffer_quantity(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5,
						TrUserData);
      37 ->
	  d_field_ServerToArbiterOffer_unitPrice(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      42 ->
	  d_field_ServerToArbiterOffer_importerName(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToArbiterOffer(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_ServerToArbiterOffer(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_ServerToArbiterOffer(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5,
							   TrUserData);
	    3 ->
		skip_group_ServerToArbiterOffer(Rest, Key bsr 3, 0,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						TrUserData);
	    5 ->
		skip_32_ServerToArbiterOffer(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_ServerToArbiterOffer(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, _) ->
    #'ServerToArbiterOffer'{manufacturerName = F@_1,
			    productName = F@_2, quantity = F@_3,
			    unitPrice = F@_4, importerName = F@_5}.

d_field_ServerToArbiterOffer_manufacturerName(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 57 ->
    d_field_ServerToArbiterOffer_manufacturerName(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
d_field_ServerToArbiterOffer_manufacturerName(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToArbiterOffer(RestF, 0, 0,
					    NewFValue, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

d_field_ServerToArbiterOffer_productName(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    d_field_ServerToArbiterOffer_productName(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
d_field_ServerToArbiterOffer_productName(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToArbiterOffer(RestF, 0, 0,
					    F@_1, NewFValue, F@_3, F@_4, F@_5,
					    TrUserData).

d_field_ServerToArbiterOffer_quantity(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData)
    when N < 57 ->
    d_field_ServerToArbiterOffer_quantity(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, TrUserData);
d_field_ServerToArbiterOffer_quantity(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ServerToArbiterOffer(RestF, 0, 0,
					    F@_1, F@_2, NewFValue, F@_4, F@_5,
					    TrUserData).

d_field_ServerToArbiterOffer_unitPrice(<<0:16, 128, 127,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
				       TrUserData) ->
    dfp_read_field_def_ServerToArbiterOffer(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3,
					    id(infinity, TrUserData), F@_5,
					    TrUserData);
d_field_ServerToArbiterOffer_unitPrice(<<0:16, 128, 255,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
				       TrUserData) ->
    dfp_read_field_def_ServerToArbiterOffer(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3,
					    id('-infinity', TrUserData), F@_5,
					    TrUserData);
d_field_ServerToArbiterOffer_unitPrice(<<_:16, 1:1, _:7,
					 _:1, 127:7, Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
				       TrUserData) ->
    dfp_read_field_def_ServerToArbiterOffer(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3,
					    id(nan, TrUserData), F@_5,
					    TrUserData);
d_field_ServerToArbiterOffer_unitPrice(<<Value:32/little-float,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
				       TrUserData) ->
    dfp_read_field_def_ServerToArbiterOffer(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3,
					    id(Value, TrUserData), F@_5,
					    TrUserData).

d_field_ServerToArbiterOffer_importerName(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_ServerToArbiterOffer_importerName(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_ServerToArbiterOffer_importerName(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToArbiterOffer(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, NewFValue,
					    TrUserData).

skip_varint_ServerToArbiterOffer(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    skip_varint_ServerToArbiterOffer(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_ServerToArbiterOffer(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    dfp_read_field_def_ServerToArbiterOffer(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

skip_length_delimited_ServerToArbiterOffer(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToArbiterOffer(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, TrUserData);
skip_length_delimited_ServerToArbiterOffer(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToArbiterOffer(Rest2, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

skip_group_ServerToArbiterOffer(Bin, FNum, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToArbiterOffer(Rest, 0, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

skip_32_ServerToArbiterOffer(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_ServerToArbiterOffer(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

skip_64_ServerToArbiterOffer(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_ServerToArbiterOffer(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

decode_msg_ServerToArbiterAnnounce(Bin, TrUserData) ->
    dfp_read_field_def_ServerToArbiterAnnounce(Bin, 0, 0,
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_ServerToArbiterAnnounce(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    d_field_ServerToArbiterAnnounce_manufacturerName(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     TrUserData);
dfp_read_field_def_ServerToArbiterAnnounce(<<18,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    d_field_ServerToArbiterAnnounce_productName(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, TrUserData);
dfp_read_field_def_ServerToArbiterAnnounce(<<24,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    d_field_ServerToArbiterAnnounce_minQuantity(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, TrUserData);
dfp_read_field_def_ServerToArbiterAnnounce(<<32,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    d_field_ServerToArbiterAnnounce_maxQuantity(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, TrUserData);
dfp_read_field_def_ServerToArbiterAnnounce(<<45,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    d_field_ServerToArbiterAnnounce_minUnitPrice(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData);
dfp_read_field_def_ServerToArbiterAnnounce(<<48,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    d_field_ServerToArbiterAnnounce_timout(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData);
dfp_read_field_def_ServerToArbiterAnnounce(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   _) ->
    #'ServerToArbiterAnnounce'{manufacturerName = F@_1,
			       productName = F@_2, minQuantity = F@_3,
			       maxQuantity = F@_4, minUnitPrice = F@_5,
			       timout = F@_6};
dfp_read_field_def_ServerToArbiterAnnounce(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    dg_read_field_def_ServerToArbiterAnnounce(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData).

dg_read_field_def_ServerToArbiterAnnounce(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToArbiterAnnounce(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_ServerToArbiterAnnounce(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToArbiterAnnounce_manufacturerName(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, TrUserData);
      18 ->
	  d_field_ServerToArbiterAnnounce_productName(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, TrUserData);
      24 ->
	  d_field_ServerToArbiterAnnounce_minQuantity(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, TrUserData);
      32 ->
	  d_field_ServerToArbiterAnnounce_maxQuantity(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, TrUserData);
      45 ->
	  d_field_ServerToArbiterAnnounce_minUnitPrice(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, TrUserData);
      48 ->
	  d_field_ServerToArbiterAnnounce_timout(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToArbiterAnnounce(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, TrUserData);
	    1 ->
		skip_64_ServerToArbiterAnnounce(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6,
						TrUserData);
	    2 ->
		skip_length_delimited_ServerToArbiterAnnounce(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, TrUserData);
	    3 ->
		skip_group_ServerToArbiterAnnounce(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, TrUserData);
	    5 ->
		skip_32_ServerToArbiterAnnounce(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6,
						TrUserData)
	  end
    end;
dg_read_field_def_ServerToArbiterAnnounce(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  _) ->
    #'ServerToArbiterAnnounce'{manufacturerName = F@_1,
			       productName = F@_2, minQuantity = F@_3,
			       maxQuantity = F@_4, minUnitPrice = F@_5,
			       timout = F@_6}.

d_field_ServerToArbiterAnnounce_manufacturerName(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ServerToArbiterAnnounce_manufacturerName(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData);
d_field_ServerToArbiterAnnounce_manufacturerName(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToArbiterAnnounce(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       F@_5, F@_6, TrUserData).

d_field_ServerToArbiterAnnounce_productName(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ServerToArbiterAnnounce_productName(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, TrUserData);
d_field_ServerToArbiterAnnounce_productName(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					    F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToArbiterAnnounce(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       F@_5, F@_6, TrUserData).

d_field_ServerToArbiterAnnounce_minQuantity(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ServerToArbiterAnnounce_minQuantity(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, TrUserData);
d_field_ServerToArbiterAnnounce_minQuantity(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					    F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ServerToArbiterAnnounce(RestF, 0, 0,
					       F@_1, F@_2, NewFValue, F@_4,
					       F@_5, F@_6, TrUserData).

d_field_ServerToArbiterAnnounce_maxQuantity(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_ServerToArbiterAnnounce_maxQuantity(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, TrUserData);
d_field_ServerToArbiterAnnounce_maxQuantity(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					    F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ServerToArbiterAnnounce(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       F@_5, F@_6, TrUserData).

d_field_ServerToArbiterAnnounce_minUnitPrice(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, TrUserData) ->
    dfp_read_field_def_ServerToArbiterAnnounce(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       id(infinity, TrUserData), F@_6,
					       TrUserData);
d_field_ServerToArbiterAnnounce_minUnitPrice(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, TrUserData) ->
    dfp_read_field_def_ServerToArbiterAnnounce(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       id('-infinity', TrUserData),
					       F@_6, TrUserData);
d_field_ServerToArbiterAnnounce_minUnitPrice(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, TrUserData) ->
    dfp_read_field_def_ServerToArbiterAnnounce(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       id(nan, TrUserData), F@_6,
					       TrUserData);
d_field_ServerToArbiterAnnounce_minUnitPrice(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, TrUserData) ->
    dfp_read_field_def_ServerToArbiterAnnounce(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       id(Value, TrUserData), F@_6,
					       TrUserData).

d_field_ServerToArbiterAnnounce_timout(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData)
    when N < 57 ->
    d_field_ServerToArbiterAnnounce_timout(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
d_field_ServerToArbiterAnnounce_timout(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ServerToArbiterAnnounce(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       NewFValue, TrUserData).

skip_varint_ServerToArbiterAnnounce(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    skip_varint_ServerToArbiterAnnounce(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData);
skip_varint_ServerToArbiterAnnounce(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    dfp_read_field_def_ServerToArbiterAnnounce(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

skip_length_delimited_ServerToArbiterAnnounce(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToArbiterAnnounce(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  TrUserData);
skip_length_delimited_ServerToArbiterAnnounce(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToArbiterAnnounce(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

skip_group_ServerToArbiterAnnounce(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToArbiterAnnounce(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

skip_32_ServerToArbiterAnnounce(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    dfp_read_field_def_ServerToArbiterAnnounce(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

skip_64_ServerToArbiterAnnounce(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    dfp_read_field_def_ServerToArbiterAnnounce(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

decode_msg_ServerToArbiterSubscribe(Bin, TrUserData) ->
    dfp_read_field_def_ServerToArbiterSubscribe(Bin, 0, 0,
						id(undefined, TrUserData),
						id([], TrUserData), TrUserData).

dfp_read_field_def_ServerToArbiterSubscribe(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ServerToArbiterSubscribe_importerName(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_ServerToArbiterSubscribe(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ServerToArbiterSubscribe_manufacturerNames(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
dfp_read_field_def_ServerToArbiterSubscribe(<<>>, 0, 0,
					    F@_1, R1, TrUserData) ->
    #'ServerToArbiterSubscribe'{importerName = F@_1,
				manufacturerNames =
				    lists_reverse(R1, TrUserData)};
dfp_read_field_def_ServerToArbiterSubscribe(Other, Z1,
					    Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_ServerToArbiterSubscribe(Other, Z1,
					       Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_ServerToArbiterSubscribe(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerToArbiterSubscribe(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
dg_read_field_def_ServerToArbiterSubscribe(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerToArbiterSubscribe_importerName(Rest, 0,
							0, F@_1, F@_2,
							TrUserData);
      18 ->
	  d_field_ServerToArbiterSubscribe_manufacturerNames(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerToArbiterSubscribe(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    1 ->
		skip_64_ServerToArbiterSubscribe(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    2 ->
		skip_length_delimited_ServerToArbiterSubscribe(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    3 ->
		skip_group_ServerToArbiterSubscribe(Rest, Key bsr 3, 0,
						    F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_ServerToArbiterSubscribe(Rest, 0, 0, F@_1, F@_2,
						 TrUserData)
	  end
    end;
dg_read_field_def_ServerToArbiterSubscribe(<<>>, 0, 0,
					   F@_1, R1, TrUserData) ->
    #'ServerToArbiterSubscribe'{importerName = F@_1,
				manufacturerNames =
				    lists_reverse(R1, TrUserData)}.

d_field_ServerToArbiterSubscribe_importerName(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ServerToArbiterSubscribe_importerName(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
d_field_ServerToArbiterSubscribe_importerName(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToArbiterSubscribe(RestF, 0, 0,
						NewFValue, F@_2, TrUserData).

d_field_ServerToArbiterSubscribe_manufacturerNames(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    d_field_ServerToArbiterSubscribe_manufacturerNames(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
d_field_ServerToArbiterSubscribe_manufacturerNames(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, Prev,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerToArbiterSubscribe(RestF, 0, 0,
						F@_1,
						cons(NewFValue, Prev,
						     TrUserData),
						TrUserData).

skip_varint_ServerToArbiterSubscribe(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ServerToArbiterSubscribe(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
skip_varint_ServerToArbiterSubscribe(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToArbiterSubscribe(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_ServerToArbiterSubscribe(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerToArbiterSubscribe(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
skip_length_delimited_ServerToArbiterSubscribe(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerToArbiterSubscribe(Rest2, 0, 0,
						F@_1, F@_2, TrUserData).

skip_group_ServerToArbiterSubscribe(Bin, FNum, Z2, F@_1,
				    F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerToArbiterSubscribe(Rest, 0, Z2,
						F@_1, F@_2, TrUserData).

skip_32_ServerToArbiterSubscribe(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToArbiterSubscribe(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_64_ServerToArbiterSubscribe(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ServerToArbiterSubscribe(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

d_enum_ClientType(0) -> 'IMPORTER';
d_enum_ClientType(1) -> 'MANUFACTURER';
d_enum_ClientType(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ClientToServer' ->
	  merge_msg_ClientToServer(Prev, New, TrUserData);
      'ClientToServerLogin' ->
	  merge_msg_ClientToServerLogin(Prev, New, TrUserData);
      'ClientToServerRegister' ->
	  merge_msg_ClientToServerRegister(Prev, New, TrUserData);
      'ServerToClientAuth' ->
	  merge_msg_ServerToClientAuth(Prev, New, TrUserData);
      'ManufacturerToServer' ->
	  merge_msg_ManufacturerToServer(Prev, New, TrUserData);
      'ManufacturerToServerAnnounce' ->
	  merge_msg_ManufacturerToServerAnnounce(Prev, New,
						 TrUserData);
      'ServerToManufacturer' ->
	  merge_msg_ServerToManufacturer(Prev, New, TrUserData);
      'ServerToManufacturerAnnounced' ->
	  merge_msg_ServerToManufacturerAnnounced(Prev, New,
						  TrUserData);
      'ServerToManufacturerInvalid' ->
	  merge_msg_ServerToManufacturerInvalid(Prev, New,
						TrUserData);
      'ServerToManufacturerNoOffers' ->
	  merge_msg_ServerToManufacturerNoOffers(Prev, New,
						 TrUserData);
      'ServerToManufacturerSold' ->
	  merge_msg_ServerToManufacturerSold(Prev, New,
					     TrUserData);
      'ImporterToServer' ->
	  merge_msg_ImporterToServer(Prev, New, TrUserData);
      'ImporterToServerSubscribe' ->
	  merge_msg_ImporterToServerSubscribe(Prev, New,
					      TrUserData);
      'ImporterToServerOffer' ->
	  merge_msg_ImporterToServerOffer(Prev, New, TrUserData);
      'ServerToImporter' ->
	  merge_msg_ServerToImporter(Prev, New, TrUserData);
      'ServerToImporterOfferSubmitted' ->
	  merge_msg_ServerToImporterOfferSubmitted(Prev, New,
						   TrUserData);
      'ServerToImporterOfferInvalid' ->
	  merge_msg_ServerToImporterOfferInvalid(Prev, New,
						 TrUserData);
      'ServerToImporterOfferWon' ->
	  merge_msg_ServerToImporterOfferWon(Prev, New,
					     TrUserData);
      'ServerToImporterOfferLose' ->
	  merge_msg_ServerToImporterOfferLose(Prev, New,
					      TrUserData);
      'ServerToImporterOfferOutdated' ->
	  merge_msg_ServerToImporterOfferOutdated(Prev, New,
						  TrUserData);
      'ServerToImporterNewProduct' ->
	  merge_msg_ServerToImporterNewProduct(Prev, New,
					       TrUserData);
      'ServerToImporterSubscribeAccepted' ->
	  merge_msg_ServerToImporterSubscribeAccepted(Prev, New,
						      TrUserData);
      'ArbiterToServer' ->
	  merge_msg_ArbiterToServer(Prev, New, TrUserData);
      'ArbiterToServerAnnounceAccepted' ->
	  merge_msg_ArbiterToServerAnnounceAccepted(Prev, New,
						    TrUserData);
      'ArbiterToServerAnnounceInvalid' ->
	  merge_msg_ArbiterToServerAnnounceInvalid(Prev, New,
						   TrUserData);
      'ArbiterToServerAnnounceSold' ->
	  merge_msg_ArbiterToServerAnnounceSold(Prev, New,
						TrUserData);
      'ArbiterToServerAnnounceNoOffers' ->
	  merge_msg_ArbiterToServerAnnounceNoOffers(Prev, New,
						    TrUserData);
      'ArbiterToServerOfferSubmitted' ->
	  merge_msg_ArbiterToServerOfferSubmitted(Prev, New,
						  TrUserData);
      'ArbiterToServerOfferInvalid' ->
	  merge_msg_ArbiterToServerOfferInvalid(Prev, New,
						TrUserData);
      'ArbiterToServerOfferWon' ->
	  merge_msg_ArbiterToServerOfferWon(Prev, New,
					    TrUserData);
      'ArbiterToServerOfferLose' ->
	  merge_msg_ArbiterToServerOfferLose(Prev, New,
					     TrUserData);
      'ArbiterToServerOfferOutdated' ->
	  merge_msg_ArbiterToServerOfferOutdated(Prev, New,
						 TrUserData);
      'ArbiterToServerNewProduct' ->
	  merge_msg_ArbiterToServerNewProduct(Prev, New,
					      TrUserData);
      'ArbiterToServerSubscribeAccepted' ->
	  merge_msg_ArbiterToServerSubscribeAccepted(Prev, New,
						     TrUserData);
      'ServerToArbiter' ->
	  merge_msg_ServerToArbiter(Prev, New, TrUserData);
      'ServerToArbiterOffer' ->
	  merge_msg_ServerToArbiterOffer(Prev, New, TrUserData);
      'ServerToArbiterAnnounce' ->
	  merge_msg_ServerToArbiterAnnounce(Prev, New,
					    TrUserData);
      'ServerToArbiterSubscribe' ->
	  merge_msg_ServerToArbiterSubscribe(Prev, New,
					     TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_ClientToServer/3}).
merge_msg_ClientToServer(#'ClientToServer'{message =
					       PFmessage},
			 #'ClientToServer'{message = NFmessage}, TrUserData) ->
    #'ClientToServer'{message =
			  case {PFmessage, NFmessage} of
			    {{login, OPFmessage}, {login, ONFmessage}} ->
				{login,
				 merge_msg_ClientToServerLogin(OPFmessage,
							       ONFmessage,
							       TrUserData)};
			    {{register, OPFmessage}, {register, ONFmessage}} ->
				{register,
				 merge_msg_ClientToServerRegister(OPFmessage,
								  ONFmessage,
								  TrUserData)};
			    {_, undefined} -> PFmessage;
			    _ -> NFmessage
			  end}.

-compile({nowarn_unused_function,merge_msg_ClientToServerLogin/3}).
merge_msg_ClientToServerLogin(#'ClientToServerLogin'{},
			      #'ClientToServerLogin'{username = NFusername,
						     password = NFpassword,
						     clientType = NFclientType},
			      _) ->
    #'ClientToServerLogin'{username = NFusername,
			   password = NFpassword, clientType = NFclientType}.

-compile({nowarn_unused_function,merge_msg_ClientToServerRegister/3}).
merge_msg_ClientToServerRegister(#'ClientToServerRegister'{},
				 #'ClientToServerRegister'{username =
							       NFusername,
							   password =
							       NFpassword},
				 _) ->
    #'ClientToServerRegister'{username = NFusername,
			      password = NFpassword}.

-compile({nowarn_unused_function,merge_msg_ServerToClientAuth/3}).
merge_msg_ServerToClientAuth(#'ServerToClientAuth'{clientType
						       = PFclientType,
						   errorMessage =
						       PFerrorMessage},
			     #'ServerToClientAuth'{ok = NFok,
						   clientType = NFclientType,
						   errorMessage =
						       NFerrorMessage},
			     _) ->
    #'ServerToClientAuth'{ok = NFok,
			  clientType =
			      if NFclientType =:= undefined -> PFclientType;
				 true -> NFclientType
			      end,
			  errorMessage =
			      if NFerrorMessage =:= undefined -> PFerrorMessage;
				 true -> NFerrorMessage
			      end}.

-compile({nowarn_unused_function,merge_msg_ManufacturerToServer/3}).
merge_msg_ManufacturerToServer(#'ManufacturerToServer'{message
							   = PFmessage},
			       #'ManufacturerToServer'{message = NFmessage},
			       TrUserData) ->
    #'ManufacturerToServer'{message =
				case {PFmessage, NFmessage} of
				  {{announce, OPFmessage},
				   {announce, ONFmessage}} ->
				      {announce,
				       merge_msg_ManufacturerToServerAnnounce(OPFmessage,
									      ONFmessage,
									      TrUserData)};
				  {_, undefined} -> PFmessage;
				  _ -> NFmessage
				end}.

-compile({nowarn_unused_function,merge_msg_ManufacturerToServerAnnounce/3}).
merge_msg_ManufacturerToServerAnnounce(#'ManufacturerToServerAnnounce'{},
				       #'ManufacturerToServerAnnounce'{productName
									   =
									   NFproductName,
								       minQuantity
									   =
									   NFminQuantity,
								       maxQuantity
									   =
									   NFmaxQuantity,
								       minUnitPrice
									   =
									   NFminUnitPrice,
								       timeout =
									   NFtimeout,
								       manufacturerName
									   =
									   NFmanufacturerName},
				       _) ->
    #'ManufacturerToServerAnnounce'{productName =
					NFproductName,
				    minQuantity = NFminQuantity,
				    maxQuantity = NFmaxQuantity,
				    minUnitPrice = NFminUnitPrice,
				    timeout = NFtimeout,
				    manufacturerName = NFmanufacturerName}.

-compile({nowarn_unused_function,merge_msg_ServerToManufacturer/3}).
merge_msg_ServerToManufacturer(#'ServerToManufacturer'{message
							   = PFmessage},
			       #'ServerToManufacturer'{message = NFmessage},
			       TrUserData) ->
    #'ServerToManufacturer'{message =
				case {PFmessage, NFmessage} of
				  {{announced, OPFmessage},
				   {announced, ONFmessage}} ->
				      {announced,
				       merge_msg_ServerToManufacturerAnnounced(OPFmessage,
									       ONFmessage,
									       TrUserData)};
				  {{invalid, OPFmessage},
				   {invalid, ONFmessage}} ->
				      {invalid,
				       merge_msg_ServerToManufacturerInvalid(OPFmessage,
									     ONFmessage,
									     TrUserData)};
				  {{noOffers, OPFmessage},
				   {noOffers, ONFmessage}} ->
				      {noOffers,
				       merge_msg_ServerToManufacturerNoOffers(OPFmessage,
									      ONFmessage,
									      TrUserData)};
				  {{sold, OPFmessage}, {sold, ONFmessage}} ->
				      {sold,
				       merge_msg_ServerToManufacturerSold(OPFmessage,
									  ONFmessage,
									  TrUserData)};
				  {_, undefined} -> PFmessage;
				  _ -> NFmessage
				end}.

-compile({nowarn_unused_function,merge_msg_ServerToManufacturerAnnounced/3}).
merge_msg_ServerToManufacturerAnnounced(#'ServerToManufacturerAnnounced'{},
					#'ServerToManufacturerAnnounced'{productName
									     =
									     NFproductName},
					_) ->
    #'ServerToManufacturerAnnounced'{productName =
					 NFproductName}.

-compile({nowarn_unused_function,merge_msg_ServerToManufacturerInvalid/3}).
merge_msg_ServerToManufacturerInvalid(#'ServerToManufacturerInvalid'{errorMessage
									 =
									 PFerrorMessage},
				      #'ServerToManufacturerInvalid'{errorMessage
									 =
									 NFerrorMessage,
								     productName
									 =
									 NFproductName},
				      _) ->
    #'ServerToManufacturerInvalid'{errorMessage =
				       if NFerrorMessage =:= undefined ->
					      PFerrorMessage;
					  true -> NFerrorMessage
				       end,
				   productName = NFproductName}.

-compile({nowarn_unused_function,merge_msg_ServerToManufacturerNoOffers/3}).
merge_msg_ServerToManufacturerNoOffers(#'ServerToManufacturerNoOffers'{},
				       #'ServerToManufacturerNoOffers'{productName
									   =
									   NFproductName},
				       _) ->
    #'ServerToManufacturerNoOffers'{productName =
					NFproductName}.

-compile({nowarn_unused_function,merge_msg_ServerToManufacturerSold/3}).
merge_msg_ServerToManufacturerSold(#'ServerToManufacturerSold'{},
				   #'ServerToManufacturerSold'{productName =
								   NFproductName,
							       quantity =
								   NFquantity,
							       unitPrice =
								   NFunitPrice},
				   _) ->
    #'ServerToManufacturerSold'{productName = NFproductName,
				quantity = NFquantity, unitPrice = NFunitPrice}.

-compile({nowarn_unused_function,merge_msg_ImporterToServer/3}).
merge_msg_ImporterToServer(#'ImporterToServer'{message =
						   PFmessage},
			   #'ImporterToServer'{message = NFmessage},
			   TrUserData) ->
    #'ImporterToServer'{message =
			    case {PFmessage, NFmessage} of
			      {{subscribe, OPFmessage},
			       {subscribe, ONFmessage}} ->
				  {subscribe,
				   merge_msg_ImporterToServerSubscribe(OPFmessage,
								       ONFmessage,
								       TrUserData)};
			      {{offer, OPFmessage}, {offer, ONFmessage}} ->
				  {offer,
				   merge_msg_ImporterToServerOffer(OPFmessage,
								   ONFmessage,
								   TrUserData)};
			      {_, undefined} -> PFmessage;
			      _ -> NFmessage
			    end}.

-compile({nowarn_unused_function,merge_msg_ImporterToServerSubscribe/3}).
merge_msg_ImporterToServerSubscribe(#'ImporterToServerSubscribe'{manufacturerNames
								     =
								     PFmanufacturerNames},
				    #'ImporterToServerSubscribe'{manufacturerNames
								     =
								     NFmanufacturerNames,
								 importerName =
								     NFimporterName},
				    TrUserData) ->
    #'ImporterToServerSubscribe'{manufacturerNames =
				     if PFmanufacturerNames /= undefined,
					NFmanufacturerNames /= undefined ->
					    'erlang_++'(PFmanufacturerNames,
							NFmanufacturerNames,
							TrUserData);
					PFmanufacturerNames == undefined ->
					    NFmanufacturerNames;
					NFmanufacturerNames == undefined ->
					    PFmanufacturerNames
				     end,
				 importerName = NFimporterName}.

-compile({nowarn_unused_function,merge_msg_ImporterToServerOffer/3}).
merge_msg_ImporterToServerOffer(#'ImporterToServerOffer'{},
				#'ImporterToServerOffer'{manufacturerName =
							     NFmanufacturerName,
							 productName =
							     NFproductName,
							 quantity = NFquantity,
							 unitPrice =
							     NFunitPrice,
							 importerName =
							     NFimporterName},
				_) ->
    #'ImporterToServerOffer'{manufacturerName =
				 NFmanufacturerName,
			     productName = NFproductName, quantity = NFquantity,
			     unitPrice = NFunitPrice,
			     importerName = NFimporterName}.

-compile({nowarn_unused_function,merge_msg_ServerToImporter/3}).
merge_msg_ServerToImporter(#'ServerToImporter'{message =
						   PFmessage},
			   #'ServerToImporter'{message = NFmessage},
			   TrUserData) ->
    #'ServerToImporter'{message =
			    case {PFmessage, NFmessage} of
			      {{offerSubmitted, OPFmessage},
			       {offerSubmitted, ONFmessage}} ->
				  {offerSubmitted,
				   merge_msg_ServerToImporterOfferSubmitted(OPFmessage,
									    ONFmessage,
									    TrUserData)};
			      {{offerInvalid, OPFmessage},
			       {offerInvalid, ONFmessage}} ->
				  {offerInvalid,
				   merge_msg_ServerToImporterOfferInvalid(OPFmessage,
									  ONFmessage,
									  TrUserData)};
			      {{offerWon, OPFmessage},
			       {offerWon, ONFmessage}} ->
				  {offerWon,
				   merge_msg_ServerToImporterOfferWon(OPFmessage,
								      ONFmessage,
								      TrUserData)};
			      {{offerLose, OPFmessage},
			       {offerLose, ONFmessage}} ->
				  {offerLose,
				   merge_msg_ServerToImporterOfferLose(OPFmessage,
								       ONFmessage,
								       TrUserData)};
			      {{offerOutdated, OPFmessage},
			       {offerOutdated, ONFmessage}} ->
				  {offerOutdated,
				   merge_msg_ServerToImporterOfferOutdated(OPFmessage,
									   ONFmessage,
									   TrUserData)};
			      {{newProduct, OPFmessage},
			       {newProduct, ONFmessage}} ->
				  {newProduct,
				   merge_msg_ServerToImporterNewProduct(OPFmessage,
									ONFmessage,
									TrUserData)};
			      {{subsAccepted, OPFmessage},
			       {subsAccepted, ONFmessage}} ->
				  {subsAccepted,
				   merge_msg_ServerToImporterSubscribeAccepted(OPFmessage,
									       ONFmessage,
									       TrUserData)};
			      {_, undefined} -> PFmessage;
			      _ -> NFmessage
			    end}.

-compile({nowarn_unused_function,merge_msg_ServerToImporterOfferSubmitted/3}).
merge_msg_ServerToImporterOfferSubmitted(#'ServerToImporterOfferSubmitted'{},
					 #'ServerToImporterOfferSubmitted'{manufacturerName
									       =
									       NFmanufacturerName,
									   productName
									       =
									       NFproductName},
					 _) ->
    #'ServerToImporterOfferSubmitted'{manufacturerName =
					  NFmanufacturerName,
				      productName = NFproductName}.

-compile({nowarn_unused_function,merge_msg_ServerToImporterOfferInvalid/3}).
merge_msg_ServerToImporterOfferInvalid(#'ServerToImporterOfferInvalid'{},
				       #'ServerToImporterOfferInvalid'{manufacturerName
									   =
									   NFmanufacturerName,
								       productName
									   =
									   NFproductName,
								       errorMessage
									   =
									   NFerrorMessage},
				       _) ->
    #'ServerToImporterOfferInvalid'{manufacturerName =
					NFmanufacturerName,
				    productName = NFproductName,
				    errorMessage = NFerrorMessage}.

-compile({nowarn_unused_function,merge_msg_ServerToImporterOfferWon/3}).
merge_msg_ServerToImporterOfferWon(#'ServerToImporterOfferWon'{},
				   #'ServerToImporterOfferWon'{manufacturerName
								   =
								   NFmanufacturerName,
							       productName =
								   NFproductName,
							       quantity =
								   NFquantity,
							       unitPrice =
								   NFunitPrice},
				   _) ->
    #'ServerToImporterOfferWon'{manufacturerName =
				    NFmanufacturerName,
				productName = NFproductName,
				quantity = NFquantity, unitPrice = NFunitPrice}.

-compile({nowarn_unused_function,merge_msg_ServerToImporterOfferLose/3}).
merge_msg_ServerToImporterOfferLose(#'ServerToImporterOfferLose'{},
				    #'ServerToImporterOfferLose'{manufacturerName
								     =
								     NFmanufacturerName,
								 productName =
								     NFproductName},
				    _) ->
    #'ServerToImporterOfferLose'{manufacturerName =
				     NFmanufacturerName,
				 productName = NFproductName}.

-compile({nowarn_unused_function,merge_msg_ServerToImporterOfferOutdated/3}).
merge_msg_ServerToImporterOfferOutdated(#'ServerToImporterOfferOutdated'{},
					#'ServerToImporterOfferOutdated'{manufacturerName
									     =
									     NFmanufacturerName,
									 productName
									     =
									     NFproductName},
					_) ->
    #'ServerToImporterOfferOutdated'{manufacturerName =
					 NFmanufacturerName,
				     productName = NFproductName}.

-compile({nowarn_unused_function,merge_msg_ServerToImporterNewProduct/3}).
merge_msg_ServerToImporterNewProduct(#'ServerToImporterNewProduct'{},
				     #'ServerToImporterNewProduct'{productName =
								       NFproductName,
								   minQuantity =
								       NFminQuantity,
								   maxQuantity =
								       NFmaxQuantity,
								   minUnitPrice
								       =
								       NFminUnitPrice,
								   timeout =
								       NFtimeout,
								   manufacturerName
								       =
								       NFmanufacturerName},
				     _) ->
    #'ServerToImporterNewProduct'{productName =
				      NFproductName,
				  minQuantity = NFminQuantity,
				  maxQuantity = NFmaxQuantity,
				  minUnitPrice = NFminUnitPrice,
				  timeout = NFtimeout,
				  manufacturerName = NFmanufacturerName}.

-compile({nowarn_unused_function,merge_msg_ServerToImporterSubscribeAccepted/3}).
merge_msg_ServerToImporterSubscribeAccepted(_Prev, New,
					    _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_ArbiterToServer/3}).
merge_msg_ArbiterToServer(#'ArbiterToServer'{message =
						 PFmessage},
			  #'ArbiterToServer'{message = NFmessage},
			  TrUserData) ->
    #'ArbiterToServer'{message =
			   case {PFmessage, NFmessage} of
			     {{accepted, OPFmessage}, {accepted, ONFmessage}} ->
				 {accepted,
				  merge_msg_ArbiterToServerAnnounceAccepted(OPFmessage,
									    ONFmessage,
									    TrUserData)};
			     {{announceInvalid, OPFmessage},
			      {announceInvalid, ONFmessage}} ->
				 {announceInvalid,
				  merge_msg_ArbiterToServerAnnounceInvalid(OPFmessage,
									   ONFmessage,
									   TrUserData)};
			     {{sold, OPFmessage}, {sold, ONFmessage}} ->
				 {sold,
				  merge_msg_ArbiterToServerAnnounceSold(OPFmessage,
									ONFmessage,
									TrUserData)};
			     {{noOffers, OPFmessage}, {noOffers, ONFmessage}} ->
				 {noOffers,
				  merge_msg_ArbiterToServerAnnounceNoOffers(OPFmessage,
									    ONFmessage,
									    TrUserData)};
			     {{submitted, OPFmessage},
			      {submitted, ONFmessage}} ->
				 {submitted,
				  merge_msg_ArbiterToServerOfferSubmitted(OPFmessage,
									  ONFmessage,
									  TrUserData)};
			     {{offerInvalid, OPFmessage},
			      {offerInvalid, ONFmessage}} ->
				 {offerInvalid,
				  merge_msg_ArbiterToServerOfferInvalid(OPFmessage,
									ONFmessage,
									TrUserData)};
			     {{won, OPFmessage}, {won, ONFmessage}} ->
				 {won,
				  merge_msg_ArbiterToServerOfferWon(OPFmessage,
								    ONFmessage,
								    TrUserData)};
			     {{lose, OPFmessage}, {lose, ONFmessage}} ->
				 {lose,
				  merge_msg_ArbiterToServerOfferLose(OPFmessage,
								     ONFmessage,
								     TrUserData)};
			     {{offerOutdated, OPFmessage},
			      {offerOutdated, ONFmessage}} ->
				 {offerOutdated,
				  merge_msg_ArbiterToServerOfferOutdated(OPFmessage,
									 ONFmessage,
									 TrUserData)};
			     {{product, OPFmessage}, {product, ONFmessage}} ->
				 {product,
				  merge_msg_ArbiterToServerNewProduct(OPFmessage,
								      ONFmessage,
								      TrUserData)};
			     {{subsAccepted, OPFmessage},
			      {subsAccepted, ONFmessage}} ->
				 {subsAccepted,
				  merge_msg_ArbiterToServerSubscribeAccepted(OPFmessage,
									     ONFmessage,
									     TrUserData)};
			     {_, undefined} -> PFmessage;
			     _ -> NFmessage
			   end}.

-compile({nowarn_unused_function,merge_msg_ArbiterToServerAnnounceAccepted/3}).
merge_msg_ArbiterToServerAnnounceAccepted(#'ArbiterToServerAnnounceAccepted'{},
					  #'ArbiterToServerAnnounceAccepted'{manufacturerName
										 =
										 NFmanufacturerName,
									     productName
										 =
										 NFproductName},
					  _) ->
    #'ArbiterToServerAnnounceAccepted'{manufacturerName =
					   NFmanufacturerName,
				       productName = NFproductName}.

-compile({nowarn_unused_function,merge_msg_ArbiterToServerAnnounceInvalid/3}).
merge_msg_ArbiterToServerAnnounceInvalid(#'ArbiterToServerAnnounceInvalid'{},
					 #'ArbiterToServerAnnounceInvalid'{manufacturerName
									       =
									       NFmanufacturerName,
									   productName
									       =
									       NFproductName,
									   errorMessage
									       =
									       NFerrorMessage},
					 _) ->
    #'ArbiterToServerAnnounceInvalid'{manufacturerName =
					  NFmanufacturerName,
				      productName = NFproductName,
				      errorMessage = NFerrorMessage}.

-compile({nowarn_unused_function,merge_msg_ArbiterToServerAnnounceSold/3}).
merge_msg_ArbiterToServerAnnounceSold(#'ArbiterToServerAnnounceSold'{},
				      #'ArbiterToServerAnnounceSold'{manufacturerName
									 =
									 NFmanufacturerName,
								     productName
									 =
									 NFproductName,
								     quantity =
									 NFquantity,
								     unitPrice =
									 NFunitPrice},
				      _) ->
    #'ArbiterToServerAnnounceSold'{manufacturerName =
				       NFmanufacturerName,
				   productName = NFproductName,
				   quantity = NFquantity,
				   unitPrice = NFunitPrice}.

-compile({nowarn_unused_function,merge_msg_ArbiterToServerAnnounceNoOffers/3}).
merge_msg_ArbiterToServerAnnounceNoOffers(#'ArbiterToServerAnnounceNoOffers'{},
					  #'ArbiterToServerAnnounceNoOffers'{manufacturerName
										 =
										 NFmanufacturerName,
									     productName
										 =
										 NFproductName},
					  _) ->
    #'ArbiterToServerAnnounceNoOffers'{manufacturerName =
					   NFmanufacturerName,
				       productName = NFproductName}.

-compile({nowarn_unused_function,merge_msg_ArbiterToServerOfferSubmitted/3}).
merge_msg_ArbiterToServerOfferSubmitted(#'ArbiterToServerOfferSubmitted'{},
					#'ArbiterToServerOfferSubmitted'{importerName
									     =
									     NFimporterName,
									 productName
									     =
									     NFproductName,
									 manufacturerName
									     =
									     NFmanufacturerName},
					_) ->
    #'ArbiterToServerOfferSubmitted'{importerName =
					 NFimporterName,
				     productName = NFproductName,
				     manufacturerName = NFmanufacturerName}.

-compile({nowarn_unused_function,merge_msg_ArbiterToServerOfferInvalid/3}).
merge_msg_ArbiterToServerOfferInvalid(#'ArbiterToServerOfferInvalid'{},
				      #'ArbiterToServerOfferInvalid'{importerName
									 =
									 NFimporterName,
								     productName
									 =
									 NFproductName,
								     manufacturerName
									 =
									 NFmanufacturerName,
								     errorMessage
									 =
									 NFerrorMessage},
				      _) ->
    #'ArbiterToServerOfferInvalid'{importerName =
				       NFimporterName,
				   productName = NFproductName,
				   manufacturerName = NFmanufacturerName,
				   errorMessage = NFerrorMessage}.

-compile({nowarn_unused_function,merge_msg_ArbiterToServerOfferWon/3}).
merge_msg_ArbiterToServerOfferWon(#'ArbiterToServerOfferWon'{},
				  #'ArbiterToServerOfferWon'{importerName =
								 NFimporterName,
							     productName =
								 NFproductName,
							     manufacturerName =
								 NFmanufacturerName,
							     quantity =
								 NFquantity,
							     unitPrice =
								 NFunitPrice},
				  _) ->
    #'ArbiterToServerOfferWon'{importerName =
				   NFimporterName,
			       productName = NFproductName,
			       manufacturerName = NFmanufacturerName,
			       quantity = NFquantity, unitPrice = NFunitPrice}.

-compile({nowarn_unused_function,merge_msg_ArbiterToServerOfferLose/3}).
merge_msg_ArbiterToServerOfferLose(#'ArbiterToServerOfferLose'{},
				   #'ArbiterToServerOfferLose'{importerName =
								   NFimporterName,
							       productName =
								   NFproductName,
							       manufacturerName
								   =
								   NFmanufacturerName},
				   _) ->
    #'ArbiterToServerOfferLose'{importerName =
				    NFimporterName,
				productName = NFproductName,
				manufacturerName = NFmanufacturerName}.

-compile({nowarn_unused_function,merge_msg_ArbiterToServerOfferOutdated/3}).
merge_msg_ArbiterToServerOfferOutdated(#'ArbiterToServerOfferOutdated'{},
				       #'ArbiterToServerOfferOutdated'{manufacturerName
									   =
									   NFmanufacturerName,
								       productName
									   =
									   NFproductName,
								       importerName
									   =
									   NFimporterName},
				       _) ->
    #'ArbiterToServerOfferOutdated'{manufacturerName =
					NFmanufacturerName,
				    productName = NFproductName,
				    importerName = NFimporterName}.

-compile({nowarn_unused_function,merge_msg_ArbiterToServerNewProduct/3}).
merge_msg_ArbiterToServerNewProduct(#'ArbiterToServerNewProduct'{},
				    #'ArbiterToServerNewProduct'{manufacturerName
								     =
								     NFmanufacturerName,
								 productName =
								     NFproductName,
								 minQuantity =
								     NFminQuantity,
								 maxQuantity =
								     NFmaxQuantity,
								 minUnitPrice =
								     NFminUnitPrice,
								 timeout =
								     NFtimeout,
								 importerName =
								     NFimporterName},
				    _) ->
    #'ArbiterToServerNewProduct'{manufacturerName =
				     NFmanufacturerName,
				 productName = NFproductName,
				 minQuantity = NFminQuantity,
				 maxQuantity = NFmaxQuantity,
				 minUnitPrice = NFminUnitPrice,
				 timeout = NFtimeout,
				 importerName = NFimporterName}.

-compile({nowarn_unused_function,merge_msg_ArbiterToServerSubscribeAccepted/3}).
merge_msg_ArbiterToServerSubscribeAccepted(#'ArbiterToServerSubscribeAccepted'{},
					   #'ArbiterToServerSubscribeAccepted'{importerName
										   =
										   NFimporterName},
					   _) ->
    #'ArbiterToServerSubscribeAccepted'{importerName =
					    NFimporterName}.

-compile({nowarn_unused_function,merge_msg_ServerToArbiter/3}).
merge_msg_ServerToArbiter(#'ServerToArbiter'{message =
						 PFmessage},
			  #'ServerToArbiter'{message = NFmessage},
			  TrUserData) ->
    #'ServerToArbiter'{message =
			   case {PFmessage, NFmessage} of
			     {{offer, OPFmessage}, {offer, ONFmessage}} ->
				 {offer,
				  merge_msg_ServerToArbiterOffer(OPFmessage,
								 ONFmessage,
								 TrUserData)};
			     {{announce, OPFmessage}, {announce, ONFmessage}} ->
				 {announce,
				  merge_msg_ServerToArbiterAnnounce(OPFmessage,
								    ONFmessage,
								    TrUserData)};
			     {{subscribe, OPFmessage},
			      {subscribe, ONFmessage}} ->
				 {subscribe,
				  merge_msg_ServerToArbiterSubscribe(OPFmessage,
								     ONFmessage,
								     TrUserData)};
			     {_, undefined} -> PFmessage;
			     _ -> NFmessage
			   end}.

-compile({nowarn_unused_function,merge_msg_ServerToArbiterOffer/3}).
merge_msg_ServerToArbiterOffer(#'ServerToArbiterOffer'{},
			       #'ServerToArbiterOffer'{manufacturerName =
							   NFmanufacturerName,
						       productName =
							   NFproductName,
						       quantity = NFquantity,
						       unitPrice = NFunitPrice,
						       importerName =
							   NFimporterName},
			       _) ->
    #'ServerToArbiterOffer'{manufacturerName =
				NFmanufacturerName,
			    productName = NFproductName, quantity = NFquantity,
			    unitPrice = NFunitPrice,
			    importerName = NFimporterName}.

-compile({nowarn_unused_function,merge_msg_ServerToArbiterAnnounce/3}).
merge_msg_ServerToArbiterAnnounce(#'ServerToArbiterAnnounce'{},
				  #'ServerToArbiterAnnounce'{manufacturerName =
								 NFmanufacturerName,
							     productName =
								 NFproductName,
							     minQuantity =
								 NFminQuantity,
							     maxQuantity =
								 NFmaxQuantity,
							     minUnitPrice =
								 NFminUnitPrice,
							     timout = NFtimout},
				  _) ->
    #'ServerToArbiterAnnounce'{manufacturerName =
				   NFmanufacturerName,
			       productName = NFproductName,
			       minQuantity = NFminQuantity,
			       maxQuantity = NFmaxQuantity,
			       minUnitPrice = NFminUnitPrice,
			       timout = NFtimout}.

-compile({nowarn_unused_function,merge_msg_ServerToArbiterSubscribe/3}).
merge_msg_ServerToArbiterSubscribe(#'ServerToArbiterSubscribe'{manufacturerNames
								   =
								   PFmanufacturerNames},
				   #'ServerToArbiterSubscribe'{importerName =
								   NFimporterName,
							       manufacturerNames
								   =
								   NFmanufacturerNames},
				   TrUserData) ->
    #'ServerToArbiterSubscribe'{importerName =
				    NFimporterName,
				manufacturerNames =
				    if PFmanufacturerNames /= undefined,
				       NFmanufacturerNames /= undefined ->
					   'erlang_++'(PFmanufacturerNames,
						       NFmanufacturerNames,
						       TrUserData);
				       PFmanufacturerNames == undefined ->
					   NFmanufacturerNames;
				       NFmanufacturerNames == undefined ->
					   PFmanufacturerNames
				    end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ClientToServer' ->
	  v_msg_ClientToServer(Msg, [MsgName], TrUserData);
      'ClientToServerLogin' ->
	  v_msg_ClientToServerLogin(Msg, [MsgName], TrUserData);
      'ClientToServerRegister' ->
	  v_msg_ClientToServerRegister(Msg, [MsgName],
				       TrUserData);
      'ServerToClientAuth' ->
	  v_msg_ServerToClientAuth(Msg, [MsgName], TrUserData);
      'ManufacturerToServer' ->
	  v_msg_ManufacturerToServer(Msg, [MsgName], TrUserData);
      'ManufacturerToServerAnnounce' ->
	  v_msg_ManufacturerToServerAnnounce(Msg, [MsgName],
					     TrUserData);
      'ServerToManufacturer' ->
	  v_msg_ServerToManufacturer(Msg, [MsgName], TrUserData);
      'ServerToManufacturerAnnounced' ->
	  v_msg_ServerToManufacturerAnnounced(Msg, [MsgName],
					      TrUserData);
      'ServerToManufacturerInvalid' ->
	  v_msg_ServerToManufacturerInvalid(Msg, [MsgName],
					    TrUserData);
      'ServerToManufacturerNoOffers' ->
	  v_msg_ServerToManufacturerNoOffers(Msg, [MsgName],
					     TrUserData);
      'ServerToManufacturerSold' ->
	  v_msg_ServerToManufacturerSold(Msg, [MsgName],
					 TrUserData);
      'ImporterToServer' ->
	  v_msg_ImporterToServer(Msg, [MsgName], TrUserData);
      'ImporterToServerSubscribe' ->
	  v_msg_ImporterToServerSubscribe(Msg, [MsgName],
					  TrUserData);
      'ImporterToServerOffer' ->
	  v_msg_ImporterToServerOffer(Msg, [MsgName], TrUserData);
      'ServerToImporter' ->
	  v_msg_ServerToImporter(Msg, [MsgName], TrUserData);
      'ServerToImporterOfferSubmitted' ->
	  v_msg_ServerToImporterOfferSubmitted(Msg, [MsgName],
					       TrUserData);
      'ServerToImporterOfferInvalid' ->
	  v_msg_ServerToImporterOfferInvalid(Msg, [MsgName],
					     TrUserData);
      'ServerToImporterOfferWon' ->
	  v_msg_ServerToImporterOfferWon(Msg, [MsgName],
					 TrUserData);
      'ServerToImporterOfferLose' ->
	  v_msg_ServerToImporterOfferLose(Msg, [MsgName],
					  TrUserData);
      'ServerToImporterOfferOutdated' ->
	  v_msg_ServerToImporterOfferOutdated(Msg, [MsgName],
					      TrUserData);
      'ServerToImporterNewProduct' ->
	  v_msg_ServerToImporterNewProduct(Msg, [MsgName],
					   TrUserData);
      'ServerToImporterSubscribeAccepted' ->
	  v_msg_ServerToImporterSubscribeAccepted(Msg, [MsgName],
						  TrUserData);
      'ArbiterToServer' ->
	  v_msg_ArbiterToServer(Msg, [MsgName], TrUserData);
      'ArbiterToServerAnnounceAccepted' ->
	  v_msg_ArbiterToServerAnnounceAccepted(Msg, [MsgName],
						TrUserData);
      'ArbiterToServerAnnounceInvalid' ->
	  v_msg_ArbiterToServerAnnounceInvalid(Msg, [MsgName],
					       TrUserData);
      'ArbiterToServerAnnounceSold' ->
	  v_msg_ArbiterToServerAnnounceSold(Msg, [MsgName],
					    TrUserData);
      'ArbiterToServerAnnounceNoOffers' ->
	  v_msg_ArbiterToServerAnnounceNoOffers(Msg, [MsgName],
						TrUserData);
      'ArbiterToServerOfferSubmitted' ->
	  v_msg_ArbiterToServerOfferSubmitted(Msg, [MsgName],
					      TrUserData);
      'ArbiterToServerOfferInvalid' ->
	  v_msg_ArbiterToServerOfferInvalid(Msg, [MsgName],
					    TrUserData);
      'ArbiterToServerOfferWon' ->
	  v_msg_ArbiterToServerOfferWon(Msg, [MsgName],
					TrUserData);
      'ArbiterToServerOfferLose' ->
	  v_msg_ArbiterToServerOfferLose(Msg, [MsgName],
					 TrUserData);
      'ArbiterToServerOfferOutdated' ->
	  v_msg_ArbiterToServerOfferOutdated(Msg, [MsgName],
					     TrUserData);
      'ArbiterToServerNewProduct' ->
	  v_msg_ArbiterToServerNewProduct(Msg, [MsgName],
					  TrUserData);
      'ArbiterToServerSubscribeAccepted' ->
	  v_msg_ArbiterToServerSubscribeAccepted(Msg, [MsgName],
						 TrUserData);
      'ServerToArbiter' ->
	  v_msg_ServerToArbiter(Msg, [MsgName], TrUserData);
      'ServerToArbiterOffer' ->
	  v_msg_ServerToArbiterOffer(Msg, [MsgName], TrUserData);
      'ServerToArbiterAnnounce' ->
	  v_msg_ServerToArbiterAnnounce(Msg, [MsgName],
					TrUserData);
      'ServerToArbiterSubscribe' ->
	  v_msg_ServerToArbiterSubscribe(Msg, [MsgName],
					 TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_ClientToServer/3}).
-dialyzer({nowarn_function,v_msg_ClientToServer/3}).
v_msg_ClientToServer(#'ClientToServer'{message = F1},
		     Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {login, OF1} ->
	  v_msg_ClientToServerLogin(OF1, [login, message | Path],
				    TrUserData);
      {register, OF1} ->
	  v_msg_ClientToServerRegister(OF1,
				       [register, message | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [message | Path])
    end,
    ok;
v_msg_ClientToServer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ClientToServer'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ClientToServerLogin/3}).
-dialyzer({nowarn_function,v_msg_ClientToServerLogin/3}).
v_msg_ClientToServerLogin(#'ClientToServerLogin'{username
						     = F1,
						 password = F2,
						 clientType = F3},
			  Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    v_enum_ClientType(F3, [clientType | Path], TrUserData),
    ok;
v_msg_ClientToServerLogin(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ClientToServerLogin'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ClientToServerRegister/3}).
-dialyzer({nowarn_function,v_msg_ClientToServerRegister/3}).
v_msg_ClientToServerRegister(#'ClientToServerRegister'{username
							   = F1,
						       password = F2},
			     Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    ok;
v_msg_ClientToServerRegister(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ClientToServerRegister'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToClientAuth/3}).
-dialyzer({nowarn_function,v_msg_ServerToClientAuth/3}).
v_msg_ServerToClientAuth(#'ServerToClientAuth'{ok = F1,
					       clientType = F2,
					       errorMessage = F3},
			 Path, TrUserData) ->
    v_type_bool(F1, [ok | Path], TrUserData),
    if F2 == undefined -> ok;
       true ->
	   v_enum_ClientType(F2, [clientType | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [errorMessage | Path], TrUserData)
    end,
    ok;
v_msg_ServerToClientAuth(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ServerToClientAuth'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ManufacturerToServer/3}).
-dialyzer({nowarn_function,v_msg_ManufacturerToServer/3}).
v_msg_ManufacturerToServer(#'ManufacturerToServer'{message
						       = F1},
			   Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {announce, OF1} ->
	  v_msg_ManufacturerToServerAnnounce(OF1,
					     [announce, message | Path],
					     TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [message | Path])
    end,
    ok;
v_msg_ManufacturerToServer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ManufacturerToServer'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ManufacturerToServerAnnounce/3}).
-dialyzer({nowarn_function,v_msg_ManufacturerToServerAnnounce/3}).
v_msg_ManufacturerToServerAnnounce(#'ManufacturerToServerAnnounce'{productName
								       = F1,
								   minQuantity =
								       F2,
								   maxQuantity =
								       F3,
								   minUnitPrice
								       = F4,
								   timeout = F5,
								   manufacturerName
								       = F6},
				   Path, TrUserData) ->
    v_type_string(F1, [productName | Path], TrUserData),
    v_type_int32(F2, [minQuantity | Path], TrUserData),
    v_type_int32(F3, [maxQuantity | Path], TrUserData),
    v_type_float(F4, [minUnitPrice | Path], TrUserData),
    v_type_int32(F5, [timeout | Path], TrUserData),
    v_type_string(F6, [manufacturerName | Path],
		  TrUserData),
    ok;
v_msg_ManufacturerToServerAnnounce(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   'ManufacturerToServerAnnounce'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToManufacturer/3}).
-dialyzer({nowarn_function,v_msg_ServerToManufacturer/3}).
v_msg_ServerToManufacturer(#'ServerToManufacturer'{message
						       = F1},
			   Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {announced, OF1} ->
	  v_msg_ServerToManufacturerAnnounced(OF1,
					      [announced, message | Path],
					      TrUserData);
      {invalid, OF1} ->
	  v_msg_ServerToManufacturerInvalid(OF1,
					    [invalid, message | Path],
					    TrUserData);
      {noOffers, OF1} ->
	  v_msg_ServerToManufacturerNoOffers(OF1,
					     [noOffers, message | Path],
					     TrUserData);
      {sold, OF1} ->
	  v_msg_ServerToManufacturerSold(OF1,
					 [sold, message | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [message | Path])
    end,
    ok;
v_msg_ServerToManufacturer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ServerToManufacturer'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ServerToManufacturerAnnounced/3}).
-dialyzer({nowarn_function,v_msg_ServerToManufacturerAnnounced/3}).
v_msg_ServerToManufacturerAnnounced(#'ServerToManufacturerAnnounced'{productName
									 = F1},
				    Path, TrUserData) ->
    v_type_string(F1, [productName | Path], TrUserData), ok;
v_msg_ServerToManufacturerAnnounced(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToManufacturerAnnounced'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToManufacturerInvalid/3}).
-dialyzer({nowarn_function,v_msg_ServerToManufacturerInvalid/3}).
v_msg_ServerToManufacturerInvalid(#'ServerToManufacturerInvalid'{errorMessage
								     = F1,
								 productName =
								     F2},
				  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [errorMessage | Path], TrUserData)
    end,
    v_type_string(F2, [productName | Path], TrUserData),
    ok;
v_msg_ServerToManufacturerInvalid(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToManufacturerInvalid'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToManufacturerNoOffers/3}).
-dialyzer({nowarn_function,v_msg_ServerToManufacturerNoOffers/3}).
v_msg_ServerToManufacturerNoOffers(#'ServerToManufacturerNoOffers'{productName
								       = F1},
				   Path, TrUserData) ->
    v_type_string(F1, [productName | Path], TrUserData), ok;
v_msg_ServerToManufacturerNoOffers(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToManufacturerNoOffers'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToManufacturerSold/3}).
-dialyzer({nowarn_function,v_msg_ServerToManufacturerSold/3}).
v_msg_ServerToManufacturerSold(#'ServerToManufacturerSold'{productName
							       = F1,
							   quantity = F2,
							   unitPrice = F3},
			       Path, TrUserData) ->
    v_type_string(F1, [productName | Path], TrUserData),
    v_type_int32(F2, [quantity | Path], TrUserData),
    v_type_float(F3, [unitPrice | Path], TrUserData),
    ok;
v_msg_ServerToManufacturerSold(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToManufacturerSold'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ImporterToServer/3}).
-dialyzer({nowarn_function,v_msg_ImporterToServer/3}).
v_msg_ImporterToServer(#'ImporterToServer'{message =
					       F1},
		       Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {subscribe, OF1} ->
	  v_msg_ImporterToServerSubscribe(OF1,
					  [subscribe, message | Path],
					  TrUserData);
      {offer, OF1} ->
	  v_msg_ImporterToServerOffer(OF1,
				      [offer, message | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [message | Path])
    end,
    ok;
v_msg_ImporterToServer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ImporterToServer'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ImporterToServerSubscribe/3}).
-dialyzer({nowarn_function,v_msg_ImporterToServerSubscribe/3}).
v_msg_ImporterToServerSubscribe(#'ImporterToServerSubscribe'{manufacturerNames
								 = F1,
							     importerName = F2},
				Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [manufacturerNames | Path],
			      TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [manufacturerNames | Path])
    end,
    v_type_string(F2, [importerName | Path], TrUserData),
    ok;
v_msg_ImporterToServerSubscribe(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ImporterToServerSubscribe'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ImporterToServerOffer/3}).
-dialyzer({nowarn_function,v_msg_ImporterToServerOffer/3}).
v_msg_ImporterToServerOffer(#'ImporterToServerOffer'{manufacturerName
							 = F1,
						     productName = F2,
						     quantity = F3,
						     unitPrice = F4,
						     importerName = F5},
			    Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_int32(F3, [quantity | Path], TrUserData),
    v_type_float(F4, [unitPrice | Path], TrUserData),
    v_type_string(F5, [importerName | Path], TrUserData),
    ok;
v_msg_ImporterToServerOffer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ImporterToServerOffer'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToImporter/3}).
-dialyzer({nowarn_function,v_msg_ServerToImporter/3}).
v_msg_ServerToImporter(#'ServerToImporter'{message =
					       F1},
		       Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {offerSubmitted, OF1} ->
	  v_msg_ServerToImporterOfferSubmitted(OF1,
					       [offerSubmitted, message | Path],
					       TrUserData);
      {offerInvalid, OF1} ->
	  v_msg_ServerToImporterOfferInvalid(OF1,
					     [offerInvalid, message | Path],
					     TrUserData);
      {offerWon, OF1} ->
	  v_msg_ServerToImporterOfferWon(OF1,
					 [offerWon, message | Path],
					 TrUserData);
      {offerLose, OF1} ->
	  v_msg_ServerToImporterOfferLose(OF1,
					  [offerLose, message | Path],
					  TrUserData);
      {offerOutdated, OF1} ->
	  v_msg_ServerToImporterOfferOutdated(OF1,
					      [offerOutdated, message | Path],
					      TrUserData);
      {newProduct, OF1} ->
	  v_msg_ServerToImporterNewProduct(OF1,
					   [newProduct, message | Path],
					   TrUserData);
      {subsAccepted, OF1} ->
	  v_msg_ServerToImporterSubscribeAccepted(OF1,
						  [subsAccepted, message
						   | Path],
						  TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [message | Path])
    end,
    ok;
v_msg_ServerToImporter(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ServerToImporter'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ServerToImporterOfferSubmitted/3}).
-dialyzer({nowarn_function,v_msg_ServerToImporterOfferSubmitted/3}).
v_msg_ServerToImporterOfferSubmitted(#'ServerToImporterOfferSubmitted'{manufacturerName
									   = F1,
								       productName
									   =
									   F2},
				     Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    ok;
v_msg_ServerToImporterOfferSubmitted(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToImporterOfferSubmitted'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToImporterOfferInvalid/3}).
-dialyzer({nowarn_function,v_msg_ServerToImporterOfferInvalid/3}).
v_msg_ServerToImporterOfferInvalid(#'ServerToImporterOfferInvalid'{manufacturerName
								       = F1,
								   productName =
								       F2,
								   errorMessage
								       = F3},
				   Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_string(F3, [errorMessage | Path], TrUserData),
    ok;
v_msg_ServerToImporterOfferInvalid(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToImporterOfferInvalid'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToImporterOfferWon/3}).
-dialyzer({nowarn_function,v_msg_ServerToImporterOfferWon/3}).
v_msg_ServerToImporterOfferWon(#'ServerToImporterOfferWon'{manufacturerName
							       = F1,
							   productName = F2,
							   quantity = F3,
							   unitPrice = F4},
			       Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_int32(F3, [quantity | Path], TrUserData),
    v_type_float(F4, [unitPrice | Path], TrUserData),
    ok;
v_msg_ServerToImporterOfferWon(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToImporterOfferWon'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToImporterOfferLose/3}).
-dialyzer({nowarn_function,v_msg_ServerToImporterOfferLose/3}).
v_msg_ServerToImporterOfferLose(#'ServerToImporterOfferLose'{manufacturerName
								 = F1,
							     productName = F2},
				Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    ok;
v_msg_ServerToImporterOfferLose(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToImporterOfferLose'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToImporterOfferOutdated/3}).
-dialyzer({nowarn_function,v_msg_ServerToImporterOfferOutdated/3}).
v_msg_ServerToImporterOfferOutdated(#'ServerToImporterOfferOutdated'{manufacturerName
									 = F1,
								     productName
									 = F2},
				    Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    ok;
v_msg_ServerToImporterOfferOutdated(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToImporterOfferOutdated'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToImporterNewProduct/3}).
-dialyzer({nowarn_function,v_msg_ServerToImporterNewProduct/3}).
v_msg_ServerToImporterNewProduct(#'ServerToImporterNewProduct'{productName
								   = F1,
							       minQuantity = F2,
							       maxQuantity = F3,
							       minUnitPrice =
								   F4,
							       timeout = F5,
							       manufacturerName
								   = F6},
				 Path, TrUserData) ->
    v_type_string(F1, [productName | Path], TrUserData),
    v_type_int32(F2, [minQuantity | Path], TrUserData),
    v_type_int32(F3, [maxQuantity | Path], TrUserData),
    v_type_float(F4, [minUnitPrice | Path], TrUserData),
    v_type_int32(F5, [timeout | Path], TrUserData),
    v_type_string(F6, [manufacturerName | Path],
		  TrUserData),
    ok;
v_msg_ServerToImporterNewProduct(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToImporterNewProduct'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToImporterSubscribeAccepted/3}).
-dialyzer({nowarn_function,v_msg_ServerToImporterSubscribeAccepted/3}).
v_msg_ServerToImporterSubscribeAccepted(#'ServerToImporterSubscribeAccepted'{},
					_Path, _) ->
    ok;
v_msg_ServerToImporterSubscribeAccepted(X, Path,
					_TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToImporterSubscribeAccepted'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServer/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServer/3}).
v_msg_ArbiterToServer(#'ArbiterToServer'{message = F1},
		      Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {accepted, OF1} ->
	  v_msg_ArbiterToServerAnnounceAccepted(OF1,
						[accepted, message | Path],
						TrUserData);
      {announceInvalid, OF1} ->
	  v_msg_ArbiterToServerAnnounceInvalid(OF1,
					       [announceInvalid, message
						| Path],
					       TrUserData);
      {sold, OF1} ->
	  v_msg_ArbiterToServerAnnounceSold(OF1,
					    [sold, message | Path], TrUserData);
      {noOffers, OF1} ->
	  v_msg_ArbiterToServerAnnounceNoOffers(OF1,
						[noOffers, message | Path],
						TrUserData);
      {submitted, OF1} ->
	  v_msg_ArbiterToServerOfferSubmitted(OF1,
					      [submitted, message | Path],
					      TrUserData);
      {offerInvalid, OF1} ->
	  v_msg_ArbiterToServerOfferInvalid(OF1,
					    [offerInvalid, message | Path],
					    TrUserData);
      {won, OF1} ->
	  v_msg_ArbiterToServerOfferWon(OF1,
					[won, message | Path], TrUserData);
      {lose, OF1} ->
	  v_msg_ArbiterToServerOfferLose(OF1,
					 [lose, message | Path], TrUserData);
      {offerOutdated, OF1} ->
	  v_msg_ArbiterToServerOfferOutdated(OF1,
					     [offerOutdated, message | Path],
					     TrUserData);
      {product, OF1} ->
	  v_msg_ArbiterToServerNewProduct(OF1,
					  [product, message | Path],
					  TrUserData);
      {subsAccepted, OF1} ->
	  v_msg_ArbiterToServerSubscribeAccepted(OF1,
						 [subsAccepted, message | Path],
						 TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [message | Path])
    end,
    ok;
v_msg_ArbiterToServer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ArbiterToServer'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServerAnnounceAccepted/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServerAnnounceAccepted/3}).
v_msg_ArbiterToServerAnnounceAccepted(#'ArbiterToServerAnnounceAccepted'{manufacturerName
									     =
									     F1,
									 productName
									     =
									     F2},
				      Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    ok;
v_msg_ArbiterToServerAnnounceAccepted(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ArbiterToServerAnnounceAccepted'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServerAnnounceInvalid/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServerAnnounceInvalid/3}).
v_msg_ArbiterToServerAnnounceInvalid(#'ArbiterToServerAnnounceInvalid'{manufacturerName
									   = F1,
								       productName
									   = F2,
								       errorMessage
									   =
									   F3},
				     Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_string(F3, [errorMessage | Path], TrUserData),
    ok;
v_msg_ArbiterToServerAnnounceInvalid(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ArbiterToServerAnnounceInvalid'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServerAnnounceSold/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServerAnnounceSold/3}).
v_msg_ArbiterToServerAnnounceSold(#'ArbiterToServerAnnounceSold'{manufacturerName
								     = F1,
								 productName =
								     F2,
								 quantity = F3,
								 unitPrice =
								     F4},
				  Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_int32(F3, [quantity | Path], TrUserData),
    v_type_float(F4, [unitPrice | Path], TrUserData),
    ok;
v_msg_ArbiterToServerAnnounceSold(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   'ArbiterToServerAnnounceSold'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServerAnnounceNoOffers/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServerAnnounceNoOffers/3}).
v_msg_ArbiterToServerAnnounceNoOffers(#'ArbiterToServerAnnounceNoOffers'{manufacturerName
									     =
									     F1,
									 productName
									     =
									     F2},
				      Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    ok;
v_msg_ArbiterToServerAnnounceNoOffers(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ArbiterToServerAnnounceNoOffers'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServerOfferSubmitted/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServerOfferSubmitted/3}).
v_msg_ArbiterToServerOfferSubmitted(#'ArbiterToServerOfferSubmitted'{importerName
									 = F1,
								     productName
									 = F2,
								     manufacturerName
									 = F3},
				    Path, TrUserData) ->
    v_type_string(F1, [importerName | Path], TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_string(F3, [manufacturerName | Path],
		  TrUserData),
    ok;
v_msg_ArbiterToServerOfferSubmitted(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ArbiterToServerOfferSubmitted'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServerOfferInvalid/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServerOfferInvalid/3}).
v_msg_ArbiterToServerOfferInvalid(#'ArbiterToServerOfferInvalid'{importerName
								     = F1,
								 productName =
								     F2,
								 manufacturerName
								     = F3,
								 errorMessage =
								     F4},
				  Path, TrUserData) ->
    v_type_string(F1, [importerName | Path], TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_string(F3, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F4, [errorMessage | Path], TrUserData),
    ok;
v_msg_ArbiterToServerOfferInvalid(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   'ArbiterToServerOfferInvalid'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServerOfferWon/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServerOfferWon/3}).
v_msg_ArbiterToServerOfferWon(#'ArbiterToServerOfferWon'{importerName
							     = F1,
							 productName = F2,
							 manufacturerName = F3,
							 quantity = F4,
							 unitPrice = F5},
			      Path, TrUserData) ->
    v_type_string(F1, [importerName | Path], TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_string(F3, [manufacturerName | Path],
		  TrUserData),
    v_type_int32(F4, [quantity | Path], TrUserData),
    v_type_float(F5, [unitPrice | Path], TrUserData),
    ok;
v_msg_ArbiterToServerOfferWon(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ArbiterToServerOfferWon'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServerOfferLose/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServerOfferLose/3}).
v_msg_ArbiterToServerOfferLose(#'ArbiterToServerOfferLose'{importerName
							       = F1,
							   productName = F2,
							   manufacturerName =
							       F3},
			       Path, TrUserData) ->
    v_type_string(F1, [importerName | Path], TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_string(F3, [manufacturerName | Path],
		  TrUserData),
    ok;
v_msg_ArbiterToServerOfferLose(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ArbiterToServerOfferLose'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServerOfferOutdated/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServerOfferOutdated/3}).
v_msg_ArbiterToServerOfferOutdated(#'ArbiterToServerOfferOutdated'{manufacturerName
								       = F1,
								   productName =
								       F2,
								   importerName
								       = F3},
				   Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_string(F3, [importerName | Path], TrUserData),
    ok;
v_msg_ArbiterToServerOfferOutdated(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   'ArbiterToServerOfferOutdated'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServerNewProduct/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServerNewProduct/3}).
v_msg_ArbiterToServerNewProduct(#'ArbiterToServerNewProduct'{manufacturerName
								 = F1,
							     productName = F2,
							     minQuantity = F3,
							     maxQuantity = F4,
							     minUnitPrice = F5,
							     timeout = F6,
							     importerName = F7},
				Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_int32(F3, [minQuantity | Path], TrUserData),
    v_type_int32(F4, [maxQuantity | Path], TrUserData),
    v_type_float(F5, [minUnitPrice | Path], TrUserData),
    v_type_int32(F6, [timeout | Path], TrUserData),
    v_type_string(F7, [importerName | Path], TrUserData),
    ok;
v_msg_ArbiterToServerNewProduct(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ArbiterToServerNewProduct'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ArbiterToServerSubscribeAccepted/3}).
-dialyzer({nowarn_function,v_msg_ArbiterToServerSubscribeAccepted/3}).
v_msg_ArbiterToServerSubscribeAccepted(#'ArbiterToServerSubscribeAccepted'{importerName
									       =
									       F1},
				       Path, TrUserData) ->
    v_type_string(F1, [importerName | Path], TrUserData),
    ok;
v_msg_ArbiterToServerSubscribeAccepted(X, Path,
				       _TrUserData) ->
    mk_type_error({expected_msg,
		   'ArbiterToServerSubscribeAccepted'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToArbiter/3}).
-dialyzer({nowarn_function,v_msg_ServerToArbiter/3}).
v_msg_ServerToArbiter(#'ServerToArbiter'{message = F1},
		      Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {offer, OF1} ->
	  v_msg_ServerToArbiterOffer(OF1, [offer, message | Path],
				     TrUserData);
      {announce, OF1} ->
	  v_msg_ServerToArbiterAnnounce(OF1,
					[announce, message | Path], TrUserData);
      {subscribe, OF1} ->
	  v_msg_ServerToArbiterSubscribe(OF1,
					 [subscribe, message | Path],
					 TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [message | Path])
    end,
    ok;
v_msg_ServerToArbiter(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ServerToArbiter'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ServerToArbiterOffer/3}).
-dialyzer({nowarn_function,v_msg_ServerToArbiterOffer/3}).
v_msg_ServerToArbiterOffer(#'ServerToArbiterOffer'{manufacturerName
						       = F1,
						   productName = F2,
						   quantity = F3,
						   unitPrice = F4,
						   importerName = F5},
			   Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_int32(F3, [quantity | Path], TrUserData),
    v_type_float(F4, [unitPrice | Path], TrUserData),
    v_type_string(F5, [importerName | Path], TrUserData),
    ok;
v_msg_ServerToArbiterOffer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ServerToArbiterOffer'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ServerToArbiterAnnounce/3}).
-dialyzer({nowarn_function,v_msg_ServerToArbiterAnnounce/3}).
v_msg_ServerToArbiterAnnounce(#'ServerToArbiterAnnounce'{manufacturerName
							     = F1,
							 productName = F2,
							 minQuantity = F3,
							 maxQuantity = F4,
							 minUnitPrice = F5,
							 timout = F6},
			      Path, TrUserData) ->
    v_type_string(F1, [manufacturerName | Path],
		  TrUserData),
    v_type_string(F2, [productName | Path], TrUserData),
    v_type_int32(F3, [minQuantity | Path], TrUserData),
    v_type_int32(F4, [maxQuantity | Path], TrUserData),
    v_type_float(F5, [minUnitPrice | Path], TrUserData),
    v_type_int32(F6, [timout | Path], TrUserData),
    ok;
v_msg_ServerToArbiterAnnounce(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ServerToArbiterAnnounce'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_ServerToArbiterSubscribe/3}).
-dialyzer({nowarn_function,v_msg_ServerToArbiterSubscribe/3}).
v_msg_ServerToArbiterSubscribe(#'ServerToArbiterSubscribe'{importerName
							       = F1,
							   manufacturerNames =
							       F2},
			       Path, TrUserData) ->
    v_type_string(F1, [importerName | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [manufacturerNames | Path],
			      TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2,
			 [manufacturerNames | Path])
    end,
    ok;
v_msg_ServerToArbiterSubscribe(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ServerToArbiterSubscribe'},
		  X, Path).

-compile({nowarn_unused_function,v_enum_ClientType/3}).
-dialyzer({nowarn_function,v_enum_ClientType/3}).
v_enum_ClientType('IMPORTER', _Path, _TrUserData) -> ok;
v_enum_ClientType('MANUFACTURER', _Path, _TrUserData) ->
    ok;
v_enum_ClientType(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_ClientType(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'ClientType'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'ClientType'},
      [{'IMPORTER', 0}, {'MANUFACTURER', 1}]},
     {{msg, 'ClientToServer'},
      [#gpb_oneof{name = message, rnum = 2,
		  fields =
		      [#field{name = login, fnum = 1, rnum = 2,
			      type = {msg, 'ClientToServerLogin'},
			      occurrence = optional, opts = []},
		       #field{name = register, fnum = 2, rnum = 2,
			      type = {msg, 'ClientToServerRegister'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ClientToServerLogin'},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = clientType, fnum = 3, rnum = 4,
	      type = {enum, 'ClientType'}, occurrence = required,
	      opts = []}]},
     {{msg, 'ClientToServerRegister'},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToClientAuth'},
      [#field{name = ok, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = clientType, fnum = 2, rnum = 3,
	      type = {enum, 'ClientType'}, occurrence = optional,
	      opts = []},
       #field{name = errorMessage, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ManufacturerToServer'},
      [#gpb_oneof{name = message, rnum = 2,
		  fields =
		      [#field{name = announce, fnum = 1, rnum = 2,
			      type = {msg, 'ManufacturerToServerAnnounce'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ManufacturerToServerAnnounce'},
      [#field{name = productName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = minQuantity, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []},
       #field{name = maxQuantity, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = minUnitPrice, fnum = 4, rnum = 5,
	      type = float, occurrence = required, opts = []},
       #field{name = timeout, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = manufacturerName, fnum = 6, rnum = 7,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToManufacturer'},
      [#gpb_oneof{name = message, rnum = 2,
		  fields =
		      [#field{name = announced, fnum = 1, rnum = 2,
			      type = {msg, 'ServerToManufacturerAnnounced'},
			      occurrence = optional, opts = []},
		       #field{name = invalid, fnum = 2, rnum = 2,
			      type = {msg, 'ServerToManufacturerInvalid'},
			      occurrence = optional, opts = []},
		       #field{name = noOffers, fnum = 3, rnum = 2,
			      type = {msg, 'ServerToManufacturerNoOffers'},
			      occurrence = optional, opts = []},
		       #field{name = sold, fnum = 4, rnum = 2,
			      type = {msg, 'ServerToManufacturerSold'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ServerToManufacturerAnnounced'},
      [#field{name = productName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToManufacturerInvalid'},
      [#field{name = errorMessage, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToManufacturerNoOffers'},
      [#field{name = productName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToManufacturerSold'},
      [#field{name = productName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = quantity, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []},
       #field{name = unitPrice, fnum = 3, rnum = 4,
	      type = float, occurrence = required, opts = []}]},
     {{msg, 'ImporterToServer'},
      [#gpb_oneof{name = message, rnum = 2,
		  fields =
		      [#field{name = subscribe, fnum = 1, rnum = 2,
			      type = {msg, 'ImporterToServerSubscribe'},
			      occurrence = optional, opts = []},
		       #field{name = offer, fnum = 2, rnum = 2,
			      type = {msg, 'ImporterToServerOffer'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ImporterToServerSubscribe'},
      [#field{name = manufacturerNames, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated, opts = []},
       #field{name = importerName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ImporterToServerOffer'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = quantity, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = unitPrice, fnum = 4, rnum = 5,
	      type = float, occurrence = required, opts = []},
       #field{name = importerName, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToImporter'},
      [#gpb_oneof{name = message, rnum = 2,
		  fields =
		      [#field{name = offerSubmitted, fnum = 1, rnum = 2,
			      type = {msg, 'ServerToImporterOfferSubmitted'},
			      occurrence = optional, opts = []},
		       #field{name = offerInvalid, fnum = 2, rnum = 2,
			      type = {msg, 'ServerToImporterOfferInvalid'},
			      occurrence = optional, opts = []},
		       #field{name = offerWon, fnum = 3, rnum = 2,
			      type = {msg, 'ServerToImporterOfferWon'},
			      occurrence = optional, opts = []},
		       #field{name = offerLose, fnum = 4, rnum = 2,
			      type = {msg, 'ServerToImporterOfferLose'},
			      occurrence = optional, opts = []},
		       #field{name = offerOutdated, fnum = 5, rnum = 2,
			      type = {msg, 'ServerToImporterOfferOutdated'},
			      occurrence = optional, opts = []},
		       #field{name = newProduct, fnum = 6, rnum = 2,
			      type = {msg, 'ServerToImporterNewProduct'},
			      occurrence = optional, opts = []},
		       #field{name = subsAccepted, fnum = 7, rnum = 2,
			      type = {msg, 'ServerToImporterSubscribeAccepted'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ServerToImporterOfferSubmitted'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToImporterOfferInvalid'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = errorMessage, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToImporterOfferWon'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = quantity, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = unitPrice, fnum = 4, rnum = 5,
	      type = float, occurrence = required, opts = []}]},
     {{msg, 'ServerToImporterOfferLose'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToImporterOfferOutdated'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToImporterNewProduct'},
      [#field{name = productName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = minQuantity, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []},
       #field{name = maxQuantity, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = minUnitPrice, fnum = 4, rnum = 5,
	      type = float, occurrence = required, opts = []},
       #field{name = timeout, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = manufacturerName, fnum = 6, rnum = 7,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToImporterSubscribeAccepted'}, []},
     {{msg, 'ArbiterToServer'},
      [#gpb_oneof{name = message, rnum = 2,
		  fields =
		      [#field{name = accepted, fnum = 1, rnum = 2,
			      type = {msg, 'ArbiterToServerAnnounceAccepted'},
			      occurrence = optional, opts = []},
		       #field{name = announceInvalid, fnum = 2, rnum = 2,
			      type = {msg, 'ArbiterToServerAnnounceInvalid'},
			      occurrence = optional, opts = []},
		       #field{name = sold, fnum = 3, rnum = 2,
			      type = {msg, 'ArbiterToServerAnnounceSold'},
			      occurrence = optional, opts = []},
		       #field{name = noOffers, fnum = 4, rnum = 2,
			      type = {msg, 'ArbiterToServerAnnounceNoOffers'},
			      occurrence = optional, opts = []},
		       #field{name = submitted, fnum = 5, rnum = 2,
			      type = {msg, 'ArbiterToServerOfferSubmitted'},
			      occurrence = optional, opts = []},
		       #field{name = offerInvalid, fnum = 6, rnum = 2,
			      type = {msg, 'ArbiterToServerOfferInvalid'},
			      occurrence = optional, opts = []},
		       #field{name = won, fnum = 7, rnum = 2,
			      type = {msg, 'ArbiterToServerOfferWon'},
			      occurrence = optional, opts = []},
		       #field{name = lose, fnum = 8, rnum = 2,
			      type = {msg, 'ArbiterToServerOfferLose'},
			      occurrence = optional, opts = []},
		       #field{name = offerOutdated, fnum = 9, rnum = 2,
			      type = {msg, 'ArbiterToServerOfferOutdated'},
			      occurrence = optional, opts = []},
		       #field{name = product, fnum = 10, rnum = 2,
			      type = {msg, 'ArbiterToServerNewProduct'},
			      occurrence = optional, opts = []},
		       #field{name = subsAccepted, fnum = 11, rnum = 2,
			      type = {msg, 'ArbiterToServerSubscribeAccepted'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ArbiterToServerAnnounceAccepted'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ArbiterToServerAnnounceInvalid'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = errorMessage, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ArbiterToServerAnnounceSold'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = quantity, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = unitPrice, fnum = 4, rnum = 5,
	      type = float, occurrence = required, opts = []}]},
     {{msg, 'ArbiterToServerAnnounceNoOffers'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ArbiterToServerOfferSubmitted'},
      [#field{name = importerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = manufacturerName, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ArbiterToServerOfferInvalid'},
      [#field{name = importerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = manufacturerName, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = errorMessage, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ArbiterToServerOfferWon'},
      [#field{name = importerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = manufacturerName, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = quantity, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = unitPrice, fnum = 5, rnum = 6,
	      type = float, occurrence = required, opts = []}]},
     {{msg, 'ArbiterToServerOfferLose'},
      [#field{name = importerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = manufacturerName, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ArbiterToServerOfferOutdated'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = importerName, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ArbiterToServerNewProduct'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = minQuantity, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = maxQuantity, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = minUnitPrice, fnum = 5, rnum = 6,
	      type = float, occurrence = required, opts = []},
       #field{name = timeout, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []},
       #field{name = importerName, fnum = 7, rnum = 8,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ArbiterToServerSubscribeAccepted'},
      [#field{name = importerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToArbiter'},
      [#gpb_oneof{name = message, rnum = 2,
		  fields =
		      [#field{name = offer, fnum = 1, rnum = 2,
			      type = {msg, 'ServerToArbiterOffer'},
			      occurrence = optional, opts = []},
		       #field{name = announce, fnum = 2, rnum = 2,
			      type = {msg, 'ServerToArbiterAnnounce'},
			      occurrence = optional, opts = []},
		       #field{name = subscribe, fnum = 3, rnum = 2,
			      type = {msg, 'ServerToArbiterSubscribe'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ServerToArbiterOffer'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = quantity, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = unitPrice, fnum = 4, rnum = 5,
	      type = float, occurrence = required, opts = []},
       #field{name = importerName, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'ServerToArbiterAnnounce'},
      [#field{name = manufacturerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = minQuantity, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = maxQuantity, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = minUnitPrice, fnum = 5, rnum = 6,
	      type = float, occurrence = required, opts = []},
       #field{name = timout, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'ServerToArbiterSubscribe'},
      [#field{name = importerName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = manufacturerNames, fnum = 2, rnum = 3,
	      type = string, occurrence = repeated, opts = []}]}].


get_msg_names() ->
    ['ClientToServer', 'ClientToServerLogin',
     'ClientToServerRegister', 'ServerToClientAuth',
     'ManufacturerToServer', 'ManufacturerToServerAnnounce',
     'ServerToManufacturer', 'ServerToManufacturerAnnounced',
     'ServerToManufacturerInvalid',
     'ServerToManufacturerNoOffers',
     'ServerToManufacturerSold', 'ImporterToServer',
     'ImporterToServerSubscribe', 'ImporterToServerOffer',
     'ServerToImporter', 'ServerToImporterOfferSubmitted',
     'ServerToImporterOfferInvalid',
     'ServerToImporterOfferWon', 'ServerToImporterOfferLose',
     'ServerToImporterOfferOutdated',
     'ServerToImporterNewProduct',
     'ServerToImporterSubscribeAccepted', 'ArbiterToServer',
     'ArbiterToServerAnnounceAccepted',
     'ArbiterToServerAnnounceInvalid',
     'ArbiterToServerAnnounceSold',
     'ArbiterToServerAnnounceNoOffers',
     'ArbiterToServerOfferSubmitted',
     'ArbiterToServerOfferInvalid',
     'ArbiterToServerOfferWon', 'ArbiterToServerOfferLose',
     'ArbiterToServerOfferOutdated',
     'ArbiterToServerNewProduct',
     'ArbiterToServerSubscribeAccepted', 'ServerToArbiter',
     'ServerToArbiterOffer', 'ServerToArbiterAnnounce',
     'ServerToArbiterSubscribe'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['ClientToServer', 'ClientToServerLogin',
     'ClientToServerRegister', 'ServerToClientAuth',
     'ManufacturerToServer', 'ManufacturerToServerAnnounce',
     'ServerToManufacturer', 'ServerToManufacturerAnnounced',
     'ServerToManufacturerInvalid',
     'ServerToManufacturerNoOffers',
     'ServerToManufacturerSold', 'ImporterToServer',
     'ImporterToServerSubscribe', 'ImporterToServerOffer',
     'ServerToImporter', 'ServerToImporterOfferSubmitted',
     'ServerToImporterOfferInvalid',
     'ServerToImporterOfferWon', 'ServerToImporterOfferLose',
     'ServerToImporterOfferOutdated',
     'ServerToImporterNewProduct',
     'ServerToImporterSubscribeAccepted', 'ArbiterToServer',
     'ArbiterToServerAnnounceAccepted',
     'ArbiterToServerAnnounceInvalid',
     'ArbiterToServerAnnounceSold',
     'ArbiterToServerAnnounceNoOffers',
     'ArbiterToServerOfferSubmitted',
     'ArbiterToServerOfferInvalid',
     'ArbiterToServerOfferWon', 'ArbiterToServerOfferLose',
     'ArbiterToServerOfferOutdated',
     'ArbiterToServerNewProduct',
     'ArbiterToServerSubscribeAccepted', 'ServerToArbiter',
     'ServerToArbiterOffer', 'ServerToArbiterAnnounce',
     'ServerToArbiterSubscribe'].


get_enum_names() -> ['ClientType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('ClientToServer') ->
    [#gpb_oneof{name = message, rnum = 2,
		fields =
		    [#field{name = login, fnum = 1, rnum = 2,
			    type = {msg, 'ClientToServerLogin'},
			    occurrence = optional, opts = []},
		     #field{name = register, fnum = 2, rnum = 2,
			    type = {msg, 'ClientToServerRegister'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ClientToServerLogin') ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = clientType, fnum = 3, rnum = 4,
	    type = {enum, 'ClientType'}, occurrence = required,
	    opts = []}];
find_msg_def('ClientToServerRegister') ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToClientAuth') ->
    [#field{name = ok, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = clientType, fnum = 2, rnum = 3,
	    type = {enum, 'ClientType'}, occurrence = optional,
	    opts = []},
     #field{name = errorMessage, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ManufacturerToServer') ->
    [#gpb_oneof{name = message, rnum = 2,
		fields =
		    [#field{name = announce, fnum = 1, rnum = 2,
			    type = {msg, 'ManufacturerToServerAnnounce'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ManufacturerToServerAnnounce') ->
    [#field{name = productName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = minQuantity, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []},
     #field{name = maxQuantity, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = minUnitPrice, fnum = 4, rnum = 5,
	    type = float, occurrence = required, opts = []},
     #field{name = timeout, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = manufacturerName, fnum = 6, rnum = 7,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToManufacturer') ->
    [#gpb_oneof{name = message, rnum = 2,
		fields =
		    [#field{name = announced, fnum = 1, rnum = 2,
			    type = {msg, 'ServerToManufacturerAnnounced'},
			    occurrence = optional, opts = []},
		     #field{name = invalid, fnum = 2, rnum = 2,
			    type = {msg, 'ServerToManufacturerInvalid'},
			    occurrence = optional, opts = []},
		     #field{name = noOffers, fnum = 3, rnum = 2,
			    type = {msg, 'ServerToManufacturerNoOffers'},
			    occurrence = optional, opts = []},
		     #field{name = sold, fnum = 4, rnum = 2,
			    type = {msg, 'ServerToManufacturerSold'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ServerToManufacturerAnnounced') ->
    [#field{name = productName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToManufacturerInvalid') ->
    [#field{name = errorMessage, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToManufacturerNoOffers') ->
    [#field{name = productName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToManufacturerSold') ->
    [#field{name = productName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = quantity, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []},
     #field{name = unitPrice, fnum = 3, rnum = 4,
	    type = float, occurrence = required, opts = []}];
find_msg_def('ImporterToServer') ->
    [#gpb_oneof{name = message, rnum = 2,
		fields =
		    [#field{name = subscribe, fnum = 1, rnum = 2,
			    type = {msg, 'ImporterToServerSubscribe'},
			    occurrence = optional, opts = []},
		     #field{name = offer, fnum = 2, rnum = 2,
			    type = {msg, 'ImporterToServerOffer'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ImporterToServerSubscribe') ->
    [#field{name = manufacturerNames, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated, opts = []},
     #field{name = importerName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ImporterToServerOffer') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = quantity, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = unitPrice, fnum = 4, rnum = 5,
	    type = float, occurrence = required, opts = []},
     #field{name = importerName, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToImporter') ->
    [#gpb_oneof{name = message, rnum = 2,
		fields =
		    [#field{name = offerSubmitted, fnum = 1, rnum = 2,
			    type = {msg, 'ServerToImporterOfferSubmitted'},
			    occurrence = optional, opts = []},
		     #field{name = offerInvalid, fnum = 2, rnum = 2,
			    type = {msg, 'ServerToImporterOfferInvalid'},
			    occurrence = optional, opts = []},
		     #field{name = offerWon, fnum = 3, rnum = 2,
			    type = {msg, 'ServerToImporterOfferWon'},
			    occurrence = optional, opts = []},
		     #field{name = offerLose, fnum = 4, rnum = 2,
			    type = {msg, 'ServerToImporterOfferLose'},
			    occurrence = optional, opts = []},
		     #field{name = offerOutdated, fnum = 5, rnum = 2,
			    type = {msg, 'ServerToImporterOfferOutdated'},
			    occurrence = optional, opts = []},
		     #field{name = newProduct, fnum = 6, rnum = 2,
			    type = {msg, 'ServerToImporterNewProduct'},
			    occurrence = optional, opts = []},
		     #field{name = subsAccepted, fnum = 7, rnum = 2,
			    type = {msg, 'ServerToImporterSubscribeAccepted'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ServerToImporterOfferSubmitted') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToImporterOfferInvalid') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = errorMessage, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToImporterOfferWon') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = quantity, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = unitPrice, fnum = 4, rnum = 5,
	    type = float, occurrence = required, opts = []}];
find_msg_def('ServerToImporterOfferLose') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToImporterOfferOutdated') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToImporterNewProduct') ->
    [#field{name = productName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = minQuantity, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []},
     #field{name = maxQuantity, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = minUnitPrice, fnum = 4, rnum = 5,
	    type = float, occurrence = required, opts = []},
     #field{name = timeout, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = manufacturerName, fnum = 6, rnum = 7,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToImporterSubscribeAccepted') -> [];
find_msg_def('ArbiterToServer') ->
    [#gpb_oneof{name = message, rnum = 2,
		fields =
		    [#field{name = accepted, fnum = 1, rnum = 2,
			    type = {msg, 'ArbiterToServerAnnounceAccepted'},
			    occurrence = optional, opts = []},
		     #field{name = announceInvalid, fnum = 2, rnum = 2,
			    type = {msg, 'ArbiterToServerAnnounceInvalid'},
			    occurrence = optional, opts = []},
		     #field{name = sold, fnum = 3, rnum = 2,
			    type = {msg, 'ArbiterToServerAnnounceSold'},
			    occurrence = optional, opts = []},
		     #field{name = noOffers, fnum = 4, rnum = 2,
			    type = {msg, 'ArbiterToServerAnnounceNoOffers'},
			    occurrence = optional, opts = []},
		     #field{name = submitted, fnum = 5, rnum = 2,
			    type = {msg, 'ArbiterToServerOfferSubmitted'},
			    occurrence = optional, opts = []},
		     #field{name = offerInvalid, fnum = 6, rnum = 2,
			    type = {msg, 'ArbiterToServerOfferInvalid'},
			    occurrence = optional, opts = []},
		     #field{name = won, fnum = 7, rnum = 2,
			    type = {msg, 'ArbiterToServerOfferWon'},
			    occurrence = optional, opts = []},
		     #field{name = lose, fnum = 8, rnum = 2,
			    type = {msg, 'ArbiterToServerOfferLose'},
			    occurrence = optional, opts = []},
		     #field{name = offerOutdated, fnum = 9, rnum = 2,
			    type = {msg, 'ArbiterToServerOfferOutdated'},
			    occurrence = optional, opts = []},
		     #field{name = product, fnum = 10, rnum = 2,
			    type = {msg, 'ArbiterToServerNewProduct'},
			    occurrence = optional, opts = []},
		     #field{name = subsAccepted, fnum = 11, rnum = 2,
			    type = {msg, 'ArbiterToServerSubscribeAccepted'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ArbiterToServerAnnounceAccepted') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ArbiterToServerAnnounceInvalid') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = errorMessage, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ArbiterToServerAnnounceSold') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = quantity, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = unitPrice, fnum = 4, rnum = 5,
	    type = float, occurrence = required, opts = []}];
find_msg_def('ArbiterToServerAnnounceNoOffers') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ArbiterToServerOfferSubmitted') ->
    [#field{name = importerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = manufacturerName, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ArbiterToServerOfferInvalid') ->
    [#field{name = importerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = manufacturerName, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = errorMessage, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ArbiterToServerOfferWon') ->
    [#field{name = importerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = manufacturerName, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = quantity, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = unitPrice, fnum = 5, rnum = 6,
	    type = float, occurrence = required, opts = []}];
find_msg_def('ArbiterToServerOfferLose') ->
    [#field{name = importerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = manufacturerName, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ArbiterToServerOfferOutdated') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = importerName, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ArbiterToServerNewProduct') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = minQuantity, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = maxQuantity, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = minUnitPrice, fnum = 5, rnum = 6,
	    type = float, occurrence = required, opts = []},
     #field{name = timeout, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []},
     #field{name = importerName, fnum = 7, rnum = 8,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ArbiterToServerSubscribeAccepted') ->
    [#field{name = importerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToArbiter') ->
    [#gpb_oneof{name = message, rnum = 2,
		fields =
		    [#field{name = offer, fnum = 1, rnum = 2,
			    type = {msg, 'ServerToArbiterOffer'},
			    occurrence = optional, opts = []},
		     #field{name = announce, fnum = 2, rnum = 2,
			    type = {msg, 'ServerToArbiterAnnounce'},
			    occurrence = optional, opts = []},
		     #field{name = subscribe, fnum = 3, rnum = 2,
			    type = {msg, 'ServerToArbiterSubscribe'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ServerToArbiterOffer') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = quantity, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = unitPrice, fnum = 4, rnum = 5,
	    type = float, occurrence = required, opts = []},
     #field{name = importerName, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []}];
find_msg_def('ServerToArbiterAnnounce') ->
    [#field{name = manufacturerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = minQuantity, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = maxQuantity, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = minUnitPrice, fnum = 5, rnum = 6,
	    type = float, occurrence = required, opts = []},
     #field{name = timout, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('ServerToArbiterSubscribe') ->
    [#field{name = importerName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = manufacturerNames, fnum = 2, rnum = 3,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def('ClientType') ->
    [{'IMPORTER', 0}, {'MANUFACTURER', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('ClientType', Value) ->
    enum_symbol_by_value_ClientType(Value).


enum_value_by_symbol('ClientType', Sym) ->
    enum_value_by_symbol_ClientType(Sym).


enum_symbol_by_value_ClientType(0) -> 'IMPORTER';
enum_symbol_by_value_ClientType(1) -> 'MANUFACTURER'.


enum_value_by_symbol_ClientType('IMPORTER') -> 0;
enum_value_by_symbol_ClientType('MANUFACTURER') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"nefit.ClientToServer">>) -> 'ClientToServer';
fqbin_to_msg_name(<<"nefit.ClientToServerLogin">>) -> 'ClientToServerLogin';
fqbin_to_msg_name(<<"nefit.ClientToServerRegister">>) -> 'ClientToServerRegister';
fqbin_to_msg_name(<<"nefit.ServerToClientAuth">>) -> 'ServerToClientAuth';
fqbin_to_msg_name(<<"nefit.ManufacturerToServer">>) -> 'ManufacturerToServer';
fqbin_to_msg_name(<<"nefit.ManufacturerToServerAnnounce">>) ->
    'ManufacturerToServerAnnounce';
fqbin_to_msg_name(<<"nefit.ServerToManufacturer">>) -> 'ServerToManufacturer';
fqbin_to_msg_name(<<"nefit.ServerToManufacturerAnnounced">>) ->
    'ServerToManufacturerAnnounced';
fqbin_to_msg_name(<<"nefit.ServerToManufacturerInvalid">>) ->
    'ServerToManufacturerInvalid';
fqbin_to_msg_name(<<"nefit.ServerToManufacturerNoOffers">>) ->
    'ServerToManufacturerNoOffers';
fqbin_to_msg_name(<<"nefit.ServerToManufacturerSold">>) ->
    'ServerToManufacturerSold';
fqbin_to_msg_name(<<"nefit.ImporterToServer">>) -> 'ImporterToServer';
fqbin_to_msg_name(<<"nefit.ImporterToServerSubscribe">>) ->
    'ImporterToServerSubscribe';
fqbin_to_msg_name(<<"nefit.ImporterToServerOffer">>) -> 'ImporterToServerOffer';
fqbin_to_msg_name(<<"nefit.ServerToImporter">>) -> 'ServerToImporter';
fqbin_to_msg_name(<<"nefit.ServerToImporterOfferSubmitted">>) ->
    'ServerToImporterOfferSubmitted';
fqbin_to_msg_name(<<"nefit.ServerToImporterOfferInvalid">>) ->
    'ServerToImporterOfferInvalid';
fqbin_to_msg_name(<<"nefit.ServerToImporterOfferWon">>) ->
    'ServerToImporterOfferWon';
fqbin_to_msg_name(<<"nefit.ServerToImporterOfferLose">>) ->
    'ServerToImporterOfferLose';
fqbin_to_msg_name(<<"nefit.ServerToImporterOfferOutdated">>) ->
    'ServerToImporterOfferOutdated';
fqbin_to_msg_name(<<"nefit.ServerToImporterNewProduct">>) ->
    'ServerToImporterNewProduct';
fqbin_to_msg_name(<<"nefit.ServerToImporterSubscribeAccepted">>) ->
    'ServerToImporterSubscribeAccepted';
fqbin_to_msg_name(<<"nefit.ArbiterToServer">>) -> 'ArbiterToServer';
fqbin_to_msg_name(<<"nefit.ArbiterToServerAnnounceAccepted">>) ->
    'ArbiterToServerAnnounceAccepted';
fqbin_to_msg_name(<<"nefit.ArbiterToServerAnnounceInvalid">>) ->
    'ArbiterToServerAnnounceInvalid';
fqbin_to_msg_name(<<"nefit.ArbiterToServerAnnounceSold">>) ->
    'ArbiterToServerAnnounceSold';
fqbin_to_msg_name(<<"nefit.ArbiterToServerAnnounceNoOffers">>) ->
    'ArbiterToServerAnnounceNoOffers';
fqbin_to_msg_name(<<"nefit.ArbiterToServerOfferSubmitted">>) ->
    'ArbiterToServerOfferSubmitted';
fqbin_to_msg_name(<<"nefit.ArbiterToServerOfferInvalid">>) ->
    'ArbiterToServerOfferInvalid';
fqbin_to_msg_name(<<"nefit.ArbiterToServerOfferWon">>) -> 'ArbiterToServerOfferWon';
fqbin_to_msg_name(<<"nefit.ArbiterToServerOfferLose">>) ->
    'ArbiterToServerOfferLose';
fqbin_to_msg_name(<<"nefit.ArbiterToServerOfferOutdated">>) ->
    'ArbiterToServerOfferOutdated';
fqbin_to_msg_name(<<"nefit.ArbiterToServerNewProduct">>) ->
    'ArbiterToServerNewProduct';
fqbin_to_msg_name(<<"nefit.ArbiterToServerSubscribeAccepted">>) ->
    'ArbiterToServerSubscribeAccepted';
fqbin_to_msg_name(<<"nefit.ServerToArbiter">>) -> 'ServerToArbiter';
fqbin_to_msg_name(<<"nefit.ServerToArbiterOffer">>) -> 'ServerToArbiterOffer';
fqbin_to_msg_name(<<"nefit.ServerToArbiterAnnounce">>) -> 'ServerToArbiterAnnounce';
fqbin_to_msg_name(<<"nefit.ServerToArbiterSubscribe">>) ->
    'ServerToArbiterSubscribe';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('ClientToServer') -> <<"nefit.ClientToServer">>;
msg_name_to_fqbin('ClientToServerLogin') -> <<"nefit.ClientToServerLogin">>;
msg_name_to_fqbin('ClientToServerRegister') -> <<"nefit.ClientToServerRegister">>;
msg_name_to_fqbin('ServerToClientAuth') -> <<"nefit.ServerToClientAuth">>;
msg_name_to_fqbin('ManufacturerToServer') -> <<"nefit.ManufacturerToServer">>;
msg_name_to_fqbin('ManufacturerToServerAnnounce') ->
    <<"nefit.ManufacturerToServerAnnounce">>;
msg_name_to_fqbin('ServerToManufacturer') -> <<"nefit.ServerToManufacturer">>;
msg_name_to_fqbin('ServerToManufacturerAnnounced') ->
    <<"nefit.ServerToManufacturerAnnounced">>;
msg_name_to_fqbin('ServerToManufacturerInvalid') ->
    <<"nefit.ServerToManufacturerInvalid">>;
msg_name_to_fqbin('ServerToManufacturerNoOffers') ->
    <<"nefit.ServerToManufacturerNoOffers">>;
msg_name_to_fqbin('ServerToManufacturerSold') ->
    <<"nefit.ServerToManufacturerSold">>;
msg_name_to_fqbin('ImporterToServer') -> <<"nefit.ImporterToServer">>;
msg_name_to_fqbin('ImporterToServerSubscribe') ->
    <<"nefit.ImporterToServerSubscribe">>;
msg_name_to_fqbin('ImporterToServerOffer') -> <<"nefit.ImporterToServerOffer">>;
msg_name_to_fqbin('ServerToImporter') -> <<"nefit.ServerToImporter">>;
msg_name_to_fqbin('ServerToImporterOfferSubmitted') ->
    <<"nefit.ServerToImporterOfferSubmitted">>;
msg_name_to_fqbin('ServerToImporterOfferInvalid') ->
    <<"nefit.ServerToImporterOfferInvalid">>;
msg_name_to_fqbin('ServerToImporterOfferWon') ->
    <<"nefit.ServerToImporterOfferWon">>;
msg_name_to_fqbin('ServerToImporterOfferLose') ->
    <<"nefit.ServerToImporterOfferLose">>;
msg_name_to_fqbin('ServerToImporterOfferOutdated') ->
    <<"nefit.ServerToImporterOfferOutdated">>;
msg_name_to_fqbin('ServerToImporterNewProduct') ->
    <<"nefit.ServerToImporterNewProduct">>;
msg_name_to_fqbin('ServerToImporterSubscribeAccepted') ->
    <<"nefit.ServerToImporterSubscribeAccepted">>;
msg_name_to_fqbin('ArbiterToServer') -> <<"nefit.ArbiterToServer">>;
msg_name_to_fqbin('ArbiterToServerAnnounceAccepted') ->
    <<"nefit.ArbiterToServerAnnounceAccepted">>;
msg_name_to_fqbin('ArbiterToServerAnnounceInvalid') ->
    <<"nefit.ArbiterToServerAnnounceInvalid">>;
msg_name_to_fqbin('ArbiterToServerAnnounceSold') ->
    <<"nefit.ArbiterToServerAnnounceSold">>;
msg_name_to_fqbin('ArbiterToServerAnnounceNoOffers') ->
    <<"nefit.ArbiterToServerAnnounceNoOffers">>;
msg_name_to_fqbin('ArbiterToServerOfferSubmitted') ->
    <<"nefit.ArbiterToServerOfferSubmitted">>;
msg_name_to_fqbin('ArbiterToServerOfferInvalid') ->
    <<"nefit.ArbiterToServerOfferInvalid">>;
msg_name_to_fqbin('ArbiterToServerOfferWon') -> <<"nefit.ArbiterToServerOfferWon">>;
msg_name_to_fqbin('ArbiterToServerOfferLose') ->
    <<"nefit.ArbiterToServerOfferLose">>;
msg_name_to_fqbin('ArbiterToServerOfferOutdated') ->
    <<"nefit.ArbiterToServerOfferOutdated">>;
msg_name_to_fqbin('ArbiterToServerNewProduct') ->
    <<"nefit.ArbiterToServerNewProduct">>;
msg_name_to_fqbin('ArbiterToServerSubscribeAccepted') ->
    <<"nefit.ArbiterToServerSubscribeAccepted">>;
msg_name_to_fqbin('ServerToArbiter') -> <<"nefit.ServerToArbiter">>;
msg_name_to_fqbin('ServerToArbiterOffer') -> <<"nefit.ServerToArbiterOffer">>;
msg_name_to_fqbin('ServerToArbiterAnnounce') -> <<"nefit.ServerToArbiterAnnounce">>;
msg_name_to_fqbin('ServerToArbiterSubscribe') ->
    <<"nefit.ServerToArbiterSubscribe">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"nefit.ClientType">>) -> 'ClientType';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('ClientType') -> <<"nefit.ClientType">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> nefit.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "nefit.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["nefit.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["nefit"].


get_msg_containment("nefit") ->
    ['ArbiterToServer', 'ArbiterToServerAnnounceAccepted',
     'ArbiterToServerAnnounceInvalid',
     'ArbiterToServerAnnounceNoOffers',
     'ArbiterToServerAnnounceSold',
     'ArbiterToServerNewProduct',
     'ArbiterToServerOfferInvalid',
     'ArbiterToServerOfferLose',
     'ArbiterToServerOfferOutdated',
     'ArbiterToServerOfferSubmitted',
     'ArbiterToServerOfferWon',
     'ArbiterToServerSubscribeAccepted', 'ClientToServer',
     'ClientToServerLogin', 'ClientToServerRegister',
     'ImporterToServer', 'ImporterToServerOffer',
     'ImporterToServerSubscribe', 'ManufacturerToServer',
     'ManufacturerToServerAnnounce', 'ServerToArbiter',
     'ServerToArbiterAnnounce', 'ServerToArbiterOffer',
     'ServerToArbiterSubscribe', 'ServerToClientAuth',
     'ServerToImporter', 'ServerToImporterNewProduct',
     'ServerToImporterOfferInvalid',
     'ServerToImporterOfferLose',
     'ServerToImporterOfferOutdated',
     'ServerToImporterOfferSubmitted',
     'ServerToImporterOfferWon',
     'ServerToImporterSubscribeAccepted',
     'ServerToManufacturer', 'ServerToManufacturerAnnounced',
     'ServerToManufacturerInvalid',
     'ServerToManufacturerNoOffers',
     'ServerToManufacturerSold'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("nefit") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("nefit") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("nefit") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("nefit") -> ['ClientType'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToManufacturer">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToImporter">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToArbiterOffer">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToArbiter">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ManufacturerToServer">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ImporterToServerOffer">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ImporterToServer">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ClientToServerRegister">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ClientToServer">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServer">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToManufacturerNoOffers">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServerAnnounceNoOffers">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToManufacturerSold">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToManufacturerInvalid">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToManufacturerAnnounced">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToImporterSubscribeAccepted">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToImporterOfferSubmitted">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToImporterOfferOutdated">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToImporterOfferInvalid">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToImporterNewProduct">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServerSubscribeAccepted">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServerOfferSubmitted">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServerOfferOutdated">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServerOfferInvalid">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServerNewProduct">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServerAnnounceSold">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServerAnnounceInvalid">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServerAnnounceAccepted">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToImporterOfferLose">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToArbiterSubscribe">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToArbiterAnnounce">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ManufacturerToServerAnnounce">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ImporterToServerSubscribe">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServerOfferLose">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToClientAuth">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ServerToImporterOfferWon">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ClientToServerLogin">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ArbiterToServerOfferWon">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"nefit.ClientType">>) -> "nefit";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.8.0".

gpb_version_as_list() ->
    [4,8,0].
