%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.8.0
-module(nefitproto).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_MsgAuth.ClientType'/1, 'enum_value_by_symbol_MsgAuth.ClientType'/1]).
-export(['enum_symbol_by_value_MsgAuth.MsgType'/1, 'enum_value_by_symbol_MsgAuth.MsgType'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("nefitproto.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'MsgAuth.ClientType'() :: 'MANUFACTURER' | 'IMPORTER'.
-type 'MsgAuth.MsgType'() :: 'LOGIN' | 'REGISTER'.
-export_type(['MsgAuth.ClientType'/0, 'MsgAuth.MsgType'/0]).

%% message types
-type 'MsgAuth'() :: #'MsgAuth'{}.

-type 'MsgAck'() :: #'MsgAck'{}.

-type 'DisponibilityS'() :: #'DisponibilityS'{}.

-type 'DisponibilityN'() :: #'DisponibilityN'{}.

-type 'OrderS'() :: #'OrderS'{}.

-type 'OrderN'() :: #'OrderN'{}.

-type 'OrderAckS'() :: #'OrderAckS'{}.

-type 'OrderAckI'() :: #'OrderAckI'{}.

-type 'SubS'() :: #'SubS'{}.

-type 'SubN'() :: #'SubN'{}.

-type 'ProductionS'() :: #'ProductionS'{}.

-type 'ProductionM'() :: #'ProductionM'{}.

-type 'ResultS'() :: #'ResultS'{}.

-type 'ResultI'() :: #'ResultI'{}.

-type 'InfoS'() :: #'InfoS'{}.

-type 'InfoI'() :: #'InfoI'{}.

-type 'Server'() :: #'Server'{}.

-type 'Importer'() :: #'Importer'{}.

-type 'Negotiator'() :: #'Negotiator'{}.

-export_type(['MsgAuth'/0, 'MsgAck'/0, 'DisponibilityS'/0, 'DisponibilityN'/0, 'OrderS'/0, 'OrderN'/0, 'OrderAckS'/0, 'OrderAckI'/0, 'SubS'/0, 'SubN'/0, 'ProductionS'/0, 'ProductionM'/0, 'ResultS'/0, 'ResultI'/0, 'InfoS'/0, 'InfoI'/0, 'Server'/0, 'Importer'/0, 'Negotiator'/0]).

-spec encode_msg(#'MsgAuth'{} | #'MsgAck'{} | #'DisponibilityS'{} | #'DisponibilityN'{} | #'OrderS'{} | #'OrderN'{} | #'OrderAckS'{} | #'OrderAckI'{} | #'SubS'{} | #'SubN'{} | #'ProductionS'{} | #'ProductionM'{} | #'ResultS'{} | #'ResultI'{} | #'InfoS'{} | #'InfoI'{} | #'Server'{} | #'Importer'{} | #'Negotiator'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'MsgAuth'{} | #'MsgAck'{} | #'DisponibilityS'{} | #'DisponibilityN'{} | #'OrderS'{} | #'OrderN'{} | #'OrderAckS'{} | #'OrderAckI'{} | #'SubS'{} | #'SubN'{} | #'ProductionS'{} | #'ProductionM'{} | #'ResultS'{} | #'ResultI'{} | #'InfoS'{} | #'InfoI'{} | #'Server'{} | #'Importer'{} | #'Negotiator'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'MsgAuth'{} | #'MsgAck'{} | #'DisponibilityS'{} | #'DisponibilityN'{} | #'OrderS'{} | #'OrderN'{} | #'OrderAckS'{} | #'OrderAckI'{} | #'SubS'{} | #'SubN'{} | #'ProductionS'{} | #'ProductionM'{} | #'ResultS'{} | #'ResultI'{} | #'InfoS'{} | #'InfoI'{} | #'Server'{} | #'Importer'{} | #'Negotiator'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'MsgAuth' ->
	  encode_msg_MsgAuth(id(Msg, TrUserData), TrUserData);
      'MsgAck' ->
	  encode_msg_MsgAck(id(Msg, TrUserData), TrUserData);
      'DisponibilityS' ->
	  encode_msg_DisponibilityS(id(Msg, TrUserData),
				    TrUserData);
      'DisponibilityN' ->
	  encode_msg_DisponibilityN(id(Msg, TrUserData),
				    TrUserData);
      'OrderS' ->
	  encode_msg_OrderS(id(Msg, TrUserData), TrUserData);
      'OrderN' ->
	  encode_msg_OrderN(id(Msg, TrUserData), TrUserData);
      'OrderAckS' ->
	  encode_msg_OrderAckS(id(Msg, TrUserData), TrUserData);
      'OrderAckI' ->
	  encode_msg_OrderAckI(id(Msg, TrUserData), TrUserData);
      'SubS' ->
	  encode_msg_SubS(id(Msg, TrUserData), TrUserData);
      'SubN' ->
	  encode_msg_SubN(id(Msg, TrUserData), TrUserData);
      'ProductionS' ->
	  encode_msg_ProductionS(id(Msg, TrUserData), TrUserData);
      'ProductionM' ->
	  encode_msg_ProductionM(id(Msg, TrUserData), TrUserData);
      'ResultS' ->
	  encode_msg_ResultS(id(Msg, TrUserData), TrUserData);
      'ResultI' ->
	  encode_msg_ResultI(id(Msg, TrUserData), TrUserData);
      'InfoS' ->
	  encode_msg_InfoS(id(Msg, TrUserData), TrUserData);
      'InfoI' ->
	  encode_msg_InfoI(id(Msg, TrUserData), TrUserData);
      'Server' ->
	  encode_msg_Server(id(Msg, TrUserData), TrUserData);
      'Importer' ->
	  encode_msg_Importer(id(Msg, TrUserData), TrUserData);
      'Negotiator' ->
	  encode_msg_Negotiator(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_MsgAuth(Msg, TrUserData) ->
    encode_msg_MsgAuth(Msg, <<>>, TrUserData).


encode_msg_MsgAuth(#'MsgAuth'{name = F1, pass = F2,
			      ctype = F3, mtype = F4},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   'e_enum_MsgAuth.ClientType'(TrF3, <<B2/binary, 24>>,
				       TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      'e_enum_MsgAuth.MsgType'(TrF4, <<B3/binary, 32>>,
			       TrUserData)
    end.

encode_msg_MsgAck(Msg, TrUserData) ->
    encode_msg_MsgAck(Msg, <<>>, TrUserData).


encode_msg_MsgAck(#'MsgAck'{ok = F1, msg = F2}, Bin,
		  TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	   end
    end.

encode_msg_DisponibilityS(Msg, TrUserData) ->
    encode_msg_DisponibilityS(Msg, <<>>, TrUserData).


encode_msg_DisponibilityS(#'DisponibilityS'{nameM = F1,
					    nameP = F2, minimum = F3,
					    maximum = F4, value = F5,
					    period = F6},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
    end.

encode_msg_DisponibilityN(Msg, TrUserData) ->
    encode_msg_DisponibilityN(Msg, <<>>, TrUserData).


encode_msg_DisponibilityN(#'DisponibilityN'{nameM = F1,
					    nameP = F2, minimum = F3,
					    maximum = F4, value = F5,
					    period = F6},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
    end.

encode_msg_OrderS(Msg, TrUserData) ->
    encode_msg_OrderS(Msg, <<>>, TrUserData).


encode_msg_OrderS(#'OrderS'{nameM = F1, nameP = F2,
			    quant = F3, value = F4, nameI = F5},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
    end.

encode_msg_OrderN(Msg, TrUserData) ->
    encode_msg_OrderN(Msg, <<>>, TrUserData).


encode_msg_OrderN(#'OrderN'{nameM = F1, nameP = F2,
			    quant = F3, value = F4, nameI = F5},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
    end.

encode_msg_OrderAckS(Msg, TrUserData) ->
    encode_msg_OrderAckS(Msg, <<>>, TrUserData).


encode_msg_OrderAckS(#'OrderAckS'{ack = F1, msg = F2,
				  nameI = F3, outdated = F4},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
    end.

encode_msg_OrderAckI(Msg, TrUserData) ->
    encode_msg_OrderAckI(Msg, <<>>, TrUserData).


encode_msg_OrderAckI(#'OrderAckI'{ack = F1, msg = F2,
				  outdated = F3},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_SubS(Msg, TrUserData) ->
    encode_msg_SubS(Msg, <<>>, TrUserData).


encode_msg_SubS(#'SubS'{nameI = F1, subs = F2}, Bin,
		TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_SubS_subs(TrF2, B1, TrUserData)
      end
    end.

encode_msg_SubN(Msg, TrUserData) ->
    encode_msg_SubN(Msg, <<>>, TrUserData).


encode_msg_SubN(#'SubN'{nameI = F1, subs = F2}, Bin,
		TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_SubN_subs(TrF2, B1, TrUserData)
      end
    end.

encode_msg_ProductionS(Msg, TrUserData) ->
    encode_msg_ProductionS(Msg, <<>>, TrUserData).


encode_msg_ProductionS(#'ProductionS'{nameM = F1,
				      nameP = F2, quant = F3, value = F4},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
    end.

encode_msg_ProductionM(Msg, TrUserData) ->
    encode_msg_ProductionM(Msg, <<>>, TrUserData).


encode_msg_ProductionM(#'ProductionM'{nameP = F1,
				      quant = F2, value = F3},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_ResultS(Msg, TrUserData) ->
    encode_msg_ResultS(Msg, <<>>, TrUserData).


encode_msg_ResultS(#'ResultS'{result = F1, msg = F2,
			      nameI = F3},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_ResultI(Msg, TrUserData) ->
    encode_msg_ResultI(Msg, <<>>, TrUserData).


encode_msg_ResultI(#'ResultI'{result = F1, msg = F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_InfoS(Msg, TrUserData) ->
    encode_msg_InfoS(Msg, <<>>, TrUserData).


encode_msg_InfoS(#'InfoS'{nameM = F1, nameP = F2,
			  minimum = F3, maximum = F4, value = F5, period = F6,
			  nameI = F7},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
    end.

encode_msg_InfoI(Msg, TrUserData) ->
    encode_msg_InfoI(Msg, <<>>, TrUserData).


encode_msg_InfoI(#'InfoI'{nameM = F1, nameP = F2,
			  minimum = F3, maximum = F4, value = F5, period = F6},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_float(TrF5, <<B4/binary, 45>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
    end.

encode_msg_Server(Msg, TrUserData) ->
    encode_msg_Server(Msg, <<>>, TrUserData).


encode_msg_Server(#'Server'{msg = F1}, Bin,
		  TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {m1, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Server_m1(TrTF1, <<Bin/binary, 10>>,
				      TrUserData)
		 end;
	     {m2, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Server_m2(TrTF1, <<Bin/binary, 18>>,
				      TrUserData)
		 end;
	     {m3, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Server_m3(TrTF1, <<Bin/binary, 26>>,
				      TrUserData)
		 end;
	     {m4, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Server_m4(TrTF1, <<Bin/binary, 34>>,
				      TrUserData)
		 end;
	     {m5, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Server_m5(TrTF1, <<Bin/binary, 42>>,
				      TrUserData)
		 end;
	     {m6, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Server_m6(TrTF1, <<Bin/binary, 50>>,
				      TrUserData)
		 end;
	     {m7, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Server_m7(TrTF1, <<Bin/binary, 58>>,
				      TrUserData)
		 end
	   end
    end.

encode_msg_Importer(Msg, TrUserData) ->
    encode_msg_Importer(Msg, <<>>, TrUserData).


encode_msg_Importer(#'Importer'{msg = F1}, Bin,
		    TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {ordack, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Importer_ordack(TrTF1, <<Bin/binary, 10>>,
					    TrUserData)
		 end;
	     {result, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Importer_result(TrTF1, <<Bin/binary, 18>>,
					    TrUserData)
		 end;
	     {info, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Importer_info(TrTF1, <<Bin/binary, 26>>,
					  TrUserData)
		 end
	   end
    end.

encode_msg_Negotiator(Msg, TrUserData) ->
    encode_msg_Negotiator(Msg, <<>>, TrUserData).


encode_msg_Negotiator(#'Negotiator'{msg = F1}, Bin,
		      TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {sub, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Negotiator_sub(TrTF1, <<Bin/binary, 10>>,
					   TrUserData)
		 end;
	     {order, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Negotiator_order(TrTF1, <<Bin/binary, 18>>,
					     TrUserData)
		 end;
	     {disponibility, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Negotiator_disponibility(TrTF1,
						     <<Bin/binary, 26>>,
						     TrUserData)
		 end
	   end
    end.

e_field_SubS_subs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_SubS_subs(Rest, Bin3, TrUserData);
e_field_SubS_subs([], Bin, _TrUserData) -> Bin.

e_field_SubN_subs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_SubN_subs(Rest, Bin3, TrUserData);
e_field_SubN_subs([], Bin, _TrUserData) -> Bin.

e_mfield_Server_m1(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_DisponibilityS(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Server_m2(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_OrderS(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Server_m3(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_SubS(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Server_m4(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResultS(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Server_m5(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_InfoS(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Server_m6(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ProductionS(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Server_m7(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_OrderAckS(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Importer_ordack(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_OrderAckI(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Importer_result(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_ResultI(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Importer_info(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_InfoI(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Negotiator_sub(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_SubN(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Negotiator_order(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_OrderN(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Negotiator_disponibility(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_DisponibilityN(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_MsgAuth.ClientType'('MANUFACTURER', Bin,
			    _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_MsgAuth.ClientType'('IMPORTER', Bin,
			    _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_MsgAuth.ClientType'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_MsgAuth.MsgType'('LOGIN', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_MsgAuth.MsgType'('REGISTER', Bin,
			 _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_MsgAuth.MsgType'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('MsgAuth', Bin, TrUserData) ->
    id(decode_msg_MsgAuth(Bin, TrUserData), TrUserData);
decode_msg_2_doit('MsgAck', Bin, TrUserData) ->
    id(decode_msg_MsgAck(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DisponibilityS', Bin, TrUserData) ->
    id(decode_msg_DisponibilityS(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('DisponibilityN', Bin, TrUserData) ->
    id(decode_msg_DisponibilityN(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('OrderS', Bin, TrUserData) ->
    id(decode_msg_OrderS(Bin, TrUserData), TrUserData);
decode_msg_2_doit('OrderN', Bin, TrUserData) ->
    id(decode_msg_OrderN(Bin, TrUserData), TrUserData);
decode_msg_2_doit('OrderAckS', Bin, TrUserData) ->
    id(decode_msg_OrderAckS(Bin, TrUserData), TrUserData);
decode_msg_2_doit('OrderAckI', Bin, TrUserData) ->
    id(decode_msg_OrderAckI(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SubS', Bin, TrUserData) ->
    id(decode_msg_SubS(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SubN', Bin, TrUserData) ->
    id(decode_msg_SubN(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ProductionS', Bin, TrUserData) ->
    id(decode_msg_ProductionS(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ProductionM', Bin, TrUserData) ->
    id(decode_msg_ProductionM(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ResultS', Bin, TrUserData) ->
    id(decode_msg_ResultS(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ResultI', Bin, TrUserData) ->
    id(decode_msg_ResultI(Bin, TrUserData), TrUserData);
decode_msg_2_doit('InfoS', Bin, TrUserData) ->
    id(decode_msg_InfoS(Bin, TrUserData), TrUserData);
decode_msg_2_doit('InfoI', Bin, TrUserData) ->
    id(decode_msg_InfoI(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Server', Bin, TrUserData) ->
    id(decode_msg_Server(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Importer', Bin, TrUserData) ->
    id(decode_msg_Importer(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Negotiator', Bin, TrUserData) ->
    id(decode_msg_Negotiator(Bin, TrUserData), TrUserData).



decode_msg_MsgAuth(Bin, TrUserData) ->
    dfp_read_field_def_MsgAuth(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_MsgAuth(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_MsgAuth_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_MsgAuth(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_MsgAuth_pass(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_MsgAuth(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_MsgAuth_ctype(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_MsgAuth(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_MsgAuth_mtype(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_MsgAuth(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, _) ->
    #'MsgAuth'{name = F@_1, pass = F@_2, ctype = F@_3,
	       mtype = F@_4};
dfp_read_field_def_MsgAuth(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, TrUserData) ->
    dg_read_field_def_MsgAuth(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

dg_read_field_def_MsgAuth(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MsgAuth(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_MsgAuth(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MsgAuth_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      18 ->
	  d_field_MsgAuth_pass(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      24 ->
	  d_field_MsgAuth_ctype(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      32 ->
	  d_field_MsgAuth_mtype(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MsgAuth(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    1 ->
		skip_64_MsgAuth(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData);
	    2 ->
		skip_length_delimited_MsgAuth(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_MsgAuth(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
	    5 ->
		skip_32_MsgAuth(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData)
	  end
    end;
dg_read_field_def_MsgAuth(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, _) ->
    #'MsgAuth'{name = F@_1, pass = F@_2, ctype = F@_3,
	       mtype = F@_4}.

d_field_MsgAuth_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MsgAuth_name(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_MsgAuth_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MsgAuth(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, TrUserData).

d_field_MsgAuth_pass(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MsgAuth_pass(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_MsgAuth_pass(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MsgAuth(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, TrUserData).

d_field_MsgAuth_ctype(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MsgAuth_ctype(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_MsgAuth_ctype(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_MsgAuth.ClientType'(begin
					  <<Res:32/signed-native>> = <<(X bsl N
									  +
									  Acc):32/unsigned-native>>,
					  id(Res, TrUserData)
					end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_MsgAuth(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, TrUserData).

d_field_MsgAuth_mtype(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_MsgAuth_mtype(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_MsgAuth_mtype(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_MsgAuth.MsgType'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_MsgAuth(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, TrUserData).

skip_varint_MsgAuth(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_MsgAuth(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
skip_varint_MsgAuth(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MsgAuth(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_length_delimited_MsgAuth(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_MsgAuth(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
skip_length_delimited_MsgAuth(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MsgAuth(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_group_MsgAuth(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MsgAuth(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_32_MsgAuth(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MsgAuth(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_64_MsgAuth(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_MsgAuth(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

decode_msg_MsgAck(Bin, TrUserData) ->
    dfp_read_field_def_MsgAck(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_MsgAck(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_MsgAck_ok(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_MsgAck(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_MsgAck_msg(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
dfp_read_field_def_MsgAck(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'MsgAck'{ok = F@_1, msg = F@_2};
dfp_read_field_def_MsgAck(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_MsgAck(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_MsgAck(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MsgAck(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_MsgAck(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_MsgAck_ok(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_MsgAck_msg(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MsgAck(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_MsgAck(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_MsgAck(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_MsgAck(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_MsgAck(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_MsgAck(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'MsgAck'{ok = F@_1, msg = F@_2}.

d_field_MsgAck_ok(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MsgAck_ok(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, TrUserData);
d_field_MsgAck_ok(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_MsgAck(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_MsgAck_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MsgAck_msg(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, TrUserData);
d_field_MsgAck_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MsgAck(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_MsgAck(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_MsgAck(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_MsgAck(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MsgAck(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_MsgAck(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MsgAck(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_MsgAck(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MsgAck(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_MsgAck(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MsgAck(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_MsgAck(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_MsgAck(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_MsgAck(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_MsgAck(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

decode_msg_DisponibilityS(Bin, TrUserData) ->
    dfp_read_field_def_DisponibilityS(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_DisponibilityS(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityS_nameM(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityS(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityS_nameP(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityS(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityS_minimum(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityS(<<32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityS_maximum(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityS(<<45, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityS_value(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityS(<<48, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityS_period(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityS(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'DisponibilityS'{nameM = F@_1, nameP = F@_2,
		      minimum = F@_3, maximum = F@_4, value = F@_5,
		      period = F@_6};
dfp_read_field_def_DisponibilityS(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_DisponibilityS(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_DisponibilityS(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DisponibilityS(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
dg_read_field_def_DisponibilityS(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DisponibilityS_nameM(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      18 ->
	  d_field_DisponibilityS_nameP(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      24 ->
	  d_field_DisponibilityS_minimum(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, TrUserData);
      32 ->
	  d_field_DisponibilityS_maximum(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, TrUserData);
      45 ->
	  d_field_DisponibilityS_value(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      48 ->
	  d_field_DisponibilityS_period(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DisponibilityS(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_DisponibilityS(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_DisponibilityS(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData);
	    3 ->
		skip_group_DisponibilityS(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
	    5 ->
		skip_32_DisponibilityS(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_DisponibilityS(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, _) ->
    #'DisponibilityS'{nameM = F@_1, nameP = F@_2,
		      minimum = F@_3, maximum = F@_4, value = F@_5,
		      period = F@_6}.

d_field_DisponibilityS_nameM(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 57 ->
    d_field_DisponibilityS_nameM(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
d_field_DisponibilityS_nameM(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DisponibilityS(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_DisponibilityS_nameP(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 57 ->
    d_field_DisponibilityS_nameP(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
d_field_DisponibilityS_nameP(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DisponibilityS(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_DisponibilityS_minimum(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData)
    when N < 57 ->
    d_field_DisponibilityS_minimum(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, TrUserData);
d_field_DisponibilityS_minimum(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
			       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_DisponibilityS(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_DisponibilityS_maximum(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData)
    when N < 57 ->
    d_field_DisponibilityS_maximum(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, TrUserData);
d_field_DisponibilityS_maximum(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
			       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_DisponibilityS(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, F@_6,
				      TrUserData).

d_field_DisponibilityS_value(<<0:16, 128, 127,
			       Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6,
			     TrUserData) ->
    dfp_read_field_def_DisponibilityS(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4,
				      id(infinity, TrUserData), F@_6,
				      TrUserData);
d_field_DisponibilityS_value(<<0:16, 128, 255,
			       Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6,
			     TrUserData) ->
    dfp_read_field_def_DisponibilityS(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4,
				      id('-infinity', TrUserData), F@_6,
				      TrUserData);
d_field_DisponibilityS_value(<<_:16, 1:1, _:7, _:1,
			       127:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6,
			     TrUserData) ->
    dfp_read_field_def_DisponibilityS(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, id(nan, TrUserData),
				      F@_6, TrUserData);
d_field_DisponibilityS_value(<<Value:32/little-float,
			       Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6,
			     TrUserData) ->
    dfp_read_field_def_DisponibilityS(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, id(Value, TrUserData),
				      F@_6, TrUserData).

d_field_DisponibilityS_period(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData)
    when N < 57 ->
    d_field_DisponibilityS_period(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, TrUserData);
d_field_DisponibilityS_period(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
			      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_DisponibilityS(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, NewFValue,
				      TrUserData).

skip_varint_DisponibilityS(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    skip_varint_DisponibilityS(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_DisponibilityS(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    dfp_read_field_def_DisponibilityS(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_DisponibilityS(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_DisponibilityS(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, TrUserData);
skip_length_delimited_DisponibilityS(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisponibilityS(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_DisponibilityS(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DisponibilityS(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_DisponibilityS(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_DisponibilityS(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_DisponibilityS(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_DisponibilityS(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_DisponibilityN(Bin, TrUserData) ->
    dfp_read_field_def_DisponibilityN(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_DisponibilityN(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityN_nameM(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityN(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityN_nameP(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityN(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityN_minimum(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityN(<<32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityN_maximum(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityN(<<45, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityN_value(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityN(<<48, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    d_field_DisponibilityN_period(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_DisponibilityN(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'DisponibilityN'{nameM = F@_1, nameP = F@_2,
		      minimum = F@_3, maximum = F@_4, value = F@_5,
		      period = F@_6};
dfp_read_field_def_DisponibilityN(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_DisponibilityN(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_DisponibilityN(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DisponibilityN(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
dg_read_field_def_DisponibilityN(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DisponibilityN_nameM(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      18 ->
	  d_field_DisponibilityN_nameP(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      24 ->
	  d_field_DisponibilityN_minimum(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, TrUserData);
      32 ->
	  d_field_DisponibilityN_maximum(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, TrUserData);
      45 ->
	  d_field_DisponibilityN_value(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      48 ->
	  d_field_DisponibilityN_period(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DisponibilityN(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_DisponibilityN(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_DisponibilityN(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, TrUserData);
	    3 ->
		skip_group_DisponibilityN(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
	    5 ->
		skip_32_DisponibilityN(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_DisponibilityN(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, _) ->
    #'DisponibilityN'{nameM = F@_1, nameP = F@_2,
		      minimum = F@_3, maximum = F@_4, value = F@_5,
		      period = F@_6}.

d_field_DisponibilityN_nameM(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 57 ->
    d_field_DisponibilityN_nameM(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
d_field_DisponibilityN_nameM(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DisponibilityN(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_DisponibilityN_nameP(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 57 ->
    d_field_DisponibilityN_nameP(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
d_field_DisponibilityN_nameP(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DisponibilityN(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_DisponibilityN_minimum(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData)
    when N < 57 ->
    d_field_DisponibilityN_minimum(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, TrUserData);
d_field_DisponibilityN_minimum(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
			       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_DisponibilityN(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, F@_5, F@_6,
				      TrUserData).

d_field_DisponibilityN_maximum(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData)
    when N < 57 ->
    d_field_DisponibilityN_maximum(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, TrUserData);
d_field_DisponibilityN_maximum(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
			       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_DisponibilityN(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, F@_6,
				      TrUserData).

d_field_DisponibilityN_value(<<0:16, 128, 127,
			       Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6,
			     TrUserData) ->
    dfp_read_field_def_DisponibilityN(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4,
				      id(infinity, TrUserData), F@_6,
				      TrUserData);
d_field_DisponibilityN_value(<<0:16, 128, 255,
			       Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6,
			     TrUserData) ->
    dfp_read_field_def_DisponibilityN(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4,
				      id('-infinity', TrUserData), F@_6,
				      TrUserData);
d_field_DisponibilityN_value(<<_:16, 1:1, _:7, _:1,
			       127:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6,
			     TrUserData) ->
    dfp_read_field_def_DisponibilityN(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, id(nan, TrUserData),
				      F@_6, TrUserData);
d_field_DisponibilityN_value(<<Value:32/little-float,
			       Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6,
			     TrUserData) ->
    dfp_read_field_def_DisponibilityN(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, id(Value, TrUserData),
				      F@_6, TrUserData).

d_field_DisponibilityN_period(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData)
    when N < 57 ->
    d_field_DisponibilityN_period(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, TrUserData);
d_field_DisponibilityN_period(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
			      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_DisponibilityN(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, NewFValue,
				      TrUserData).

skip_varint_DisponibilityN(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    skip_varint_DisponibilityN(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_DisponibilityN(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    dfp_read_field_def_DisponibilityN(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_DisponibilityN(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData)
    when N < 57 ->
    skip_length_delimited_DisponibilityN(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, TrUserData);
skip_length_delimited_DisponibilityN(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DisponibilityN(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_DisponibilityN(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DisponibilityN(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_DisponibilityN(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_DisponibilityN(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_DisponibilityN(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_DisponibilityN(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_OrderS(Bin, TrUserData) ->
    dfp_read_field_def_OrderS(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_OrderS(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_OrderS_nameM(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_OrderS(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_OrderS_nameP(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_OrderS(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_OrderS_quant(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_OrderS(<<37, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_OrderS_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_OrderS(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_OrderS_nameI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_OrderS(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #'OrderS'{nameM = F@_1, nameP = F@_2, quant = F@_3,
	      value = F@_4, nameI = F@_5};
dfp_read_field_def_OrderS(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_OrderS(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_OrderS(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderS(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_OrderS(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_OrderS_nameM(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      18 ->
	  d_field_OrderS_nameP(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      24 ->
	  d_field_OrderS_quant(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      37 ->
	  d_field_OrderS_value(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      42 ->
	  d_field_OrderS_nameI(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OrderS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    1 ->
		skip_64_OrderS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData);
	    2 ->
		skip_length_delimited_OrderS(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_OrderS(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_OrderS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData)
	  end
    end;
dg_read_field_def_OrderS(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, _) ->
    #'OrderS'{nameM = F@_1, nameP = F@_2, quant = F@_3,
	      value = F@_4, nameI = F@_5}.

d_field_OrderS_nameM(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_OrderS_nameM(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OrderS_nameM(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OrderS(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_OrderS_nameP(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_OrderS_nameP(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OrderS_nameP(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OrderS(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_OrderS_quant(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_OrderS_quant(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OrderS_quant(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_OrderS(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, TrUserData).

d_field_OrderS_value(<<0:16, 128, 127, Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_OrderS(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, id(infinity, TrUserData), F@_5, TrUserData);
d_field_OrderS_value(<<0:16, 128, 255, Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_OrderS(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, id('-infinity', TrUserData), F@_5,
			      TrUserData);
d_field_OrderS_value(<<_:16, 1:1, _:7, _:1, 127:7,
		       Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_OrderS(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, id(nan, TrUserData), F@_5, TrUserData);
d_field_OrderS_value(<<Value:32/little-float,
		       Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_OrderS(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, id(Value, TrUserData), F@_5, TrUserData).

d_field_OrderS_nameI(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_OrderS_nameI(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OrderS_nameI(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OrderS(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, TrUserData).

skip_varint_OrderS(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_OrderS(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
skip_varint_OrderS(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_OrderS(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_OrderS(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderS(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_OrderS(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderS(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_group_OrderS(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderS(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_32_OrderS(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_OrderS(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_64_OrderS(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_OrderS(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

decode_msg_OrderN(Bin, TrUserData) ->
    dfp_read_field_def_OrderN(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_OrderN(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_OrderN_nameM(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_OrderN(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_OrderN_nameP(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_OrderN(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_OrderN_quant(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_OrderN(<<37, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_OrderN_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_OrderN(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_OrderN_nameI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_OrderN(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #'OrderN'{nameM = F@_1, nameP = F@_2, quant = F@_3,
	      value = F@_4, nameI = F@_5};
dfp_read_field_def_OrderN(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_OrderN(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_OrderN(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderN(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_OrderN(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_OrderN_nameM(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      18 ->
	  d_field_OrderN_nameP(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      24 ->
	  d_field_OrderN_quant(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      37 ->
	  d_field_OrderN_value(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      42 ->
	  d_field_OrderN_nameI(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OrderN(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    1 ->
		skip_64_OrderN(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData);
	    2 ->
		skip_length_delimited_OrderN(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_OrderN(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_OrderN(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData)
	  end
    end;
dg_read_field_def_OrderN(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, _) ->
    #'OrderN'{nameM = F@_1, nameP = F@_2, quant = F@_3,
	      value = F@_4, nameI = F@_5}.

d_field_OrderN_nameM(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_OrderN_nameM(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OrderN_nameM(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OrderN(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_OrderN_nameP(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_OrderN_nameP(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OrderN_nameP(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OrderN(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_OrderN_quant(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_OrderN_quant(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OrderN_quant(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_OrderN(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, TrUserData).

d_field_OrderN_value(<<0:16, 128, 127, Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_OrderN(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, id(infinity, TrUserData), F@_5, TrUserData);
d_field_OrderN_value(<<0:16, 128, 255, Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_OrderN(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, id('-infinity', TrUserData), F@_5,
			      TrUserData);
d_field_OrderN_value(<<_:16, 1:1, _:7, _:1, 127:7,
		       Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_OrderN(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, id(nan, TrUserData), F@_5, TrUserData);
d_field_OrderN_value(<<Value:32/little-float,
		       Rest/binary>>,
		     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    dfp_read_field_def_OrderN(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, id(Value, TrUserData), F@_5, TrUserData).

d_field_OrderN_nameI(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_OrderN_nameI(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_OrderN_nameI(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OrderN(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, TrUserData).

skip_varint_OrderN(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_OrderN(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
skip_varint_OrderN(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_OrderN(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_OrderN(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderN(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_OrderN(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderN(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_group_OrderN(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderN(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_32_OrderN(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_OrderN(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_64_OrderN(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_OrderN(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

decode_msg_OrderAckS(Bin, TrUserData) ->
    dfp_read_field_def_OrderAckS(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_OrderAckS(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderAckS_ack(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_OrderAckS(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderAckS_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_OrderAckS(<<26, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderAckS_nameI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_OrderAckS(<<32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_OrderAckS_outdated(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_OrderAckS(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, _) ->
    #'OrderAckS'{ack = F@_1, msg = F@_2, nameI = F@_3,
		 outdated = F@_4};
dfp_read_field_def_OrderAckS(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData) ->
    dg_read_field_def_OrderAckS(Other, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

dg_read_field_def_OrderAckS(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderAckS(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_OrderAckS(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OrderAckS_ack(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      18 ->
	  d_field_OrderAckS_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      26 ->
	  d_field_OrderAckS_nameI(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      32 ->
	  d_field_OrderAckS_outdated(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OrderAckS(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    1 ->
		skip_64_OrderAckS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
	    2 ->
		skip_length_delimited_OrderAckS(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_OrderAckS(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_OrderAckS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  TrUserData)
	  end
    end;
dg_read_field_def_OrderAckS(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, _) ->
    #'OrderAckS'{ack = F@_1, msg = F@_2, nameI = F@_3,
		 outdated = F@_4}.

d_field_OrderAckS_ack(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OrderAckS_ack(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_OrderAckS_ack(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_OrderAckS(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, F@_4, TrUserData).

d_field_OrderAckS_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OrderAckS_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_OrderAckS_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OrderAckS(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, F@_4, TrUserData).

d_field_OrderAckS_nameI(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OrderAckS_nameI(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_OrderAckS_nameI(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OrderAckS(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, F@_4, TrUserData).

d_field_OrderAckS_outdated(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_OrderAckS_outdated(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_OrderAckS_outdated(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_OrderAckS(RestF, 0, 0, F@_1, F@_2,
				 F@_3, NewFValue, TrUserData).

skip_varint_OrderAckS(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_OrderAckS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
skip_varint_OrderAckS(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_OrderAckS(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_length_delimited_OrderAckS(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderAckS(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
skip_length_delimited_OrderAckS(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderAckS(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_group_OrderAckS(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderAckS(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_32_OrderAckS(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_OrderAckS(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_64_OrderAckS(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_OrderAckS(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

decode_msg_OrderAckI(Bin, TrUserData) ->
    dfp_read_field_def_OrderAckI(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_OrderAckI(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, TrUserData) ->
    d_field_OrderAckI_ack(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_OrderAckI(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_OrderAckI_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_OrderAckI(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_OrderAckI_outdated(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_OrderAckI(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #'OrderAckI'{ack = F@_1, msg = F@_2, outdated = F@_3};
dfp_read_field_def_OrderAckI(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    dg_read_field_def_OrderAckI(Other, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

dg_read_field_def_OrderAckI(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OrderAckI(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_OrderAckI(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_OrderAckI_ack(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      18 ->
	  d_field_OrderAckI_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      24 ->
	  d_field_OrderAckI_outdated(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OrderAckI(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    1 ->
		skip_64_OrderAckI(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    2 ->
		skip_length_delimited_OrderAckI(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    3 ->
		skip_group_OrderAckI(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, TrUserData);
	    5 ->
		skip_32_OrderAckI(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData)
	  end
    end;
dg_read_field_def_OrderAckI(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #'OrderAckI'{ack = F@_1, msg = F@_2, outdated = F@_3}.

d_field_OrderAckI_ack(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_OrderAckI_ack(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_OrderAckI_ack(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_OrderAckI(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, TrUserData).

d_field_OrderAckI_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_OrderAckI_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_OrderAckI_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_OrderAckI(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, TrUserData).

d_field_OrderAckI_outdated(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_OrderAckI_outdated(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_OrderAckI_outdated(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_OrderAckI(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, TrUserData).

skip_varint_OrderAckI(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_OrderAckI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
skip_varint_OrderAckI(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_OrderAckI(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_length_delimited_OrderAckI(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_OrderAckI(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
skip_length_delimited_OrderAckI(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OrderAckI(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, TrUserData).

skip_group_OrderAckI(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OrderAckI(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_32_OrderAckI(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_OrderAckI(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_64_OrderAckI(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_OrderAckI(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

decode_msg_SubS(Bin, TrUserData) ->
    dfp_read_field_def_SubS(Bin, 0, 0,
			    id(undefined, TrUserData), id([], TrUserData),
			    TrUserData).

dfp_read_field_def_SubS(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_SubS_nameI(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
dfp_read_field_def_SubS(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_SubS_subs(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_SubS(<<>>, 0, 0, F@_1, R1,
			TrUserData) ->
    #'SubS'{nameI = F@_1,
	    subs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_SubS(Other, Z1, Z2, F@_1, F@_2,
			TrUserData) ->
    dg_read_field_def_SubS(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData).

dg_read_field_def_SubS(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SubS(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
dg_read_field_def_SubS(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SubS_nameI(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_SubS_subs(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SubS(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_SubS(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_SubS(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    3 ->
		skip_group_SubS(Rest, Key bsr 3, 0, F@_1, F@_2,
				TrUserData);
	    5 -> skip_32_SubS(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_SubS(<<>>, 0, 0, F@_1, R1,
		       TrUserData) ->
    #'SubS'{nameI = F@_1,
	    subs = lists_reverse(R1, TrUserData)}.

d_field_SubS_nameI(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SubS_nameI(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, TrUserData);
d_field_SubS_nameI(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SubS(RestF, 0, 0, NewFValue, F@_2,
			    TrUserData).

d_field_SubS_subs(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SubS_subs(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, TrUserData);
d_field_SubS_subs(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SubS(RestF, 0, 0, F@_1,
			    cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_SubS(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    skip_varint_SubS(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_SubS(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_SubS(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_length_delimited_SubS(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_SubS(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
skip_length_delimited_SubS(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SubS(Rest2, 0, 0, F@_1, F@_2,
			    TrUserData).

skip_group_SubS(Bin, FNum, Z2, F@_1, F@_2,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SubS(Rest, 0, Z2, F@_1, F@_2,
			    TrUserData).

skip_32_SubS(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_SubS(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_64_SubS(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_SubS(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

decode_msg_SubN(Bin, TrUserData) ->
    dfp_read_field_def_SubN(Bin, 0, 0,
			    id(undefined, TrUserData), id([], TrUserData),
			    TrUserData).

dfp_read_field_def_SubN(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_SubN_nameI(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
dfp_read_field_def_SubN(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    d_field_SubN_subs(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_SubN(<<>>, 0, 0, F@_1, R1,
			TrUserData) ->
    #'SubN'{nameI = F@_1,
	    subs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_SubN(Other, Z1, Z2, F@_1, F@_2,
			TrUserData) ->
    dg_read_field_def_SubN(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData).

dg_read_field_def_SubN(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SubN(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
dg_read_field_def_SubN(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SubN_nameI(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_SubN_subs(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SubN(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_SubN(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_SubN(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    3 ->
		skip_group_SubN(Rest, Key bsr 3, 0, F@_1, F@_2,
				TrUserData);
	    5 -> skip_32_SubN(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_SubN(<<>>, 0, 0, F@_1, R1,
		       TrUserData) ->
    #'SubN'{nameI = F@_1,
	    subs = lists_reverse(R1, TrUserData)}.

d_field_SubN_nameI(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SubN_nameI(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, TrUserData);
d_field_SubN_nameI(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SubN(RestF, 0, 0, NewFValue, F@_2,
			    TrUserData).

d_field_SubN_subs(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SubN_subs(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, TrUserData);
d_field_SubN_subs(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SubN(RestF, 0, 0, F@_1,
			    cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_SubN(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    skip_varint_SubN(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_SubN(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_SubN(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_length_delimited_SubN(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_SubN(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
skip_length_delimited_SubN(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SubN(Rest2, 0, 0, F@_1, F@_2,
			    TrUserData).

skip_group_SubN(Bin, FNum, Z2, F@_1, F@_2,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SubN(Rest, 0, Z2, F@_1, F@_2,
			    TrUserData).

skip_32_SubN(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_SubN(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

skip_64_SubN(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     TrUserData) ->
    dfp_read_field_def_SubN(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData).

decode_msg_ProductionS(Bin, TrUserData) ->
    dfp_read_field_def_ProductionS(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ProductionS(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ProductionS_nameM(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_ProductionS(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ProductionS_nameP(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_ProductionS(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ProductionS_quant(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_ProductionS(<<37, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_ProductionS_value(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_ProductionS(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, _) ->
    #'ProductionS'{nameM = F@_1, nameP = F@_2, quant = F@_3,
		   value = F@_4};
dfp_read_field_def_ProductionS(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_ProductionS(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

dg_read_field_def_ProductionS(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ProductionS(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
dg_read_field_def_ProductionS(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ProductionS_nameM(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      18 ->
	  d_field_ProductionS_nameP(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      24 ->
	  d_field_ProductionS_quant(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      37 ->
	  d_field_ProductionS_value(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ProductionS(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData);
	    1 ->
		skip_64_ProductionS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    2 ->
		skip_length_delimited_ProductionS(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_ProductionS(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_ProductionS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData)
	  end
    end;
dg_read_field_def_ProductionS(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, _) ->
    #'ProductionS'{nameM = F@_1, nameP = F@_2, quant = F@_3,
		   value = F@_4}.

d_field_ProductionS_nameM(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ProductionS_nameM(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ProductionS_nameM(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ProductionS(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, TrUserData).

d_field_ProductionS_nameP(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ProductionS_nameP(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ProductionS_nameP(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ProductionS(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, TrUserData).

d_field_ProductionS_quant(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_ProductionS_quant(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ProductionS_quant(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ProductionS(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, TrUserData).

d_field_ProductionS_value(<<0:16, 128, 127,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_ProductionS(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, id(infinity, TrUserData), TrUserData);
d_field_ProductionS_value(<<0:16, 128, 255,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_ProductionS(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, id('-infinity', TrUserData),
				   TrUserData);
d_field_ProductionS_value(<<_:16, 1:1, _:7, _:1, 127:7,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_ProductionS(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, id(nan, TrUserData), TrUserData);
d_field_ProductionS_value(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_ProductionS(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, id(Value, TrUserData), TrUserData).

skip_varint_ProductionS(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_ProductionS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
skip_varint_ProductionS(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ProductionS(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_length_delimited_ProductionS(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_ProductionS(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
skip_length_delimited_ProductionS(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProductionS(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_group_ProductionS(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ProductionS(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_32_ProductionS(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ProductionS(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_64_ProductionS(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ProductionS(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

decode_msg_ProductionM(Bin, TrUserData) ->
    dfp_read_field_def_ProductionM(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ProductionM(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ProductionM_nameP(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_ProductionM(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ProductionM_quant(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_ProductionM(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ProductionM_value(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_ProductionM(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #'ProductionM'{nameP = F@_1, quant = F@_2,
		   value = F@_3};
dfp_read_field_def_ProductionM(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    dg_read_field_def_ProductionM(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

dg_read_field_def_ProductionM(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ProductionM(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_ProductionM(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ProductionM_nameP(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      16 ->
	  d_field_ProductionM_quant(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      24 ->
	  d_field_ProductionM_value(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ProductionM(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    1 ->
		skip_64_ProductionM(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    2 ->
		skip_length_delimited_ProductionM(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_ProductionM(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, TrUserData);
	    5 ->
		skip_32_ProductionM(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData)
	  end
    end;
dg_read_field_def_ProductionM(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #'ProductionM'{nameP = F@_1, quant = F@_2,
		   value = F@_3}.

d_field_ProductionM_nameP(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ProductionM_nameP(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_ProductionM_nameP(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ProductionM(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, TrUserData).

d_field_ProductionM_quant(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ProductionM_quant(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_ProductionM_quant(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ProductionM(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, TrUserData).

d_field_ProductionM_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ProductionM_value(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_ProductionM_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_ProductionM(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, TrUserData).

skip_varint_ProductionM(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_ProductionM(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
skip_varint_ProductionM(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ProductionM(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_length_delimited_ProductionM(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ProductionM(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
skip_length_delimited_ProductionM(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ProductionM(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, TrUserData).

skip_group_ProductionM(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ProductionM(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_32_ProductionM(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ProductionM(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_64_ProductionM(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ProductionM(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

decode_msg_ResultS(Bin, TrUserData) ->
    dfp_read_field_def_ResultS(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ResultS(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ResultS_result(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_ResultS(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ResultS_msg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_ResultS(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_ResultS_nameI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_ResultS(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #'ResultS'{result = F@_1, msg = F@_2, nameI = F@_3};
dfp_read_field_def_ResultS(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_ResultS(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_ResultS(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResultS(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_ResultS(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ResultS_result(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      18 ->
	  d_field_ResultS_msg(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      26 ->
	  d_field_ResultS_nameI(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResultS(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_ResultS(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_ResultS(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_ResultS(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_ResultS(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_ResultS(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    #'ResultS'{result = F@_1, msg = F@_2, nameI = F@_3}.

d_field_ResultS_result(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ResultS_result(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_ResultS_result(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_ResultS(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, TrUserData).

d_field_ResultS_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ResultS_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_ResultS_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ResultS(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, TrUserData).

d_field_ResultS_nameI(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_ResultS_nameI(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_ResultS_nameI(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ResultS(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, TrUserData).

skip_varint_ResultS(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_ResultS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_ResultS(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ResultS(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_ResultS(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResultS(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_ResultS(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResultS(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_ResultS(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResultS(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_ResultS(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ResultS(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_ResultS(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_ResultS(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

decode_msg_ResultI(Bin, TrUserData) ->
    dfp_read_field_def_ResultI(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ResultI(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_ResultI_result(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_ResultI(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_ResultI_msg(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_ResultI(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'ResultI'{result = F@_1, msg = F@_2};
dfp_read_field_def_ResultI(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_ResultI(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_ResultI(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResultI(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_ResultI(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ResultI_result(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_ResultI_msg(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResultI(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_ResultI(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_ResultI(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_ResultI(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_ResultI(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_ResultI(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'ResultI'{result = F@_1, msg = F@_2}.

d_field_ResultI_result(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ResultI_result(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_ResultI_result(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_ResultI(RestF, 0, 0, NewFValue, F@_2,
			       TrUserData).

d_field_ResultI_msg(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ResultI_msg(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_ResultI_msg(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ResultI(RestF, 0, 0, F@_1, NewFValue,
			       TrUserData).

skip_varint_ResultI(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_ResultI(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_ResultI(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ResultI(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_ResultI(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResultI(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_ResultI(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResultI(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_ResultI(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResultI(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_ResultI(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_ResultI(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_ResultI(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_ResultI(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

decode_msg_InfoS(Bin, TrUserData) ->
    dfp_read_field_def_InfoS(Bin, 0, 0,
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_InfoS(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_InfoS_nameM(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_InfoS(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_InfoS_nameP(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_InfoS(<<24, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_InfoS_minimum(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_InfoS(<<32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_InfoS_maximum(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_InfoS(<<45, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_InfoS_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_InfoS(<<48, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_InfoS_period(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_InfoS(<<58, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_InfoS_nameI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_InfoS(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, _) ->
    #'InfoS'{nameM = F@_1, nameP = F@_2, minimum = F@_3,
	     maximum = F@_4, value = F@_5, period = F@_6,
	     nameI = F@_7};
dfp_read_field_def_InfoS(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_InfoS(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_InfoS(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InfoS(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData);
dg_read_field_def_InfoS(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_InfoS_nameM(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      18 ->
	  d_field_InfoS_nameP(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      24 ->
	  d_field_InfoS_minimum(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, TrUserData);
      32 ->
	  d_field_InfoS_maximum(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, TrUserData);
      45 ->
	  d_field_InfoS_value(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      48 ->
	  d_field_InfoS_period(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      58 ->
	  d_field_InfoS_nameI(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InfoS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_InfoS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_InfoS(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, F@_7,
					    TrUserData);
	    3 ->
		skip_group_InfoS(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_InfoS(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_InfoS(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, _) ->
    #'InfoS'{nameM = F@_1, nameP = F@_2, minimum = F@_3,
	     maximum = F@_4, value = F@_5, period = F@_6,
	     nameI = F@_7}.

d_field_InfoS_nameM(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_InfoS_nameM(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_InfoS_nameM(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_InfoS(RestF, 0, 0, NewFValue, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_InfoS_nameP(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_InfoS_nameP(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_InfoS_nameP(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_InfoS(RestF, 0, 0, F@_1, NewFValue,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_InfoS_minimum(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_InfoS_minimum(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_InfoS_minimum(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_InfoS(RestF, 0, 0, F@_1, F@_2,
			     NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_InfoS_maximum(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_InfoS_maximum(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_InfoS_maximum(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_InfoS(RestF, 0, 0, F@_1, F@_2, F@_3,
			     NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_InfoS_value(<<0:16, 128, 127, Rest/binary>>, Z1,
		    Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
		    TrUserData) ->
    dfp_read_field_def_InfoS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, id(infinity, TrUserData), F@_6, F@_7,
			     TrUserData);
d_field_InfoS_value(<<0:16, 128, 255, Rest/binary>>, Z1,
		    Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
		    TrUserData) ->
    dfp_read_field_def_InfoS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, id('-infinity', TrUserData), F@_6, F@_7,
			     TrUserData);
d_field_InfoS_value(<<_:16, 1:1, _:7, _:1, 127:7,
		      Rest/binary>>,
		    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
		    TrUserData) ->
    dfp_read_field_def_InfoS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, id(nan, TrUserData), F@_6, F@_7, TrUserData);
d_field_InfoS_value(<<Value:32/little-float,
		      Rest/binary>>,
		    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
		    TrUserData) ->
    dfp_read_field_def_InfoS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, id(Value, TrUserData), F@_6, F@_7,
			     TrUserData).

d_field_InfoS_period(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_InfoS_period(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_InfoS_period(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_InfoS(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_InfoS_nameI(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_InfoS_nameI(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_InfoS_nameI(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_InfoS(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_InfoS(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_InfoS(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, TrUserData);
skip_varint_InfoS(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_InfoS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_InfoS(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 57 ->
    skip_length_delimited_InfoS(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
skip_length_delimited_InfoS(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InfoS(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_InfoS(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		 F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InfoS(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_InfoS(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_InfoS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_InfoS(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_InfoS(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_InfoI(Bin, TrUserData) ->
    dfp_read_field_def_InfoI(Bin, 0, 0,
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_InfoI(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_InfoI_nameM(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_InfoI(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_InfoI_nameP(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_InfoI(<<24, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_InfoI_minimum(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_InfoI(<<32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_InfoI_maximum(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_InfoI(<<45, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_InfoI_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_InfoI(<<48, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_InfoI_period(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_InfoI(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, _) ->
    #'InfoI'{nameM = F@_1, nameP = F@_2, minimum = F@_3,
	     maximum = F@_4, value = F@_5, period = F@_6};
dfp_read_field_def_InfoI(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_InfoI(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_InfoI(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_InfoI(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_InfoI(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_InfoI_nameM(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, TrUserData);
      18 ->
	  d_field_InfoI_nameP(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, TrUserData);
      24 ->
	  d_field_InfoI_minimum(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, TrUserData);
      32 ->
	  d_field_InfoI_maximum(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, TrUserData);
      45 ->
	  d_field_InfoI_value(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, TrUserData);
      48 ->
	  d_field_InfoI_period(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InfoI(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_InfoI(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, TrUserData);
	    2 ->
		skip_length_delimited_InfoI(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, TrUserData);
	    3 ->
		skip_group_InfoI(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_InfoI(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, TrUserData)
	  end
    end;
dg_read_field_def_InfoI(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, _) ->
    #'InfoI'{nameM = F@_1, nameP = F@_2, minimum = F@_3,
	     maximum = F@_4, value = F@_5, period = F@_6}.

d_field_InfoI_nameM(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_InfoI_nameM(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_InfoI_nameM(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_InfoI(RestF, 0, 0, NewFValue, F@_2,
			     F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_InfoI_nameP(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_InfoI_nameP(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_InfoI_nameP(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_InfoI(RestF, 0, 0, F@_1, NewFValue,
			     F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_InfoI_minimum(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_InfoI_minimum(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_InfoI_minimum(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_InfoI(RestF, 0, 0, F@_1, F@_2,
			     NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_InfoI_maximum(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_InfoI_maximum(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_InfoI_maximum(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_InfoI(RestF, 0, 0, F@_1, F@_2, F@_3,
			     NewFValue, F@_5, F@_6, TrUserData).

d_field_InfoI_value(<<0:16, 128, 127, Rest/binary>>, Z1,
		    Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    dfp_read_field_def_InfoI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, id(infinity, TrUserData), F@_6, TrUserData);
d_field_InfoI_value(<<0:16, 128, 255, Rest/binary>>, Z1,
		    Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    dfp_read_field_def_InfoI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, id('-infinity', TrUserData), F@_6,
			     TrUserData);
d_field_InfoI_value(<<_:16, 1:1, _:7, _:1, 127:7,
		      Rest/binary>>,
		    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    dfp_read_field_def_InfoI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, id(nan, TrUserData), F@_6, TrUserData);
d_field_InfoI_value(<<Value:32/little-float,
		      Rest/binary>>,
		    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    dfp_read_field_def_InfoI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, id(Value, TrUserData), F@_6, TrUserData).

d_field_InfoI_period(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_InfoI_period(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_InfoI_period(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_InfoI(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, NewFValue, TrUserData).

skip_varint_InfoI(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_InfoI(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, TrUserData);
skip_varint_InfoI(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_InfoI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_InfoI(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData)
    when N < 57 ->
    skip_length_delimited_InfoI(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_InfoI(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InfoI(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData).

skip_group_InfoI(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		 F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_InfoI(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData).

skip_32_InfoI(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_InfoI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData).

skip_64_InfoI(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_InfoI(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData).

decode_msg_Server(Bin, TrUserData) ->
    dfp_read_field_def_Server(Bin, 0, 0,
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Server(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    d_field_Server_m1(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Server(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    d_field_Server_m2(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Server(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    d_field_Server_m3(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Server(<<34, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    d_field_Server_m4(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Server(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    d_field_Server_m5(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Server(<<50, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    d_field_Server_m6(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Server(<<58, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    d_field_Server_m7(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Server(<<>>, 0, 0, F@_1, _) ->
    #'Server'{msg = F@_1};
dfp_read_field_def_Server(Other, Z1, Z2, F@_1,
			  TrUserData) ->
    dg_read_field_def_Server(Other, Z1, Z2, F@_1,
			     TrUserData).

dg_read_field_def_Server(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Server(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
dg_read_field_def_Server(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Server_m1(Rest, 0, 0, F@_1, TrUserData);
      18 -> d_field_Server_m2(Rest, 0, 0, F@_1, TrUserData);
      26 -> d_field_Server_m3(Rest, 0, 0, F@_1, TrUserData);
      34 -> d_field_Server_m4(Rest, 0, 0, F@_1, TrUserData);
      42 -> d_field_Server_m5(Rest, 0, 0, F@_1, TrUserData);
      50 -> d_field_Server_m6(Rest, 0, 0, F@_1, TrUserData);
      58 -> d_field_Server_m7(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Server(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Server(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Server(Rest, 0, 0, F@_1,
					     TrUserData);
	    3 ->
		skip_group_Server(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_Server(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Server(<<>>, 0, 0, F@_1, _) ->
    #'Server'{msg = F@_1}.

d_field_Server_m1(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, TrUserData)
    when N < 57 ->
    d_field_Server_m1(Rest, N + 7, X bsl N + Acc, F@_1,
		      TrUserData);
d_field_Server_m1(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_DisponibilityS(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Server(RestF, 0, 0,
			      case Prev of
				undefined -> id({m1, NewFValue}, TrUserData);
				{m1, MVPrev} ->
				    id({m1,
					merge_msg_DisponibilityS(MVPrev,
								 NewFValue,
								 TrUserData)},
				       TrUserData);
				_ -> id({m1, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Server_m2(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, TrUserData)
    when N < 57 ->
    d_field_Server_m2(Rest, N + 7, X bsl N + Acc, F@_1,
		      TrUserData);
d_field_Server_m2(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_OrderS(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Server(RestF, 0, 0,
			      case Prev of
				undefined -> id({m2, NewFValue}, TrUserData);
				{m2, MVPrev} ->
				    id({m2,
					merge_msg_OrderS(MVPrev, NewFValue,
							 TrUserData)},
				       TrUserData);
				_ -> id({m2, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Server_m3(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, TrUserData)
    when N < 57 ->
    d_field_Server_m3(Rest, N + 7, X bsl N + Acc, F@_1,
		      TrUserData);
d_field_Server_m3(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_SubS(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Server(RestF, 0, 0,
			      case Prev of
				undefined -> id({m3, NewFValue}, TrUserData);
				{m3, MVPrev} ->
				    id({m3,
					merge_msg_SubS(MVPrev, NewFValue,
						       TrUserData)},
				       TrUserData);
				_ -> id({m3, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Server_m4(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, TrUserData)
    when N < 57 ->
    d_field_Server_m4(Rest, N + 7, X bsl N + Acc, F@_1,
		      TrUserData);
d_field_Server_m4(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResultS(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Server(RestF, 0, 0,
			      case Prev of
				undefined -> id({m4, NewFValue}, TrUserData);
				{m4, MVPrev} ->
				    id({m4,
					merge_msg_ResultS(MVPrev, NewFValue,
							  TrUserData)},
				       TrUserData);
				_ -> id({m4, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Server_m5(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, TrUserData)
    when N < 57 ->
    d_field_Server_m5(Rest, N + 7, X bsl N + Acc, F@_1,
		      TrUserData);
d_field_Server_m5(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_InfoS(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Server(RestF, 0, 0,
			      case Prev of
				undefined -> id({m5, NewFValue}, TrUserData);
				{m5, MVPrev} ->
				    id({m5,
					merge_msg_InfoS(MVPrev, NewFValue,
							TrUserData)},
				       TrUserData);
				_ -> id({m5, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Server_m6(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, TrUserData)
    when N < 57 ->
    d_field_Server_m6(Rest, N + 7, X bsl N + Acc, F@_1,
		      TrUserData);
d_field_Server_m6(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ProductionS(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Server(RestF, 0, 0,
			      case Prev of
				undefined -> id({m6, NewFValue}, TrUserData);
				{m6, MVPrev} ->
				    id({m6,
					merge_msg_ProductionS(MVPrev, NewFValue,
							      TrUserData)},
				       TrUserData);
				_ -> id({m6, NewFValue}, TrUserData)
			      end,
			      TrUserData).

d_field_Server_m7(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, TrUserData)
    when N < 57 ->
    d_field_Server_m7(Rest, N + 7, X bsl N + Acc, F@_1,
		      TrUserData);
d_field_Server_m7(<<0:1, X:7, Rest/binary>>, N, Acc,
		  Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_OrderAckS(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Server(RestF, 0, 0,
			      case Prev of
				undefined -> id({m7, NewFValue}, TrUserData);
				{m7, MVPrev} ->
				    id({m7,
					merge_msg_OrderAckS(MVPrev, NewFValue,
							    TrUserData)},
				       TrUserData);
				_ -> id({m7, NewFValue}, TrUserData)
			      end,
			      TrUserData).

skip_varint_Server(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, TrUserData) ->
    skip_varint_Server(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Server(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, TrUserData) ->
    dfp_read_field_def_Server(Rest, Z1, Z2, F@_1,
			      TrUserData).

skip_length_delimited_Server(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Server(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
skip_length_delimited_Server(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Server(Rest2, 0, 0, F@_1,
			      TrUserData).

skip_group_Server(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Server(Rest, 0, Z2, F@_1,
			      TrUserData).

skip_32_Server(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       TrUserData) ->
    dfp_read_field_def_Server(Rest, Z1, Z2, F@_1,
			      TrUserData).

skip_64_Server(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       TrUserData) ->
    dfp_read_field_def_Server(Rest, Z1, Z2, F@_1,
			      TrUserData).

decode_msg_Importer(Bin, TrUserData) ->
    dfp_read_field_def_Importer(Bin, 0, 0,
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Importer(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Importer_ordack(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Importer(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Importer_result(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Importer(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Importer_info(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Importer(<<>>, 0, 0, F@_1, _) ->
    #'Importer'{msg = F@_1};
dfp_read_field_def_Importer(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_Importer(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_Importer(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Importer(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_Importer(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Importer_ordack(Rest, 0, 0, F@_1, TrUserData);
      18 ->
	  d_field_Importer_result(Rest, 0, 0, F@_1, TrUserData);
      26 ->
	  d_field_Importer_info(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Importer(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Importer(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Importer(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_Importer(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_Importer(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Importer(<<>>, 0, 0, F@_1, _) ->
    #'Importer'{msg = F@_1}.

d_field_Importer_ordack(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Importer_ordack(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_Importer_ordack(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_OrderAckI(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Importer(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({ordack, NewFValue}, TrUserData);
				  {ordack, MVPrev} ->
				      id({ordack,
					  merge_msg_OrderAckI(MVPrev, NewFValue,
							      TrUserData)},
					 TrUserData);
				  _ -> id({ordack, NewFValue}, TrUserData)
				end,
				TrUserData).

d_field_Importer_result(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Importer_result(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_Importer_result(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResultI(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Importer(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({result, NewFValue}, TrUserData);
				  {result, MVPrev} ->
				      id({result,
					  merge_msg_ResultI(MVPrev, NewFValue,
							    TrUserData)},
					 TrUserData);
				  _ -> id({result, NewFValue}, TrUserData)
				end,
				TrUserData).

d_field_Importer_info(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_Importer_info(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_Importer_info(<<0:1, X:7, Rest/binary>>, N, Acc,
		      Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_InfoI(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Importer(RestF, 0, 0,
				case Prev of
				  undefined ->
				      id({info, NewFValue}, TrUserData);
				  {info, MVPrev} ->
				      id({info,
					  merge_msg_InfoI(MVPrev, NewFValue,
							  TrUserData)},
					 TrUserData);
				  _ -> id({info, NewFValue}, TrUserData)
				end,
				TrUserData).

skip_varint_Importer(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_Importer(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Importer(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_Importer(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_Importer(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Importer(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Importer(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Importer(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_Importer(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Importer(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_Importer(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_Importer(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_Importer(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_Importer(Rest, Z1, Z2, F@_1,
				TrUserData).

decode_msg_Negotiator(Bin, TrUserData) ->
    dfp_read_field_def_Negotiator(Bin, 0, 0,
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Negotiator(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_Negotiator_sub(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Negotiator(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_Negotiator_order(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_Negotiator(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_Negotiator_disponibility(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_Negotiator(<<>>, 0, 0, F@_1, _) ->
    #'Negotiator'{msg = F@_1};
dfp_read_field_def_Negotiator(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_Negotiator(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_Negotiator(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Negotiator(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_Negotiator(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Negotiator_sub(Rest, 0, 0, F@_1, TrUserData);
      18 ->
	  d_field_Negotiator_order(Rest, 0, 0, F@_1, TrUserData);
      26 ->
	  d_field_Negotiator_disponibility(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Negotiator(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Negotiator(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Negotiator(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_Negotiator(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_Negotiator(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Negotiator(<<>>, 0, 0, F@_1, _) ->
    #'Negotiator'{msg = F@_1}.

d_field_Negotiator_sub(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Negotiator_sub(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
d_field_Negotiator_sub(<<0:1, X:7, Rest/binary>>, N,
		       Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_SubN(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Negotiator(RestF, 0, 0,
				  case Prev of
				    undefined ->
					id({sub, NewFValue}, TrUserData);
				    {sub, MVPrev} ->
					id({sub,
					    merge_msg_SubN(MVPrev, NewFValue,
							   TrUserData)},
					   TrUserData);
				    _ -> id({sub, NewFValue}, TrUserData)
				  end,
				  TrUserData).

d_field_Negotiator_order(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Negotiator_order(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_Negotiator_order(<<0:1, X:7, Rest/binary>>, N,
			 Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_OrderN(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Negotiator(RestF, 0, 0,
				  case Prev of
				    undefined ->
					id({order, NewFValue}, TrUserData);
				    {order, MVPrev} ->
					id({order,
					    merge_msg_OrderN(MVPrev, NewFValue,
							     TrUserData)},
					   TrUserData);
				    _ -> id({order, NewFValue}, TrUserData)
				  end,
				  TrUserData).

d_field_Negotiator_disponibility(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Negotiator_disponibility(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_Negotiator_disponibility(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_DisponibilityN(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Negotiator(RestF, 0, 0,
				  case Prev of
				    undefined ->
					id({disponibility, NewFValue},
					   TrUserData);
				    {disponibility, MVPrev} ->
					id({disponibility,
					    merge_msg_DisponibilityN(MVPrev,
								     NewFValue,
								     TrUserData)},
					   TrUserData);
				    _ ->
					id({disponibility, NewFValue},
					   TrUserData)
				  end,
				  TrUserData).

skip_varint_Negotiator(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_Negotiator(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Negotiator(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_Negotiator(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_Negotiator(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Negotiator(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Negotiator(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Negotiator(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_Negotiator(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Negotiator(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_Negotiator(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_Negotiator(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_Negotiator(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_Negotiator(Rest, Z1, Z2, F@_1,
				  TrUserData).

'd_enum_MsgAuth.ClientType'(0) -> 'MANUFACTURER';
'd_enum_MsgAuth.ClientType'(1) -> 'IMPORTER';
'd_enum_MsgAuth.ClientType'(V) -> V.

'd_enum_MsgAuth.MsgType'(0) -> 'LOGIN';
'd_enum_MsgAuth.MsgType'(1) -> 'REGISTER';
'd_enum_MsgAuth.MsgType'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'MsgAuth' -> merge_msg_MsgAuth(Prev, New, TrUserData);
      'MsgAck' -> merge_msg_MsgAck(Prev, New, TrUserData);
      'DisponibilityS' ->
	  merge_msg_DisponibilityS(Prev, New, TrUserData);
      'DisponibilityN' ->
	  merge_msg_DisponibilityN(Prev, New, TrUserData);
      'OrderS' -> merge_msg_OrderS(Prev, New, TrUserData);
      'OrderN' -> merge_msg_OrderN(Prev, New, TrUserData);
      'OrderAckS' ->
	  merge_msg_OrderAckS(Prev, New, TrUserData);
      'OrderAckI' ->
	  merge_msg_OrderAckI(Prev, New, TrUserData);
      'SubS' -> merge_msg_SubS(Prev, New, TrUserData);
      'SubN' -> merge_msg_SubN(Prev, New, TrUserData);
      'ProductionS' ->
	  merge_msg_ProductionS(Prev, New, TrUserData);
      'ProductionM' ->
	  merge_msg_ProductionM(Prev, New, TrUserData);
      'ResultS' -> merge_msg_ResultS(Prev, New, TrUserData);
      'ResultI' -> merge_msg_ResultI(Prev, New, TrUserData);
      'InfoS' -> merge_msg_InfoS(Prev, New, TrUserData);
      'InfoI' -> merge_msg_InfoI(Prev, New, TrUserData);
      'Server' -> merge_msg_Server(Prev, New, TrUserData);
      'Importer' -> merge_msg_Importer(Prev, New, TrUserData);
      'Negotiator' ->
	  merge_msg_Negotiator(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_MsgAuth/3}).
merge_msg_MsgAuth(#'MsgAuth'{},
		  #'MsgAuth'{name = NFname, pass = NFpass,
			     ctype = NFctype, mtype = NFmtype},
		  _) ->
    #'MsgAuth'{name = NFname, pass = NFpass,
	       ctype = NFctype, mtype = NFmtype}.

-compile({nowarn_unused_function,merge_msg_MsgAck/3}).
merge_msg_MsgAck(#'MsgAck'{msg = PFmsg},
		 #'MsgAck'{ok = NFok, msg = NFmsg}, _) ->
    #'MsgAck'{ok = NFok,
	      msg =
		  if NFmsg =:= undefined -> PFmsg;
		     true -> NFmsg
		  end}.

-compile({nowarn_unused_function,merge_msg_DisponibilityS/3}).
merge_msg_DisponibilityS(#'DisponibilityS'{},
			 #'DisponibilityS'{nameM = NFnameM, nameP = NFnameP,
					   minimum = NFminimum,
					   maximum = NFmaximum, value = NFvalue,
					   period = NFperiod},
			 _) ->
    #'DisponibilityS'{nameM = NFnameM, nameP = NFnameP,
		      minimum = NFminimum, maximum = NFmaximum,
		      value = NFvalue, period = NFperiod}.

-compile({nowarn_unused_function,merge_msg_DisponibilityN/3}).
merge_msg_DisponibilityN(#'DisponibilityN'{},
			 #'DisponibilityN'{nameM = NFnameM, nameP = NFnameP,
					   minimum = NFminimum,
					   maximum = NFmaximum, value = NFvalue,
					   period = NFperiod},
			 _) ->
    #'DisponibilityN'{nameM = NFnameM, nameP = NFnameP,
		      minimum = NFminimum, maximum = NFmaximum,
		      value = NFvalue, period = NFperiod}.

-compile({nowarn_unused_function,merge_msg_OrderS/3}).
merge_msg_OrderS(#'OrderS'{},
		 #'OrderS'{nameM = NFnameM, nameP = NFnameP,
			   quant = NFquant, value = NFvalue, nameI = NFnameI},
		 _) ->
    #'OrderS'{nameM = NFnameM, nameP = NFnameP,
	      quant = NFquant, value = NFvalue, nameI = NFnameI}.

-compile({nowarn_unused_function,merge_msg_OrderN/3}).
merge_msg_OrderN(#'OrderN'{},
		 #'OrderN'{nameM = NFnameM, nameP = NFnameP,
			   quant = NFquant, value = NFvalue, nameI = NFnameI},
		 _) ->
    #'OrderN'{nameM = NFnameM, nameP = NFnameP,
	      quant = NFquant, value = NFvalue, nameI = NFnameI}.

-compile({nowarn_unused_function,merge_msg_OrderAckS/3}).
merge_msg_OrderAckS(#'OrderAckS'{msg = PFmsg},
		    #'OrderAckS'{ack = NFack, msg = NFmsg, nameI = NFnameI,
				 outdated = NFoutdated},
		    _) ->
    #'OrderAckS'{ack = NFack,
		 msg =
		     if NFmsg =:= undefined -> PFmsg;
			true -> NFmsg
		     end,
		 nameI = NFnameI, outdated = NFoutdated}.

-compile({nowarn_unused_function,merge_msg_OrderAckI/3}).
merge_msg_OrderAckI(#'OrderAckI'{msg = PFmsg},
		    #'OrderAckI'{ack = NFack, msg = NFmsg,
				 outdated = NFoutdated},
		    _) ->
    #'OrderAckI'{ack = NFack,
		 msg =
		     if NFmsg =:= undefined -> PFmsg;
			true -> NFmsg
		     end,
		 outdated = NFoutdated}.

-compile({nowarn_unused_function,merge_msg_SubS/3}).
merge_msg_SubS(#'SubS'{subs = PFsubs},
	       #'SubS'{nameI = NFnameI, subs = NFsubs}, TrUserData) ->
    #'SubS'{nameI = NFnameI,
	    subs =
		if PFsubs /= undefined, NFsubs /= undefined ->
		       'erlang_++'(PFsubs, NFsubs, TrUserData);
		   PFsubs == undefined -> NFsubs;
		   NFsubs == undefined -> PFsubs
		end}.

-compile({nowarn_unused_function,merge_msg_SubN/3}).
merge_msg_SubN(#'SubN'{subs = PFsubs},
	       #'SubN'{nameI = NFnameI, subs = NFsubs}, TrUserData) ->
    #'SubN'{nameI = NFnameI,
	    subs =
		if PFsubs /= undefined, NFsubs /= undefined ->
		       'erlang_++'(PFsubs, NFsubs, TrUserData);
		   PFsubs == undefined -> NFsubs;
		   NFsubs == undefined -> PFsubs
		end}.

-compile({nowarn_unused_function,merge_msg_ProductionS/3}).
merge_msg_ProductionS(#'ProductionS'{},
		      #'ProductionS'{nameM = NFnameM, nameP = NFnameP,
				     quant = NFquant, value = NFvalue},
		      _) ->
    #'ProductionS'{nameM = NFnameM, nameP = NFnameP,
		   quant = NFquant, value = NFvalue}.

-compile({nowarn_unused_function,merge_msg_ProductionM/3}).
merge_msg_ProductionM(#'ProductionM'{},
		      #'ProductionM'{nameP = NFnameP, quant = NFquant,
				     value = NFvalue},
		      _) ->
    #'ProductionM'{nameP = NFnameP, quant = NFquant,
		   value = NFvalue}.

-compile({nowarn_unused_function,merge_msg_ResultS/3}).
merge_msg_ResultS(#'ResultS'{},
		  #'ResultS'{result = NFresult, msg = NFmsg,
			     nameI = NFnameI},
		  _) ->
    #'ResultS'{result = NFresult, msg = NFmsg,
	       nameI = NFnameI}.

-compile({nowarn_unused_function,merge_msg_ResultI/3}).
merge_msg_ResultI(#'ResultI'{},
		  #'ResultI'{result = NFresult, msg = NFmsg}, _) ->
    #'ResultI'{result = NFresult, msg = NFmsg}.

-compile({nowarn_unused_function,merge_msg_InfoS/3}).
merge_msg_InfoS(#'InfoS'{},
		#'InfoS'{nameM = NFnameM, nameP = NFnameP,
			 minimum = NFminimum, maximum = NFmaximum,
			 value = NFvalue, period = NFperiod, nameI = NFnameI},
		_) ->
    #'InfoS'{nameM = NFnameM, nameP = NFnameP,
	     minimum = NFminimum, maximum = NFmaximum,
	     value = NFvalue, period = NFperiod, nameI = NFnameI}.

-compile({nowarn_unused_function,merge_msg_InfoI/3}).
merge_msg_InfoI(#'InfoI'{},
		#'InfoI'{nameM = NFnameM, nameP = NFnameP,
			 minimum = NFminimum, maximum = NFmaximum,
			 value = NFvalue, period = NFperiod},
		_) ->
    #'InfoI'{nameM = NFnameM, nameP = NFnameP,
	     minimum = NFminimum, maximum = NFmaximum,
	     value = NFvalue, period = NFperiod}.

-compile({nowarn_unused_function,merge_msg_Server/3}).
merge_msg_Server(#'Server'{msg = PFmsg},
		 #'Server'{msg = NFmsg}, TrUserData) ->
    #'Server'{msg =
		  case {PFmsg, NFmsg} of
		    {{m1, OPFmsg}, {m1, ONFmsg}} ->
			{m1,
			 merge_msg_DisponibilityS(OPFmsg, ONFmsg, TrUserData)};
		    {{m2, OPFmsg}, {m2, ONFmsg}} ->
			{m2, merge_msg_OrderS(OPFmsg, ONFmsg, TrUserData)};
		    {{m3, OPFmsg}, {m3, ONFmsg}} ->
			{m3, merge_msg_SubS(OPFmsg, ONFmsg, TrUserData)};
		    {{m4, OPFmsg}, {m4, ONFmsg}} ->
			{m4, merge_msg_ResultS(OPFmsg, ONFmsg, TrUserData)};
		    {{m5, OPFmsg}, {m5, ONFmsg}} ->
			{m5, merge_msg_InfoS(OPFmsg, ONFmsg, TrUserData)};
		    {{m6, OPFmsg}, {m6, ONFmsg}} ->
			{m6, merge_msg_ProductionS(OPFmsg, ONFmsg, TrUserData)};
		    {{m7, OPFmsg}, {m7, ONFmsg}} ->
			{m7, merge_msg_OrderAckS(OPFmsg, ONFmsg, TrUserData)};
		    {_, undefined} -> PFmsg;
		    _ -> NFmsg
		  end}.

-compile({nowarn_unused_function,merge_msg_Importer/3}).
merge_msg_Importer(#'Importer'{msg = PFmsg},
		   #'Importer'{msg = NFmsg}, TrUserData) ->
    #'Importer'{msg =
		    case {PFmsg, NFmsg} of
		      {{ordack, OPFmsg}, {ordack, ONFmsg}} ->
			  {ordack,
			   merge_msg_OrderAckI(OPFmsg, ONFmsg, TrUserData)};
		      {{result, OPFmsg}, {result, ONFmsg}} ->
			  {result,
			   merge_msg_ResultI(OPFmsg, ONFmsg, TrUserData)};
		      {{info, OPFmsg}, {info, ONFmsg}} ->
			  {info, merge_msg_InfoI(OPFmsg, ONFmsg, TrUserData)};
		      {_, undefined} -> PFmsg;
		      _ -> NFmsg
		    end}.

-compile({nowarn_unused_function,merge_msg_Negotiator/3}).
merge_msg_Negotiator(#'Negotiator'{msg = PFmsg},
		     #'Negotiator'{msg = NFmsg}, TrUserData) ->
    #'Negotiator'{msg =
		      case {PFmsg, NFmsg} of
			{{sub, OPFmsg}, {sub, ONFmsg}} ->
			    {sub, merge_msg_SubN(OPFmsg, ONFmsg, TrUserData)};
			{{order, OPFmsg}, {order, ONFmsg}} ->
			    {order,
			     merge_msg_OrderN(OPFmsg, ONFmsg, TrUserData)};
			{{disponibility, OPFmsg}, {disponibility, ONFmsg}} ->
			    {disponibility,
			     merge_msg_DisponibilityN(OPFmsg, ONFmsg,
						      TrUserData)};
			{_, undefined} -> PFmsg;
			_ -> NFmsg
		      end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'MsgAuth' -> v_msg_MsgAuth(Msg, [MsgName], TrUserData);
      'MsgAck' -> v_msg_MsgAck(Msg, [MsgName], TrUserData);
      'DisponibilityS' ->
	  v_msg_DisponibilityS(Msg, [MsgName], TrUserData);
      'DisponibilityN' ->
	  v_msg_DisponibilityN(Msg, [MsgName], TrUserData);
      'OrderS' -> v_msg_OrderS(Msg, [MsgName], TrUserData);
      'OrderN' -> v_msg_OrderN(Msg, [MsgName], TrUserData);
      'OrderAckS' ->
	  v_msg_OrderAckS(Msg, [MsgName], TrUserData);
      'OrderAckI' ->
	  v_msg_OrderAckI(Msg, [MsgName], TrUserData);
      'SubS' -> v_msg_SubS(Msg, [MsgName], TrUserData);
      'SubN' -> v_msg_SubN(Msg, [MsgName], TrUserData);
      'ProductionS' ->
	  v_msg_ProductionS(Msg, [MsgName], TrUserData);
      'ProductionM' ->
	  v_msg_ProductionM(Msg, [MsgName], TrUserData);
      'ResultS' -> v_msg_ResultS(Msg, [MsgName], TrUserData);
      'ResultI' -> v_msg_ResultI(Msg, [MsgName], TrUserData);
      'InfoS' -> v_msg_InfoS(Msg, [MsgName], TrUserData);
      'InfoI' -> v_msg_InfoI(Msg, [MsgName], TrUserData);
      'Server' -> v_msg_Server(Msg, [MsgName], TrUserData);
      'Importer' ->
	  v_msg_Importer(Msg, [MsgName], TrUserData);
      'Negotiator' ->
	  v_msg_Negotiator(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_MsgAuth/3}).
-dialyzer({nowarn_function,v_msg_MsgAuth/3}).
v_msg_MsgAuth(#'MsgAuth'{name = F1, pass = F2,
			 ctype = F3, mtype = F4},
	      Path, TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData),
    v_type_string(F2, [pass | Path], TrUserData),
    'v_enum_MsgAuth.ClientType'(F3, [ctype | Path],
				TrUserData),
    'v_enum_MsgAuth.MsgType'(F4, [mtype | Path],
			     TrUserData),
    ok;
v_msg_MsgAuth(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MsgAuth'}, X, Path).

-compile({nowarn_unused_function,v_msg_MsgAck/3}).
-dialyzer({nowarn_function,v_msg_MsgAck/3}).
v_msg_MsgAck(#'MsgAck'{ok = F1, msg = F2}, Path,
	     TrUserData) ->
    v_type_bool(F1, [ok | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path], TrUserData)
    end,
    ok;
v_msg_MsgAck(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MsgAck'}, X, Path).

-compile({nowarn_unused_function,v_msg_DisponibilityS/3}).
-dialyzer({nowarn_function,v_msg_DisponibilityS/3}).
v_msg_DisponibilityS(#'DisponibilityS'{nameM = F1,
				       nameP = F2, minimum = F3, maximum = F4,
				       value = F5, period = F6},
		     Path, TrUserData) ->
    v_type_string(F1, [nameM | Path], TrUserData),
    v_type_string(F2, [nameP | Path], TrUserData),
    v_type_int32(F3, [minimum | Path], TrUserData),
    v_type_int32(F4, [maximum | Path], TrUserData),
    v_type_float(F5, [value | Path], TrUserData),
    v_type_int32(F6, [period | Path], TrUserData),
    ok;
v_msg_DisponibilityS(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DisponibilityS'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_DisponibilityN/3}).
-dialyzer({nowarn_function,v_msg_DisponibilityN/3}).
v_msg_DisponibilityN(#'DisponibilityN'{nameM = F1,
				       nameP = F2, minimum = F3, maximum = F4,
				       value = F5, period = F6},
		     Path, TrUserData) ->
    v_type_string(F1, [nameM | Path], TrUserData),
    v_type_string(F2, [nameP | Path], TrUserData),
    v_type_int32(F3, [minimum | Path], TrUserData),
    v_type_int32(F4, [maximum | Path], TrUserData),
    v_type_float(F5, [value | Path], TrUserData),
    v_type_int32(F6, [period | Path], TrUserData),
    ok;
v_msg_DisponibilityN(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DisponibilityN'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_OrderS/3}).
-dialyzer({nowarn_function,v_msg_OrderS/3}).
v_msg_OrderS(#'OrderS'{nameM = F1, nameP = F2,
		       quant = F3, value = F4, nameI = F5},
	     Path, TrUserData) ->
    v_type_string(F1, [nameM | Path], TrUserData),
    v_type_string(F2, [nameP | Path], TrUserData),
    v_type_int32(F3, [quant | Path], TrUserData),
    v_type_float(F4, [value | Path], TrUserData),
    v_type_string(F5, [nameI | Path], TrUserData),
    ok;
v_msg_OrderS(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderS'}, X, Path).

-compile({nowarn_unused_function,v_msg_OrderN/3}).
-dialyzer({nowarn_function,v_msg_OrderN/3}).
v_msg_OrderN(#'OrderN'{nameM = F1, nameP = F2,
		       quant = F3, value = F4, nameI = F5},
	     Path, TrUserData) ->
    v_type_string(F1, [nameM | Path], TrUserData),
    v_type_string(F2, [nameP | Path], TrUserData),
    v_type_int32(F3, [quant | Path], TrUserData),
    v_type_float(F4, [value | Path], TrUserData),
    v_type_string(F5, [nameI | Path], TrUserData),
    ok;
v_msg_OrderN(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderN'}, X, Path).

-compile({nowarn_unused_function,v_msg_OrderAckS/3}).
-dialyzer({nowarn_function,v_msg_OrderAckS/3}).
v_msg_OrderAckS(#'OrderAckS'{ack = F1, msg = F2,
			     nameI = F3, outdated = F4},
		Path, TrUserData) ->
    v_type_bool(F1, [ack | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path], TrUserData)
    end,
    v_type_string(F3, [nameI | Path], TrUserData),
    v_type_bool(F4, [outdated | Path], TrUserData),
    ok;
v_msg_OrderAckS(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderAckS'}, X, Path).

-compile({nowarn_unused_function,v_msg_OrderAckI/3}).
-dialyzer({nowarn_function,v_msg_OrderAckI/3}).
v_msg_OrderAckI(#'OrderAckI'{ack = F1, msg = F2,
			     outdated = F3},
		Path, TrUserData) ->
    v_type_bool(F1, [ack | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path], TrUserData)
    end,
    v_type_bool(F3, [outdated | Path], TrUserData),
    ok;
v_msg_OrderAckI(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'OrderAckI'}, X, Path).

-compile({nowarn_unused_function,v_msg_SubS/3}).
-dialyzer({nowarn_function,v_msg_SubS/3}).
v_msg_SubS(#'SubS'{nameI = F1, subs = F2}, Path,
	   TrUserData) ->
    v_type_string(F1, [nameI | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [subs | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2,
			 [subs | Path])
    end,
    ok;
v_msg_SubS(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SubS'}, X, Path).

-compile({nowarn_unused_function,v_msg_SubN/3}).
-dialyzer({nowarn_function,v_msg_SubN/3}).
v_msg_SubN(#'SubN'{nameI = F1, subs = F2}, Path,
	   TrUserData) ->
    v_type_string(F1, [nameI | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [subs | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2,
			 [subs | Path])
    end,
    ok;
v_msg_SubN(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SubN'}, X, Path).

-compile({nowarn_unused_function,v_msg_ProductionS/3}).
-dialyzer({nowarn_function,v_msg_ProductionS/3}).
v_msg_ProductionS(#'ProductionS'{nameM = F1, nameP = F2,
				 quant = F3, value = F4},
		  Path, TrUserData) ->
    v_type_string(F1, [nameM | Path], TrUserData),
    v_type_string(F2, [nameP | Path], TrUserData),
    v_type_int32(F3, [quant | Path], TrUserData),
    v_type_float(F4, [value | Path], TrUserData),
    ok;
v_msg_ProductionS(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProductionS'}, X, Path).

-compile({nowarn_unused_function,v_msg_ProductionM/3}).
-dialyzer({nowarn_function,v_msg_ProductionM/3}).
v_msg_ProductionM(#'ProductionM'{nameP = F1, quant = F2,
				 value = F3},
		  Path, TrUserData) ->
    v_type_string(F1, [nameP | Path], TrUserData),
    v_type_int32(F2, [quant | Path], TrUserData),
    v_type_int32(F3, [value | Path], TrUserData),
    ok;
v_msg_ProductionM(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProductionM'}, X, Path).

-compile({nowarn_unused_function,v_msg_ResultS/3}).
-dialyzer({nowarn_function,v_msg_ResultS/3}).
v_msg_ResultS(#'ResultS'{result = F1, msg = F2,
			 nameI = F3},
	      Path, TrUserData) ->
    v_type_bool(F1, [result | Path], TrUserData),
    v_type_string(F2, [msg | Path], TrUserData),
    v_type_string(F3, [nameI | Path], TrUserData),
    ok;
v_msg_ResultS(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResultS'}, X, Path).

-compile({nowarn_unused_function,v_msg_ResultI/3}).
-dialyzer({nowarn_function,v_msg_ResultI/3}).
v_msg_ResultI(#'ResultI'{result = F1, msg = F2}, Path,
	      TrUserData) ->
    v_type_bool(F1, [result | Path], TrUserData),
    v_type_string(F2, [msg | Path], TrUserData),
    ok;
v_msg_ResultI(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResultI'}, X, Path).

-compile({nowarn_unused_function,v_msg_InfoS/3}).
-dialyzer({nowarn_function,v_msg_InfoS/3}).
v_msg_InfoS(#'InfoS'{nameM = F1, nameP = F2,
		     minimum = F3, maximum = F4, value = F5, period = F6,
		     nameI = F7},
	    Path, TrUserData) ->
    v_type_string(F1, [nameM | Path], TrUserData),
    v_type_string(F2, [nameP | Path], TrUserData),
    v_type_int32(F3, [minimum | Path], TrUserData),
    v_type_int32(F4, [maximum | Path], TrUserData),
    v_type_float(F5, [value | Path], TrUserData),
    v_type_int32(F6, [period | Path], TrUserData),
    v_type_string(F7, [nameI | Path], TrUserData),
    ok;
v_msg_InfoS(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InfoS'}, X, Path).

-compile({nowarn_unused_function,v_msg_InfoI/3}).
-dialyzer({nowarn_function,v_msg_InfoI/3}).
v_msg_InfoI(#'InfoI'{nameM = F1, nameP = F2,
		     minimum = F3, maximum = F4, value = F5, period = F6},
	    Path, TrUserData) ->
    v_type_string(F1, [nameM | Path], TrUserData),
    v_type_string(F2, [nameP | Path], TrUserData),
    v_type_int32(F3, [minimum | Path], TrUserData),
    v_type_int32(F4, [maximum | Path], TrUserData),
    v_type_float(F5, [value | Path], TrUserData),
    v_type_int32(F6, [period | Path], TrUserData),
    ok;
v_msg_InfoI(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'InfoI'}, X, Path).

-compile({nowarn_unused_function,v_msg_Server/3}).
-dialyzer({nowarn_function,v_msg_Server/3}).
v_msg_Server(#'Server'{msg = F1}, Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {m1, OF1} ->
	  v_msg_DisponibilityS(OF1, [m1, msg | Path], TrUserData);
      {m2, OF1} ->
	  v_msg_OrderS(OF1, [m2, msg | Path], TrUserData);
      {m3, OF1} ->
	  v_msg_SubS(OF1, [m3, msg | Path], TrUserData);
      {m4, OF1} ->
	  v_msg_ResultS(OF1, [m4, msg | Path], TrUserData);
      {m5, OF1} ->
	  v_msg_InfoS(OF1, [m5, msg | Path], TrUserData);
      {m6, OF1} ->
	  v_msg_ProductionS(OF1, [m6, msg | Path], TrUserData);
      {m7, OF1} ->
	  v_msg_OrderAckS(OF1, [m7, msg | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [msg | Path])
    end,
    ok;
v_msg_Server(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Server'}, X, Path).

-compile({nowarn_unused_function,v_msg_Importer/3}).
-dialyzer({nowarn_function,v_msg_Importer/3}).
v_msg_Importer(#'Importer'{msg = F1}, Path,
	       TrUserData) ->
    case F1 of
      undefined -> ok;
      {ordack, OF1} ->
	  v_msg_OrderAckI(OF1, [ordack, msg | Path], TrUserData);
      {result, OF1} ->
	  v_msg_ResultI(OF1, [result, msg | Path], TrUserData);
      {info, OF1} ->
	  v_msg_InfoI(OF1, [info, msg | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [msg | Path])
    end,
    ok;
v_msg_Importer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Importer'}, X, Path).

-compile({nowarn_unused_function,v_msg_Negotiator/3}).
-dialyzer({nowarn_function,v_msg_Negotiator/3}).
v_msg_Negotiator(#'Negotiator'{msg = F1}, Path,
		 TrUserData) ->
    case F1 of
      undefined -> ok;
      {sub, OF1} ->
	  v_msg_SubN(OF1, [sub, msg | Path], TrUserData);
      {order, OF1} ->
	  v_msg_OrderN(OF1, [order, msg | Path], TrUserData);
      {disponibility, OF1} ->
	  v_msg_DisponibilityN(OF1, [disponibility, msg | Path],
			       TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [msg | Path])
    end,
    ok;
v_msg_Negotiator(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Negotiator'}, X, Path).

-compile({nowarn_unused_function,'v_enum_MsgAuth.ClientType'/3}).
-dialyzer({nowarn_function,'v_enum_MsgAuth.ClientType'/3}).
'v_enum_MsgAuth.ClientType'('MANUFACTURER', _Path,
			    _TrUserData) ->
    ok;
'v_enum_MsgAuth.ClientType'('IMPORTER', _Path,
			    _TrUserData) ->
    ok;
'v_enum_MsgAuth.ClientType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_MsgAuth.ClientType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'MsgAuth.ClientType'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_MsgAuth.MsgType'/3}).
-dialyzer({nowarn_function,'v_enum_MsgAuth.MsgType'/3}).
'v_enum_MsgAuth.MsgType'('LOGIN', _Path, _TrUserData) ->
    ok;
'v_enum_MsgAuth.MsgType'('REGISTER', _Path,
			 _TrUserData) ->
    ok;
'v_enum_MsgAuth.MsgType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_MsgAuth.MsgType'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'MsgAuth.MsgType'}, X,
		  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'MsgAuth.ClientType'},
      [{'MANUFACTURER', 0}, {'IMPORTER', 1}]},
     {{enum, 'MsgAuth.MsgType'},
      [{'LOGIN', 0}, {'REGISTER', 1}]},
     {{msg, 'MsgAuth'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = pass, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = ctype, fnum = 3, rnum = 4,
	      type = {enum, 'MsgAuth.ClientType'},
	      occurrence = required, opts = []},
       #field{name = mtype, fnum = 4, rnum = 5,
	      type = {enum, 'MsgAuth.MsgType'}, occurrence = required,
	      opts = [{default, 'LOGIN'}]}]},
     {{msg, 'MsgAck'},
      [#field{name = ok, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'DisponibilityS'},
      [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nameP, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = minimum, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = maximum, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 5, rnum = 6, type = float,
	      occurrence = required, opts = []},
       #field{name = period, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'DisponibilityN'},
      [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nameP, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = minimum, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = maximum, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 5, rnum = 6, type = float,
	      occurrence = required, opts = []},
       #field{name = period, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'OrderS'},
      [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nameP, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = quant, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 4, rnum = 5, type = float,
	      occurrence = required, opts = []},
       #field{name = nameI, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'OrderN'},
      [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nameP, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = quant, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 4, rnum = 5, type = float,
	      occurrence = required, opts = []},
       #field{name = nameI, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'OrderAckS'},
      [#field{name = ack, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = nameI, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []},
       #field{name = outdated, fnum = 4, rnum = 5, type = bool,
	      occurrence = required, opts = []}]},
     {{msg, 'OrderAckI'},
      [#field{name = ack, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = outdated, fnum = 3, rnum = 4, type = bool,
	      occurrence = required, opts = []}]},
     {{msg, 'SubS'},
      [#field{name = nameI, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = subs, fnum = 2, rnum = 3, type = string,
	      occurrence = repeated, opts = []}]},
     {{msg, 'SubN'},
      [#field{name = nameI, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = subs, fnum = 2, rnum = 3, type = string,
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProductionS'},
      [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nameP, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = quant, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 4, rnum = 5, type = float,
	      occurrence = required, opts = []}]},
     {{msg, 'ProductionM'},
      [#field{name = nameP, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = quant, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'ResultS'},
      [#field{name = result, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = nameI, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'ResultI'},
      [#field{name = result, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'InfoS'},
      [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nameP, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = minimum, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = maximum, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 5, rnum = 6, type = float,
	      occurrence = required, opts = []},
       #field{name = period, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []},
       #field{name = nameI, fnum = 7, rnum = 8, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'InfoI'},
      [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nameP, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = minimum, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = maximum, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 5, rnum = 6, type = float,
	      occurrence = required, opts = []},
       #field{name = period, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'Server'},
      [#gpb_oneof{name = msg, rnum = 2,
		  fields =
		      [#field{name = m1, fnum = 1, rnum = 2,
			      type = {msg, 'DisponibilityS'},
			      occurrence = optional, opts = []},
		       #field{name = m2, fnum = 2, rnum = 2,
			      type = {msg, 'OrderS'}, occurrence = optional,
			      opts = []},
		       #field{name = m3, fnum = 3, rnum = 2,
			      type = {msg, 'SubS'}, occurrence = optional,
			      opts = []},
		       #field{name = m4, fnum = 4, rnum = 2,
			      type = {msg, 'ResultS'}, occurrence = optional,
			      opts = []},
		       #field{name = m5, fnum = 5, rnum = 2,
			      type = {msg, 'InfoS'}, occurrence = optional,
			      opts = []},
		       #field{name = m6, fnum = 6, rnum = 2,
			      type = {msg, 'ProductionS'},
			      occurrence = optional, opts = []},
		       #field{name = m7, fnum = 7, rnum = 2,
			      type = {msg, 'OrderAckS'}, occurrence = optional,
			      opts = []}]}]},
     {{msg, 'Importer'},
      [#gpb_oneof{name = msg, rnum = 2,
		  fields =
		      [#field{name = ordack, fnum = 1, rnum = 2,
			      type = {msg, 'OrderAckI'}, occurrence = optional,
			      opts = []},
		       #field{name = result, fnum = 2, rnum = 2,
			      type = {msg, 'ResultI'}, occurrence = optional,
			      opts = []},
		       #field{name = info, fnum = 3, rnum = 2,
			      type = {msg, 'InfoI'}, occurrence = optional,
			      opts = []}]}]},
     {{msg, 'Negotiator'},
      [#gpb_oneof{name = msg, rnum = 2,
		  fields =
		      [#field{name = sub, fnum = 1, rnum = 2,
			      type = {msg, 'SubN'}, occurrence = optional,
			      opts = []},
		       #field{name = order, fnum = 2, rnum = 2,
			      type = {msg, 'OrderN'}, occurrence = optional,
			      opts = []},
		       #field{name = disponibility, fnum = 3, rnum = 2,
			      type = {msg, 'DisponibilityN'},
			      occurrence = optional, opts = []}]}]}].


get_msg_names() ->
    ['MsgAuth', 'MsgAck', 'DisponibilityS',
     'DisponibilityN', 'OrderS', 'OrderN', 'OrderAckS',
     'OrderAckI', 'SubS', 'SubN', 'ProductionS',
     'ProductionM', 'ResultS', 'ResultI', 'InfoS', 'InfoI',
     'Server', 'Importer', 'Negotiator'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['MsgAuth', 'MsgAck', 'DisponibilityS',
     'DisponibilityN', 'OrderS', 'OrderN', 'OrderAckS',
     'OrderAckI', 'SubS', 'SubN', 'ProductionS',
     'ProductionM', 'ResultS', 'ResultI', 'InfoS', 'InfoI',
     'Server', 'Importer', 'Negotiator'].


get_enum_names() ->
    ['MsgAuth.ClientType', 'MsgAuth.MsgType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('MsgAuth') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = pass, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = ctype, fnum = 3, rnum = 4,
	    type = {enum, 'MsgAuth.ClientType'},
	    occurrence = required, opts = []},
     #field{name = mtype, fnum = 4, rnum = 5,
	    type = {enum, 'MsgAuth.MsgType'}, occurrence = required,
	    opts = [{default, 'LOGIN'}]}];
find_msg_def('MsgAck') ->
    [#field{name = ok, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('DisponibilityS') ->
    [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nameP, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = minimum, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = maximum, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 5, rnum = 6, type = float,
	    occurrence = required, opts = []},
     #field{name = period, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('DisponibilityN') ->
    [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nameP, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = minimum, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = maximum, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 5, rnum = 6, type = float,
	    occurrence = required, opts = []},
     #field{name = period, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('OrderS') ->
    [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nameP, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = quant, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 4, rnum = 5, type = float,
	    occurrence = required, opts = []},
     #field{name = nameI, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []}];
find_msg_def('OrderN') ->
    [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nameP, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = quant, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 4, rnum = 5, type = float,
	    occurrence = required, opts = []},
     #field{name = nameI, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []}];
find_msg_def('OrderAckS') ->
    [#field{name = ack, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = nameI, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []},
     #field{name = outdated, fnum = 4, rnum = 5, type = bool,
	    occurrence = required, opts = []}];
find_msg_def('OrderAckI') ->
    [#field{name = ack, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = outdated, fnum = 3, rnum = 4, type = bool,
	    occurrence = required, opts = []}];
find_msg_def('SubS') ->
    [#field{name = nameI, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = subs, fnum = 2, rnum = 3, type = string,
	    occurrence = repeated, opts = []}];
find_msg_def('SubN') ->
    [#field{name = nameI, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = subs, fnum = 2, rnum = 3, type = string,
	    occurrence = repeated, opts = []}];
find_msg_def('ProductionS') ->
    [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nameP, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = quant, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 4, rnum = 5, type = float,
	    occurrence = required, opts = []}];
find_msg_def('ProductionM') ->
    [#field{name = nameP, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = quant, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('ResultS') ->
    [#field{name = result, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = nameI, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []}];
find_msg_def('ResultI') ->
    [#field{name = result, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('InfoS') ->
    [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nameP, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = minimum, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = maximum, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 5, rnum = 6, type = float,
	    occurrence = required, opts = []},
     #field{name = period, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []},
     #field{name = nameI, fnum = 7, rnum = 8, type = string,
	    occurrence = required, opts = []}];
find_msg_def('InfoI') ->
    [#field{name = nameM, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nameP, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = minimum, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = maximum, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 5, rnum = 6, type = float,
	    occurrence = required, opts = []},
     #field{name = period, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('Server') ->
    [#gpb_oneof{name = msg, rnum = 2,
		fields =
		    [#field{name = m1, fnum = 1, rnum = 2,
			    type = {msg, 'DisponibilityS'},
			    occurrence = optional, opts = []},
		     #field{name = m2, fnum = 2, rnum = 2,
			    type = {msg, 'OrderS'}, occurrence = optional,
			    opts = []},
		     #field{name = m3, fnum = 3, rnum = 2,
			    type = {msg, 'SubS'}, occurrence = optional,
			    opts = []},
		     #field{name = m4, fnum = 4, rnum = 2,
			    type = {msg, 'ResultS'}, occurrence = optional,
			    opts = []},
		     #field{name = m5, fnum = 5, rnum = 2,
			    type = {msg, 'InfoS'}, occurrence = optional,
			    opts = []},
		     #field{name = m6, fnum = 6, rnum = 2,
			    type = {msg, 'ProductionS'}, occurrence = optional,
			    opts = []},
		     #field{name = m7, fnum = 7, rnum = 2,
			    type = {msg, 'OrderAckS'}, occurrence = optional,
			    opts = []}]}];
find_msg_def('Importer') ->
    [#gpb_oneof{name = msg, rnum = 2,
		fields =
		    [#field{name = ordack, fnum = 1, rnum = 2,
			    type = {msg, 'OrderAckI'}, occurrence = optional,
			    opts = []},
		     #field{name = result, fnum = 2, rnum = 2,
			    type = {msg, 'ResultI'}, occurrence = optional,
			    opts = []},
		     #field{name = info, fnum = 3, rnum = 2,
			    type = {msg, 'InfoI'}, occurrence = optional,
			    opts = []}]}];
find_msg_def('Negotiator') ->
    [#gpb_oneof{name = msg, rnum = 2,
		fields =
		    [#field{name = sub, fnum = 1, rnum = 2,
			    type = {msg, 'SubN'}, occurrence = optional,
			    opts = []},
		     #field{name = order, fnum = 2, rnum = 2,
			    type = {msg, 'OrderN'}, occurrence = optional,
			    opts = []},
		     #field{name = disponibility, fnum = 3, rnum = 2,
			    type = {msg, 'DisponibilityN'},
			    occurrence = optional, opts = []}]}];
find_msg_def(_) -> error.


find_enum_def('MsgAuth.ClientType') ->
    [{'MANUFACTURER', 0}, {'IMPORTER', 1}];
find_enum_def('MsgAuth.MsgType') ->
    [{'LOGIN', 0}, {'REGISTER', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('MsgAuth.ClientType', Value) ->
    'enum_symbol_by_value_MsgAuth.ClientType'(Value);
enum_symbol_by_value('MsgAuth.MsgType', Value) ->
    'enum_symbol_by_value_MsgAuth.MsgType'(Value).


enum_value_by_symbol('MsgAuth.ClientType', Sym) ->
    'enum_value_by_symbol_MsgAuth.ClientType'(Sym);
enum_value_by_symbol('MsgAuth.MsgType', Sym) ->
    'enum_value_by_symbol_MsgAuth.MsgType'(Sym).


'enum_symbol_by_value_MsgAuth.ClientType'(0) ->
    'MANUFACTURER';
'enum_symbol_by_value_MsgAuth.ClientType'(1) ->
    'IMPORTER'.


'enum_value_by_symbol_MsgAuth.ClientType'('MANUFACTURER') ->
    0;
'enum_value_by_symbol_MsgAuth.ClientType'('IMPORTER') ->
    1.

'enum_symbol_by_value_MsgAuth.MsgType'(0) -> 'LOGIN';
'enum_symbol_by_value_MsgAuth.MsgType'(1) -> 'REGISTER'.


'enum_value_by_symbol_MsgAuth.MsgType'('LOGIN') -> 0;
'enum_value_by_symbol_MsgAuth.MsgType'('REGISTER') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"nefit.MsgAuth">>) -> 'MsgAuth';
fqbin_to_msg_name(<<"nefit.MsgAck">>) -> 'MsgAck';
fqbin_to_msg_name(<<"nefit.DisponibilityS">>) -> 'DisponibilityS';
fqbin_to_msg_name(<<"nefit.DisponibilityN">>) -> 'DisponibilityN';
fqbin_to_msg_name(<<"nefit.OrderS">>) -> 'OrderS';
fqbin_to_msg_name(<<"nefit.OrderN">>) -> 'OrderN';
fqbin_to_msg_name(<<"nefit.OrderAckS">>) -> 'OrderAckS';
fqbin_to_msg_name(<<"nefit.OrderAckI">>) -> 'OrderAckI';
fqbin_to_msg_name(<<"nefit.SubS">>) -> 'SubS';
fqbin_to_msg_name(<<"nefit.SubN">>) -> 'SubN';
fqbin_to_msg_name(<<"nefit.ProductionS">>) -> 'ProductionS';
fqbin_to_msg_name(<<"nefit.ProductionM">>) -> 'ProductionM';
fqbin_to_msg_name(<<"nefit.ResultS">>) -> 'ResultS';
fqbin_to_msg_name(<<"nefit.ResultI">>) -> 'ResultI';
fqbin_to_msg_name(<<"nefit.InfoS">>) -> 'InfoS';
fqbin_to_msg_name(<<"nefit.InfoI">>) -> 'InfoI';
fqbin_to_msg_name(<<"nefit.Server">>) -> 'Server';
fqbin_to_msg_name(<<"nefit.Importer">>) -> 'Importer';
fqbin_to_msg_name(<<"nefit.Negotiator">>) -> 'Negotiator';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('MsgAuth') -> <<"nefit.MsgAuth">>;
msg_name_to_fqbin('MsgAck') -> <<"nefit.MsgAck">>;
msg_name_to_fqbin('DisponibilityS') -> <<"nefit.DisponibilityS">>;
msg_name_to_fqbin('DisponibilityN') -> <<"nefit.DisponibilityN">>;
msg_name_to_fqbin('OrderS') -> <<"nefit.OrderS">>;
msg_name_to_fqbin('OrderN') -> <<"nefit.OrderN">>;
msg_name_to_fqbin('OrderAckS') -> <<"nefit.OrderAckS">>;
msg_name_to_fqbin('OrderAckI') -> <<"nefit.OrderAckI">>;
msg_name_to_fqbin('SubS') -> <<"nefit.SubS">>;
msg_name_to_fqbin('SubN') -> <<"nefit.SubN">>;
msg_name_to_fqbin('ProductionS') -> <<"nefit.ProductionS">>;
msg_name_to_fqbin('ProductionM') -> <<"nefit.ProductionM">>;
msg_name_to_fqbin('ResultS') -> <<"nefit.ResultS">>;
msg_name_to_fqbin('ResultI') -> <<"nefit.ResultI">>;
msg_name_to_fqbin('InfoS') -> <<"nefit.InfoS">>;
msg_name_to_fqbin('InfoI') -> <<"nefit.InfoI">>;
msg_name_to_fqbin('Server') -> <<"nefit.Server">>;
msg_name_to_fqbin('Importer') -> <<"nefit.Importer">>;
msg_name_to_fqbin('Negotiator') -> <<"nefit.Negotiator">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"nefit.MsgAuth.ClientType">>) -> 'MsgAuth.ClientType';
fqbin_to_enum_name(<<"nefit.MsgAuth.MsgType">>) -> 'MsgAuth.MsgType';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('MsgAuth.ClientType') -> <<"nefit.MsgAuth.ClientType">>;
enum_name_to_fqbin('MsgAuth.MsgType') -> <<"nefit.MsgAuth.MsgType">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> nefit.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "nefit.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["nefit.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["nefit"].


get_msg_containment("nefit") ->
    ['DisponibilityN', 'DisponibilityS', 'Importer',
     'InfoI', 'InfoS', 'MsgAck', 'MsgAuth', 'Negotiator',
     'OrderAckI', 'OrderAckS', 'OrderN', 'OrderS',
     'ProductionM', 'ProductionS', 'ResultI', 'ResultS',
     'Server', 'SubN', 'SubS'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("nefit") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("nefit") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("nefit") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("nefit") ->
    ['MsgAuth.ClientType', 'MsgAuth.MsgType'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"nefit.Server">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.Negotiator">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.Importer">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.SubS">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ResultS">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ProductionS">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.OrderS">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.OrderAckS">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.InfoS">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.DisponibilityS">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.MsgAuth">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ResultI">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.OrderAckI">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.InfoI">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.MsgAck">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.ProductionM">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.SubN">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.OrderN">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(<<"nefit.DisponibilityN">>) -> "nefit";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"nefit.MsgAuth.MsgType">>) -> "nefit";
get_proto_by_enum_name_as_fqbin(<<"nefit.MsgAuth.ClientType">>) -> "nefit";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.8.0".

gpb_version_as_list() ->
    [4,8,0].
