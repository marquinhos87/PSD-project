%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.8.0

-ifndef(nefitproto).
-define(nefitproto, true).

-define(nefitproto_gpb_version, "4.8.0").

-ifndef('MSGAUTH_PB_H').
-define('MSGAUTH_PB_H', true).
-record('MsgAuth',
        {name                   :: iodata(),        % = 1
         pass                   :: iodata(),        % = 2
         ctype                  :: 'MANUFACTURER' | 'IMPORTER' | integer(), % = 3, enum MsgAuth.ClientType
         mtype = 'LOGIN'        :: 'LOGIN' | 'REGISTER' | integer() % = 4, enum MsgAuth.MsgType
        }).
-endif.

-ifndef('MSGACK_PB_H').
-define('MSGACK_PB_H', true).
-record('MsgAck',
        {ok                     :: boolean() | 0 | 1, % = 1
         msg                    :: iodata() | undefined % = 2
        }).
-endif.

-ifndef('DISPONIBILITYS_PB_H').
-define('DISPONIBILITYS_PB_H', true).
-record('DisponibilityS',
        {nameM                  :: iodata(),        % = 1
         nameP                  :: iodata(),        % = 2
         minimum                :: integer(),       % = 3, 32 bits
         maximum                :: integer(),       % = 4, 32 bits
         value                  :: float() | integer() | infinity | '-infinity' | nan, % = 5
         period                 :: integer()        % = 6, 32 bits
        }).
-endif.

-ifndef('DISPONIBILITYN_PB_H').
-define('DISPONIBILITYN_PB_H', true).
-record('DisponibilityN',
        {nameM                  :: iodata(),        % = 1
         nameP                  :: iodata(),        % = 2
         minimum                :: integer(),       % = 3, 32 bits
         maximum                :: integer(),       % = 4, 32 bits
         value                  :: float() | integer() | infinity | '-infinity' | nan, % = 5
         period                 :: integer()        % = 6, 32 bits
        }).
-endif.

-ifndef('ORDERS_PB_H').
-define('ORDERS_PB_H', true).
-record('OrderS',
        {nameM                  :: iodata(),        % = 1
         nameP                  :: iodata(),        % = 2
         quant                  :: integer(),       % = 3, 32 bits
         value                  :: float() | integer() | infinity | '-infinity' | nan, % = 4
         nameI                  :: iodata()         % = 5
        }).
-endif.

-ifndef('ORDERN_PB_H').
-define('ORDERN_PB_H', true).
-record('OrderN',
        {nameM                  :: iodata(),        % = 1
         nameP                  :: iodata(),        % = 2
         quant                  :: integer(),       % = 3, 32 bits
         value                  :: float() | integer() | infinity | '-infinity' | nan, % = 4
         nameI                  :: iodata()         % = 5
        }).
-endif.

-ifndef('ORDERACKS_PB_H').
-define('ORDERACKS_PB_H', true).
-record('OrderAckS',
        {ack                    :: boolean() | 0 | 1, % = 1
         msg                    :: iodata() | undefined, % = 2
         nameI                  :: iodata(),        % = 3
         outdated               :: boolean() | 0 | 1 % = 4
        }).
-endif.

-ifndef('ORDERACKI_PB_H').
-define('ORDERACKI_PB_H', true).
-record('OrderAckI',
        {ack                    :: boolean() | 0 | 1, % = 1
         msg                    :: iodata() | undefined, % = 2
         outdated               :: boolean() | 0 | 1 % = 3
        }).
-endif.

-ifndef('SUBS_PB_H').
-define('SUBS_PB_H', true).
-record('SubS',
        {nameI                  :: iodata(),        % = 1
         subs = []              :: [iodata()] | undefined % = 2
        }).
-endif.

-ifndef('SUBN_PB_H').
-define('SUBN_PB_H', true).
-record('SubN',
        {nameI                  :: iodata(),        % = 1
         subs = []              :: [iodata()] | undefined % = 2
        }).
-endif.

-ifndef('PRODUCTIONS_PB_H').
-define('PRODUCTIONS_PB_H', true).
-record('ProductionS',
        {nameM                  :: iodata(),        % = 1
         nameP                  :: iodata(),        % = 2
         quant                  :: integer(),       % = 3, 32 bits
         value                  :: float() | integer() | infinity | '-infinity' | nan % = 4
        }).
-endif.

-ifndef('PRODUCTIONM_PB_H').
-define('PRODUCTIONM_PB_H', true).
-record('ProductionM',
        {nameP                  :: iodata(),        % = 1
         quant                  :: integer(),       % = 2, 32 bits
         value                  :: float() | integer() | infinity | '-infinity' | nan % = 3
        }).
-endif.

-ifndef('RESULTS_PB_H').
-define('RESULTS_PB_H', true).
-record('ResultS',
        {result                 :: boolean() | 0 | 1, % = 1
         msg                    :: iodata(),        % = 2
         nameI                  :: iodata()         % = 3
        }).
-endif.

-ifndef('RESULTI_PB_H').
-define('RESULTI_PB_H', true).
-record('ResultI',
        {result                 :: boolean() | 0 | 1, % = 1
         msg                    :: iodata()         % = 2
        }).
-endif.

-ifndef('INFOS_PB_H').
-define('INFOS_PB_H', true).
-record('InfoS',
        {nameM                  :: iodata(),        % = 1
         nameP                  :: iodata(),        % = 2
         minimum                :: integer(),       % = 3, 32 bits
         maximum                :: integer(),       % = 4, 32 bits
         value                  :: float() | integer() | infinity | '-infinity' | nan, % = 5
         period                 :: integer(),       % = 6, 32 bits
         nameI                  :: iodata()         % = 7
        }).
-endif.

-ifndef('INFOI_PB_H').
-define('INFOI_PB_H', true).
-record('InfoI',
        {nameM                  :: iodata(),        % = 1
         nameP                  :: iodata(),        % = 2
         minimum                :: integer(),       % = 3, 32 bits
         maximum                :: integer(),       % = 4, 32 bits
         value                  :: float() | integer() | infinity | '-infinity' | nan, % = 5
         period                 :: integer()        % = 6, 32 bits
        }).
-endif.

-ifndef('SERVER_PB_H').
-define('SERVER_PB_H', true).
-record('Server',
        {msg                    :: {m1, nefitproto:'DisponibilityS'()} | {m2, nefitproto:'OrderS'()} | {m3, nefitproto:'SubS'()} | {m4, nefitproto:'ResultS'()} | {m5, nefitproto:'InfoS'()} | {m6, nefitproto:'ProductionS'()} | {m7, nefitproto:'OrderAckS'()} | undefined % oneof
        }).
-endif.

-ifndef('IMPORTER_PB_H').
-define('IMPORTER_PB_H', true).
-record('Importer',
        {msg                    :: {ordack, nefitproto:'OrderAckI'()} | {result, nefitproto:'ResultI'()} | {info, nefitproto:'InfoI'()} | undefined % oneof
        }).
-endif.

-ifndef('NEGOTIATOR_PB_H').
-define('NEGOTIATOR_PB_H', true).
-record('Negotiator',
        {msg                    :: {sub, nefitproto:'SubN'()} | {order, nefitproto:'OrderN'()} | {disponibility, nefitproto:'DisponibilityN'()} | undefined % oneof
        }).
-endif.

-ifndef('CLIENTTOSERVER_PB_H').
-define('CLIENTTOSERVER_PB_H', true).
-record('ClientToServer',
        {message                :: {login, nefitproto:'ClientToServerLogin'()} | {register, nefitproto:'ClientToServerRegister'()} | undefined % oneof
        }).
-endif.

-ifndef('CLIENTTOSERVERLOGIN_PB_H').
-define('CLIENTTOSERVERLOGIN_PB_H', true).
-record('ClientToServerLogin',
        {username               :: iodata(),        % = 1
         password               :: iodata(),        % = 2
         clientType             :: 'IMPORTER' | 'MANUFACTURER' | integer() % = 3, enum ClientType
        }).
-endif.

-ifndef('CLIENTTOSERVERREGISTER_PB_H').
-define('CLIENTTOSERVERREGISTER_PB_H', true).
-record('ClientToServerRegister',
        {username               :: iodata(),        % = 1
         password               :: iodata()         % = 2
        }).
-endif.

-ifndef('SERVERTOCLIENTAUTH_PB_H').
-define('SERVERTOCLIENTAUTH_PB_H', true).
-record('ServerToClientAuth',
        {ok                     :: boolean() | 0 | 1, % = 1
         clientType             :: 'IMPORTER' | 'MANUFACTURER' | integer() | undefined, % = 2, enum ClientType
         errorMessage           :: iodata() | undefined % = 3
        }).
-endif.

-ifndef('MANUFACTURERTOSERVER_PB_H').
-define('MANUFACTURERTOSERVER_PB_H', true).
-record('ManufacturerToServer',
        {message                :: {announce, nefitproto:'ManufacturerToServerAnnounce'()} | undefined % oneof
        }).
-endif.

-ifndef('MANUFACTURERTOSERVERANNOUNCE_PB_H').
-define('MANUFACTURERTOSERVERANNOUNCE_PB_H', true).
-record('ManufacturerToServerAnnounce',
        {productName            :: iodata(),        % = 1
         minQuantity            :: integer(),       % = 2, 32 bits
         maxQuantity            :: integer(),       % = 3, 32 bits
         minUnitPrice           :: float() | integer() | infinity | '-infinity' | nan, % = 4
         timeout                :: integer(),       % = 5, 32 bits
         manufacturerName       :: iodata()         % = 6
        }).
-endif.

-ifndef('SERVERTOMANUFACTURER_PB_H').
-define('SERVERTOMANUFACTURER_PB_H', true).
-record('ServerToManufacturer',
        {message                :: {announced, nefitproto:'ServerToManufacturerAnnounced'()} | {invalid, nefitproto:'ServerToManufacturerInvalid'()} | {noOffers, nefitproto:'ServerToManufacturerNoOffers'()} | {sold, nefitproto:'ServerToManufacturerSold'()} | undefined % oneof
        }).
-endif.

-ifndef('SERVERTOMANUFACTURERANNOUNCED_PB_H').
-define('SERVERTOMANUFACTURERANNOUNCED_PB_H', true).
-record('ServerToManufacturerAnnounced',
        {
        }).
-endif.

-ifndef('SERVERTOMANUFACTURERINVALID_PB_H').
-define('SERVERTOMANUFACTURERINVALID_PB_H', true).
-record('ServerToManufacturerInvalid',
        {errorMessage           :: iodata() | undefined % = 1
        }).
-endif.

-ifndef('SERVERTOMANUFACTURERNOOFFERS_PB_H').
-define('SERVERTOMANUFACTURERNOOFFERS_PB_H', true).
-record('ServerToManufacturerNoOffers',
        {productName            :: iodata()         % = 1
        }).
-endif.

-ifndef('SERVERTOMANUFACTURERSOLD_PB_H').
-define('SERVERTOMANUFACTURERSOLD_PB_H', true).
-record('ServerToManufacturerSold',
        {productName            :: iodata(),        % = 1
         quantity               :: integer(),       % = 2, 32 bits
         unitPrice              :: float() | integer() | infinity | '-infinity' | nan % = 3
        }).
-endif.

-ifndef('IMPORTERTOSERVER_PB_H').
-define('IMPORTERTOSERVER_PB_H', true).
-record('ImporterToServer',
        {message                :: {subscribe, nefitproto:'ImporterToServerSubscribe'()} | {offer, nefitproto:'ImporterToServerOffer'()} | undefined % oneof
        }).
-endif.

-ifndef('IMPORTERTOSERVERSUBSCRIBE_PB_H').
-define('IMPORTERTOSERVERSUBSCRIBE_PB_H', true).
-record('ImporterToServerSubscribe',
        {manufacturerName = []  :: [iodata()] | undefined, % = 1
         importerName           :: iodata()         % = 2
        }).
-endif.

-ifndef('IMPORTERTOSERVEROFFER_PB_H').
-define('IMPORTERTOSERVEROFFER_PB_H', true).
-record('ImporterToServerOffer',
        {manufacturerName       :: iodata(),        % = 1
         productName            :: iodata(),        % = 2
         quantity               :: integer(),       % = 3, 32 bits
         unitPrice              :: float() | integer() | infinity | '-infinity' | nan, % = 4
         importerName           :: iodata()         % = 5
        }).
-endif.

-ifndef('SERVERTOIMPORTER_PB_H').
-define('SERVERTOIMPORTER_PB_H', true).
-record('ServerToImporter',
        {message                :: {offerSubmitted, nefitproto:'ServerToImporterOfferSubmitted'()} | {offerInvalid, nefitproto:'ServerToImporterOfferInvalid'()} | {offerWon, nefitproto:'ServerToImporterOfferWon'()} | {offerLose, nefitproto:'ServerToImporterOfferLose'()} | {newProduct, nefitproto:'ServerToImporterNewProduct'()} | undefined % oneof
        }).
-endif.

-ifndef('SERVERTOIMPORTEROFFERSUBMITTED_PB_H').
-define('SERVERTOIMPORTEROFFERSUBMITTED_PB_H', true).
-record('ServerToImporterOfferSubmitted',
        {
        }).
-endif.

-ifndef('SERVERTOIMPORTEROFFERINVALID_PB_H').
-define('SERVERTOIMPORTEROFFERINVALID_PB_H', true).
-record('ServerToImporterOfferInvalid',
        {errorMessage           :: iodata()         % = 1
        }).
-endif.

-ifndef('SERVERTOIMPORTEROFFERWON_PB_H').
-define('SERVERTOIMPORTEROFFERWON_PB_H', true).
-record('ServerToImporterOfferWon',
        {manufacturerName       :: iodata(),        % = 1
         productName            :: iodata(),        % = 2
         quantity               :: integer(),       % = 3, 32 bits
         unitPrice              :: float() | integer() | infinity | '-infinity' | nan % = 4
        }).
-endif.

-ifndef('SERVERTOIMPORTEROFFERLOSE_PB_H').
-define('SERVERTOIMPORTEROFFERLOSE_PB_H', true).
-record('ServerToImporterOfferLose',
        {manufacturerName       :: iodata(),        % = 1
         productName            :: iodata()         % = 2
        }).
-endif.

-ifndef('SERVERTOIMPORTERNEWPRODUCT_PB_H').
-define('SERVERTOIMPORTERNEWPRODUCT_PB_H', true).
-record('ServerToImporterNewProduct',
        {productName            :: iodata(),        % = 1
         minQuantity            :: integer(),       % = 2, 32 bits
         maxQuantity            :: integer(),       % = 3, 32 bits
         minUnitPrice           :: float() | integer() | infinity | '-infinity' | nan, % = 4
         timeout                :: integer(),       % = 5, 32 bits
         manufacturerName       :: iodata()         % = 6
        }).
-endif.

-endif.
